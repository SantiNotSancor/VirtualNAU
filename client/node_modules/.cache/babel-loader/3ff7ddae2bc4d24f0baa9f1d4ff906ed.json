{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\GitHub\\\\VirtualNAU\\\\client\\\\src\\\\WorkshopsAdm\\\\deliverTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { ModalOpener } from '../modalOpener';\nimport { Request, TaskRequest } from '../textInputs';\nimport Form from 'react-bootstrap/Form';\nimport image from './Images/DeliverTask.svg';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport Table from 'react-bootstrap/Table';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { ModalPrototype } from '../modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  error: true,\n  errors: [true, true],\n  showObsModal: false,\n  task: '',\n  name: '',\n  quantity: '',\n  money: '',\n  weight: '',\n  threads: '',\n  price: '',\n  faulty: '',\n  completed: false,\n  calification: '',\n  observation: '',\n  paid: false,\n  workshopAccount: ''\n};\nexport class DeliverTaskButton extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialState;\n    this.form = /*#__PURE__*/React.createRef();\n\n    this.resetState = () => {\n      this.setState(initialState);\n    };\n\n    this.updateError = (index, error) => {\n      let errors = [...this.state.errors];\n      errors[index] = error;\n      this.setState({\n        errors\n      });\n      let aux = false;\n      errors.map((e, key) => aux = aux && key === index ? error : e);\n      this.setState({\n        error: aux\n      });\n    };\n\n    this.handleEnter = event => {\n      if (event.key.toLowerCase() !== 'enter') return;\n      const form = this.form.current;\n      const index = [...form].indexOf(event.target);\n      if (form.elements[index + 1]) form.elements[index + 1].focus();\n    };\n\n    this.myForm = () => {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        id: \"toPrint\",\n        ref: this.form,\n        onSubmit: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(Request, {\n          toShow: \"workshopName\",\n          handleEnter: this.handleEnter,\n          onChange: (value, error) => {\n            this.setState({\n              name: value\n            });\n            this.updateError(0, error);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: this.state.name,\n          onChange: (data, price, faulty, task, completed, paid, workshopAccount, usedAccount) => {\n            this.setState({\n              task,\n              quantity: data.quantity,\n              money: Number(data.money) + Number(usedAccount),\n              weight: data.weight,\n              threads: data.threads,\n              completed,\n              price,\n              faulty,\n              paid,\n              workshopAccount\n            });\n            this.updateError(1, false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.post = () => {\n      let {\n        completed,\n        task,\n        money,\n        weight,\n        name,\n        quantity,\n        price,\n        threads,\n        paid,\n        workshopAccount\n      } = this.state;\n      if (!completed) this.resetState();\n      Axios.post('http://localhost:3307/getTasks', {\n        id: task\n      }).then(response => {\n        Axios.put('http://localhost:3307/payWorkshop', {\n          name: response.data[0].name,\n          money: money - quantity * price\n        });\n      });\n      Axios.post('http://localhost:3307/newPart', {\n        name,\n        task,\n        date: moment(new Date()).format('DD/MM/YYYY'),\n        quantity,\n        threads,\n        paid,\n        weight: Number(weight).toFixed(1),\n        money: Number(money).toFixed(1)\n      }).then(() => {\n        if (completed) this.setState({\n          showObsModal: true\n        });\n      });\n      Axios.put('http://localhost:3307/setAccount', {\n        money: workshopAccount,\n        name\n      }); //Actualizar el dinero que posee a cuenta el taller\n    };\n\n    this.completelyReturned = () => {\n      Axios.put('http://localhost:3307/printObs', {\n        id: this.state.task,\n        observations: this.state.observation,\n        calification: this.state.calification,\n        faulty: this.state.faulty\n      });\n    };\n\n    this.print = () => {\n      if (this.state.error) {\n        alert('Error. No se puede imprimir una boleta inválida.');\n        return;\n      }\n\n      var printContents = document.getElementById('toPrint').innerHTML;\n      var originalContents = document.body.innerHTML;\n      document.body.innerHTML = printContents;\n      window.print();\n      document.body.innerHTML = originalContents;\n    };\n\n    this.sendObs = () => {\n      console.log('hi');\n      this.completelyReturned();\n      console.log('hi');\n      this.resetState();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ModalOpener, {\n        buttonText: \"Recibir tarea\",\n        children: this.myForm(),\n        logo: image,\n        className: \"title\",\n        footer: {\n          label: 'Imprimir',\n          func: this.print,\n          show: !!document.getElementById(\"taskTable\")\n        },\n        title: \"Ingreso de tarea\",\n        post: this.post,\n        error: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ModalPrototype, {\n        title: \"Calificar\",\n        show: this.state.showObsModal,\n        post: this.sendObs,\n        handleClose: () => console.log('hi'),\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Request, {\n            toShow: \"observation\",\n            onChange: e => this.setState({\n              observation: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Request, {\n            toShow: \"calification\",\n            onChange: e => this.setState({\n              calification: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nexport const Input = _ref => {\n  _s();\n\n  let {\n    onChange,\n    name\n  } = _ref;\n  const [title, setTitle] = useState('Elegir tarea'); //Título del selectBox. Primero va a ser 'Elegir tarea' pero luego va a mostrar la tarea elegida\n\n  const [tasks, setTasks] = useState([]); //Todas las tareas que no se le pagaron por completo al taller\n\n  const [parts, setParts] = useState([]); //Todas las entregas parciales de la tarea elegida\n\n  const [input, setInput] = useState({\n    quantity: 0,\n    weight: 0,\n    money: 0,\n    threads: 0\n  }); //Lo ingresado por el usuario en la tabla\n\n  const [selectedTask, setSelectedTask] = useState(''); //La tarea elegida\n\n  const [refund, setRefund] = useState(false); //¿Está cargando una devolución?\n\n  const [completed, setCompleted] = useState(false); //¿El taller entregó el total de la mercadería?\n  //const [actualAccount, setActualAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\n\n  const [account, setAccount] = useState(''); //Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\n\n  const [quantityBackUp, setQuantityBackUp] = useState(''); //Una variable auxiliar para recordar la cantidad, de esta forma podremos saber cuándo cambia\n\n  useEffect(() => {\n    if (name === '') return;\n    Axios.post('http://localhost:3307/getUnpaidTasks', {\n      name\n    }).then(response => {\n      if (response.data.length === 0) return;\n      setTasks(response.data);\n    });\n    console.log('update tasks');\n  }, [name]);\n  useEffect(() => {\n    //Cuando selectedTask cambia...\n    setInput({\n      quantity: 0,\n      weight: 0,\n      money: 0,\n      threads: 0\n    }); //Resetear los valores de Input (porque el usuario no ingresó nada)\n\n    let moneyPaid = input.money;\n    Axios.post('http://localhost:3307/getParts', {\n      task: selectedTask.id\n    }).then(response => {\n      setParts(response.data); //Recuperar partes desde la BD y asignarselas a parts\n\n      response.data.map(part => moneyPaid += part.money); //Sumar a moneyPaid todo lo pagado en cada parte\n\n      if (name) //Si se sabe el nombre del taller...\n        Axios.post('http://localhost:3307/getAccount', {\n          name\n        }).then(response => {\n          //Recuperar de la BD la cuenta corriente del taller\n          setAccount(response.data[0].money);\n        });\n    });\n  }, [selectedTask]);\n  useEffect(() => {\n    let delivered = input.quantity;\n    let moneyPaid = isNaN(input.money) ? 0 : input.money;\n    parts.map(part => moneyPaid = Number(moneyPaid) + Number(part.money)); //Sumar a moneyPaid todo lo pagado en cada parte\n\n    parts.map(part => delivered += part.quantity); //Sumar a delivered todas las cantidades entregadas en cada parte\n\n    if (quantityBackUp !== input.quantity) {\n      //Si se modificó la cantidad\n      input.money = input.quantity * selectedTask.price - account; //Le recomienda al usuario pagar todo lo que debe pagar (lo entregado en esta parte * el precio acordado - la cuenta corriente de esta parte)\n\n      input.money = input.money < 0 ? 0 : input.money; //No se le puede recomendar pagar un número negativo\n\n      setQuantityBackUp(input.quantity); //Volver a actualizar la cantidad\n    }\n\n    onChange(input, selectedTask.price, selectedTask.quantity - delivered, selectedTask.id, //Se envían los cambios\n    delivered === selectedTask.quantity || completed, selectedTask.quantity * selectedTask.price <= moneyPaid, input.quantity * selectedTask.price - moneyPaid - account, account); //TODO: Revisar fórmula para leftover (workshopAccount)\n    //onChange(data, price, faulty, task, completed, paid, workshopAccount, usedAccount)//objeto con todo lo ingresado, precio, artículos fallados, id de tarea, si se entregaron todos los artículos, si se pagó la totalidad de la tarea, lo que le quedará de cuenta corriente al taller luego de la parte y la cantidad de dinero utilizado de la cuenta corriente\n  }, [input, completed, refund]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const inputField = (property, total) => {\n    //Función que devuelve un inputbox para ingresar datos al objeto input. propery\n    //property es la propiedad de input que se quiere modificar con el inputbox y total es el objeto que contiene todos los totales\n    return /*#__PURE__*/_jsxDEV(FormControl, {\n      value: input[property] //Asignar al inputbox la variable input[property], es decir que cada vez que el inputbox se modifica, la variable también y vice versa\n      ,\n      onChange: e => {\n        //Cuando cambia el inputbox...\n        let value = e.target.value;\n        if (isNaN(value) || total[property] < value && property !== 'money') //Si el valor es inválido...\n          return; //Cancelar\n\n        let aux = { ...input\n        };\n        aux[property] = value[value.length - 1] === '.' ? value : Number(value);\n        aux[property] = refund ? //Si se está haciendo una devolución de mercadería o se contó mal la mercadería en una parte anterior\n        -Math.abs(aux[property]) : //Poner en negativo lo ingresado (así se suma y no se resta al total)\n        aux[property] < 0 ? 0 : aux[property]; //Si la propiedad es negativa, convertir en 0\n\n        if (property === 'quantity' || property === 'threads') //Si la propiedad es cantidad o hilos...\n          aux[property] = Math.round(aux[property]); //No puede ser decimal\n\n        setInput({ ...aux\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this);\n  };\n\n  const getTable = () => {\n    let total = {\n      quantity: selectedTask.quantity,\n      weight: selectedTask.weight,\n      money: selectedTask.quantity * selectedTask.price,\n      threads: selectedTask.threads\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parts.map((part, index) => {\n        total = {\n          quantity: total.quantity - part.quantity,\n          weight: total.weight - part.weight,\n          money: total.money - part.money,\n          threads: total.threads - part.threads\n        };\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: part.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: part.quantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: total.quantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: Number(part.weight).toFixed(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: Number(total.weight).toFixed(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: part.threads\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: total.threads\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: '$' + Number(part.money).toFixed(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: '$' + Number(total.money).toFixed(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: moment(new Date()).format('DD/MM/YYYY')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: inputField('quantity', total)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: total.quantity - input.quantity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: inputField('weight', total)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: (total.weight - input.weight).toFixed(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: inputField('threads', total)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: total.threads - input.threads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: inputField('money', total)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: '$' + account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: '$' + (total.money - input.money - account).toFixed(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  const getExceeded = () => {\n    //Devuelve true si se excedió la fecha de entrega\n    if (!selectedTask.deadline) return;\n    let today = new Date();\n    today.setHours(0, 0, 0, 0);\n    var dateParts = selectedTask.deadline.split('/');\n    var deadline = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    return today > deadline;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        'justifyContent': 'space-between',\n        'display': 'flex',\n        'alignItems': 'baseline'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TaskRequest, {\n        setSelectedTask: setSelectedTask,\n        tasks: tasks,\n        title: title,\n        setTitle: setTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          'color': getExceeded() ? 'red' : 'green'\n        },\n        children: selectedTask === '' ? null : selectedTask.deadline\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), title === 'Elegir tarea' ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n        onChange: () => {\n          setRefund(!refund);\n          input.money = -input.money;\n          input.quantity = -input.quantity;\n          input.threads = -input.threads;\n          input.weight = -input.weight;\n        },\n        label: \"Devoluci\\xF3n o correcci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n        onChange: () => setCompleted(!completed),\n        label: \"Tarea cerrada\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        id: \"taskTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Fecha\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cantidad entregada por el taller\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cantidad total de la tarea\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Peso entregado por el taller\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Peso total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Hilos devueltos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Hilos totales\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Dinero entregado\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Dinero a cuenta\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Dinero total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            style: {\n              'backgroundColor': 'green'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: selectedTask.exitDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: selectedTask.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: selectedTask.weight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: selectedTask.threads\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: '$' + selectedTask.price * selectedTask.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 29\n          }, this), getTable()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(Input, \"39YpXL5DgdKK1+SCN96qoW1e0Gc=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Admin/GitHub/VirtualNAU/client/src/WorkshopsAdm/deliverTask.js"],"names":["React","Component","useState","useEffect","ModalOpener","Request","TaskRequest","Form","image","moment","Axios","Table","FormControl","ModalPrototype","initialState","error","errors","showObsModal","task","name","quantity","money","weight","threads","price","faulty","completed","calification","observation","paid","workshopAccount","DeliverTaskButton","state","form","createRef","resetState","setState","updateError","index","aux","map","e","key","handleEnter","event","toLowerCase","current","indexOf","target","elements","focus","myForm","preventDefault","value","data","usedAccount","Number","post","id","then","response","put","date","Date","format","toFixed","completelyReturned","observations","print","alert","printContents","document","getElementById","innerHTML","originalContents","body","window","sendObs","console","log","render","label","func","show","Input","onChange","title","setTitle","tasks","setTasks","parts","setParts","input","setInput","selectedTask","setSelectedTask","refund","setRefund","setCompleted","account","setAccount","quantityBackUp","setQuantityBackUp","length","moneyPaid","part","delivered","isNaN","inputField","property","total","Math","abs","round","getTable","getExceeded","deadline","today","setHours","dateParts","split","exitDate"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Form from 'react-bootstrap/Form';\r\nimport image from './Images/DeliverTask.svg';\r\nimport moment from 'moment';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalPrototype } from '../modal';\r\n\r\nconst initialState = {\r\n    error: true,\r\n    errors: [true, true],\r\n    showObsModal: false,\r\n    task: '',\r\n    name: '',\r\n    quantity: '',\r\n    money: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: '',\r\n    faulty: '',\r\n    completed: false,\r\n    calification: '',\r\n    observation: '',\r\n    paid: false,\r\n    workshopAccount: ''\r\n}\r\n\r\nexport class DeliverTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) =>\r\n            aux = aux && (key === index) ? error : e\r\n        );\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n    };\r\n\r\n    myForm = () => {\r\n        return (\r\n            <Form id='toPrint' ref={this.form} onSubmit={e => e.preventDefault()}>\r\n                <Request toShow=\"workshopName\" handleEnter={this.handleEnter} onChange={(value, error) => {\r\n                    this.setState({ name: value });\r\n                    this.updateError(0, error);\r\n                }} />\r\n                <Input name={this.state.name} onChange={(data, price, faulty, task, completed, paid, workshopAccount, usedAccount) => {\r\n                    this.setState({\r\n                        task, quantity: data.quantity, money: Number(data.money) + Number(usedAccount), weight: data.weight,\r\n                        threads: data.threads, completed, price, faulty, paid, workshopAccount\r\n                    });\r\n                    this.updateError(1, false);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    post = () => {\r\n        let { completed, task, money, weight, name, quantity, price, threads, paid, workshopAccount } = this.state;\r\n        if (!completed)\r\n            this.resetState();\r\n        Axios.post('http://localhost:3307/getTasks', { id: task }).then((response) => {\r\n            Axios.put('http://localhost:3307/payWorkshop',\r\n                { name: response.data[0].name, money: money - quantity * price })\r\n        })\r\n        Axios.post('http://localhost:3307/newPart',\r\n            {\r\n                name, task, date: moment(new Date()).format('DD/MM/YYYY'), quantity, threads, paid,\r\n                weight: Number(weight).toFixed(1), money: Number(money).toFixed(1)\r\n            }).then(() => {\r\n                if (completed)\r\n                    this.setState({ showObsModal: true });\r\n            });\r\n        Axios.put('http://localhost:3307/setAccount', { money: workshopAccount, name })//Actualizar el dinero que posee a cuenta el taller\r\n    }\r\n\r\n    completelyReturned = () => {\r\n        Axios.put('http://localhost:3307/printObs',\r\n            {\r\n                id: this.state.task, observations: this.state.observation, calification: this.state.calification,\r\n                faulty: this.state.faulty\r\n            });\r\n    }\r\n\r\n    print = () => {\r\n        if (this.state.error) {\r\n            alert('Error. No se puede imprimir una boleta inválida.');\r\n            return;\r\n        }\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n    }\r\n\r\n    sendObs = () => {\r\n        console.log('hi');\r\n        this.completelyReturned();\r\n        console.log('hi');\r\n        this.resetState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ModalOpener buttonText=\"Recibir tarea\" children={this.myForm()} logo={image} className=\"title\"\r\n                    footer={{ label: 'Imprimir', func: this.print, show: !!document.getElementById(\"taskTable\") }}\r\n                    title=\"Ingreso de tarea\" post={this.post} error={this.state.error} />\r\n                {/*Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm*/}\r\n\r\n                <ModalPrototype title=\"Calificar\" show={this.state.showObsModal} post={this.sendObs} handleClose={() => console.log('hi')}>\r\n                    <>\r\n                        <Request toShow=\"observation\" onChange={(e) => this.setState({ observation: e.target.value })} />\r\n                        <Request toShow=\"calification\" onChange={(e) => this.setState({ calification: e.target.value })} />\r\n                    </>\r\n                </ModalPrototype>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Input = ({ onChange, name }) => {\r\n\r\n    const [title, setTitle] = useState('Elegir tarea'); //Título del selectBox. Primero va a ser 'Elegir tarea' pero luego va a mostrar la tarea elegida\r\n    const [tasks, setTasks] = useState([]);//Todas las tareas que no se le pagaron por completo al taller\r\n    const [parts, setParts] = useState([]);//Todas las entregas parciales de la tarea elegida\r\n    const [input, setInput] = useState({ quantity: 0, weight: 0, money: 0, threads: 0 });//Lo ingresado por el usuario en la tabla\r\n    const [selectedTask, setSelectedTask] = useState('');//La tarea elegida\r\n    const [refund, setRefund] = useState(false);//¿Está cargando una devolución?\r\n    const [completed, setCompleted] = useState(false);//¿El taller entregó el total de la mercadería?\r\n    //const [actualAccount, setActualAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [account, setAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [quantityBackUp, setQuantityBackUp] = useState('');//Una variable auxiliar para recordar la cantidad, de esta forma podremos saber cuándo cambia\r\n\r\n    useEffect(() => {\r\n        if (name === '')\r\n            return;\r\n        Axios.post('http://localhost:3307/getUnpaidTasks', { name }).then((response) => {\r\n            if (response.data.length === 0)\r\n                return;\r\n            setTasks(response.data);\r\n        });\r\n        console.log('update tasks');\r\n    }, [name]);\r\n\r\n    useEffect(() => {//Cuando selectedTask cambia...\r\n        setInput({ quantity: 0, weight: 0, money: 0, threads: 0 });//Resetear los valores de Input (porque el usuario no ingresó nada)\r\n        let moneyPaid = input.money;\r\n        Axios.post('http://localhost:3307/getParts', { task: selectedTask.id }).then(response => {\r\n            setParts(response.data)//Recuperar partes desde la BD y asignarselas a parts\r\n            response.data.map(part => moneyPaid += part.money);//Sumar a moneyPaid todo lo pagado en cada parte\r\n            if (name)//Si se sabe el nombre del taller...\r\n                Axios.post('http://localhost:3307/getAccount', { name }).then(response => {//Recuperar de la BD la cuenta corriente del taller\r\n                    setAccount(response.data[0].money);\r\n                });\r\n        });\r\n    }, [selectedTask]);\r\n\r\n    useEffect(() => {\r\n        let delivered = input.quantity;\r\n        let moneyPaid = isNaN(input.money) ? 0 : input.money;\r\n        parts.map(part => moneyPaid = Number(moneyPaid) + Number(part.money));//Sumar a moneyPaid todo lo pagado en cada parte\r\n        parts.map(part => delivered += part.quantity);//Sumar a delivered todas las cantidades entregadas en cada parte\r\n        if (quantityBackUp !== input.quantity) {//Si se modificó la cantidad\r\n            input.money = input.quantity * selectedTask.price - account;//Le recomienda al usuario pagar todo lo que debe pagar (lo entregado en esta parte * el precio acordado - la cuenta corriente de esta parte)\r\n            input.money = input.money < 0 ? 0 : input.money;//No se le puede recomendar pagar un número negativo\r\n            setQuantityBackUp(input.quantity);//Volver a actualizar la cantidad\r\n        }\r\n        onChange(input, selectedTask.price, selectedTask.quantity - delivered, selectedTask.id,//Se envían los cambios\r\n            delivered === selectedTask.quantity || completed, selectedTask.quantity * selectedTask.price <= moneyPaid, input.quantity * selectedTask.price - moneyPaid - account, account);//TODO: Revisar fórmula para leftover (workshopAccount)\r\n        //onChange(data, price, faulty, task, completed, paid, workshopAccount, usedAccount)//objeto con todo lo ingresado, precio, artículos fallados, id de tarea, si se entregaron todos los artículos, si se pagó la totalidad de la tarea, lo que le quedará de cuenta corriente al taller luego de la parte y la cantidad de dinero utilizado de la cuenta corriente\r\n    }, [input, completed, refund]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const inputField = (property, total) => {//Función que devuelve un inputbox para ingresar datos al objeto input. propery\r\n        //property es la propiedad de input que se quiere modificar con el inputbox y total es el objeto que contiene todos los totales\r\n        return (\r\n            <FormControl value={input[property]}//Asignar al inputbox la variable input[property], es decir que cada vez que el inputbox se modifica, la variable también y vice versa\r\n                onChange={(e) => {//Cuando cambia el inputbox...\r\n                    let value = e.target.value;\r\n                    if (isNaN(value) || (total[property] < value && property !== 'money'))//Si el valor es inválido...\r\n                        return;//Cancelar\r\n                    let aux = { ...input };\r\n                    aux[property] = (value[value.length - 1] === '.') ? value : Number(value);\r\n                    aux[property] = (refund) ?//Si se está haciendo una devolución de mercadería o se contó mal la mercadería en una parte anterior\r\n                        -Math.abs(aux[property]) ://Poner en negativo lo ingresado (así se suma y no se resta al total)\r\n                        (aux[property] < 0) ? 0 : aux[property];//Si la propiedad es negativa, convertir en 0\r\n                    if (property === 'quantity' || property === 'threads')//Si la propiedad es cantidad o hilos...\r\n                        aux[property] = Math.round(aux[property]);//No puede ser decimal\r\n                    setInput({ ...aux });\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const getTable = () => {\r\n\r\n        let total = {\r\n            quantity: selectedTask.quantity,\r\n            weight: selectedTask.weight,\r\n            money: selectedTask.quantity * selectedTask.price,\r\n            threads: selectedTask.threads\r\n        };\r\n        return (\r\n            <>\r\n                {parts.map((part, index) => {\r\n                    total = {\r\n                        quantity: total.quantity - part.quantity,\r\n                        weight: total.weight - part.weight,\r\n                        money: total.money - part.money,\r\n                        threads: total.threads - part.threads,\r\n                    };\r\n                    return (\r\n                        <tr key={index}>{/*Muestra el medio*/}\r\n                            <td>{part.date}</td>\r\n                            <td>{part.quantity}</td>\r\n                            <td>{total.quantity}</td>\r\n                            <td>{Number(part.weight).toFixed(1)}</td>\r\n                            <td>{Number(total.weight).toFixed(1)}</td>\r\n                            <td>{part.threads}</td>\r\n                            <td>{total.threads}</td>\r\n                            <td>{'$' + Number(part.money).toFixed(1)}</td>\r\n                            <td>{ }</td>\r\n                            <td>{'$' + Number(total.money).toFixed(1)}</td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                <tr>{/*Muestra la última fila*/}\r\n                    <td>{moment(new Date()).format('DD/MM/YYYY')}</td>\r\n                    <td>{inputField('quantity', total)}</td>\r\n                    <td>{total.quantity - input.quantity}</td>\r\n                    <td>{inputField('weight', total)}</td>\r\n                    <td>{(total.weight - input.weight).toFixed(1)}</td>\r\n                    <td>{inputField('threads', total)}</td>\r\n                    <td>{total.threads - input.threads}</td>\r\n                    <td>{inputField('money', total)}</td>\r\n                    <td>{'$' + account}</td>\r\n                    <td>{'$' + (total.money - input.money - account).toFixed(1)}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getExceeded = () => {//Devuelve true si se excedió la fecha de entrega\r\n        if (!selectedTask.deadline)\r\n            return;\r\n        let today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        var dateParts = selectedTask.deadline.split('/');\r\n        var deadline = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        return today > deadline;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ 'justifyContent': 'space-between', 'display': 'flex', 'alignItems': 'baseline' }}>\r\n                <TaskRequest setSelectedTask={setSelectedTask} tasks={tasks} title={title} setTitle={setTitle} />\r\n                <h4 style={{ 'color': getExceeded() ? 'red' : 'green' }}>\r\n                    {(selectedTask === '') ? null : selectedTask.deadline}\r\n                </h4>\r\n            </div>\r\n            {title === 'Elegir tarea' ? <></> :\r\n                <>\r\n                    <Form.Check onChange={() => {\r\n                        setRefund(!refund);\r\n                        input.money = -input.money;\r\n                        input.quantity = -input.quantity;\r\n                        input.threads = -input.threads;\r\n                        input.weight = -input.weight;\r\n                    }} label=\"Devolución o corrección\" />\r\n                    <Form.Check onChange={() => setCompleted(!completed)} label=\"Tarea cerrada\" />\r\n                    <Table striped bordered id=\"taskTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Fecha</th>\r\n                                <th>Cantidad entregada por el taller</th>\r\n                                <th>Cantidad total de la tarea</th>\r\n                                <th>Peso entregado por el taller</th>\r\n                                <th>Peso total</th>\r\n                                <th>Hilos devueltos</th>\r\n                                <th>Hilos totales</th>\r\n                                <th>Dinero entregado</th>\r\n                                <th>Dinero a cuenta</th>\r\n                                <th>Dinero total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                                <td>{selectedTask.exitDate}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.quantity}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.weight}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.threads}</td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td>{'$' + selectedTask.price * selectedTask.quantity}</td>\r\n                            </tr>\r\n                            {getTable()}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}