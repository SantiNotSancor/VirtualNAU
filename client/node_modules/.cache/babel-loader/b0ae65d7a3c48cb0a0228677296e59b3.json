{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lab2\\\\Documents\\\\GitHub\\\\VirtualNAU\\\\client\\\\src\\\\modal.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport './modal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ModalController extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      showModal: false //True si y sólo si se debe mostrar el modal\n\n    };\n\n    this.showModal = () => {\n      //A llamar cuando se quiere mostrar el modal\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      //A llamar cuando se quiere esconder el modal\n      this.setState({\n        showModal: false\n      });\n    };\n  }\n\n}\nexport class ModalPrototype extends Component {\n  //Debe ser invocada para crear el modal. Ver props \n  render() {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: this.props.show,\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: this.props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [this.props.footer && this.props.footer.show ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          onClick: () => {\n            this.props.post();\n            this.props.footer.func();\n          },\n          children: this.props.footer.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          onClick: () => {\n            this.props.post(); //Se cierra desde post si todo está en orden\n          },\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secundary\",\n          onClick: this.props.handleClose,\n          children: \"Cerrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nModalPrototype.propTypes = {\n  post: PropTypes.func.isRequired,\n  //Función que enviará al back-end los datos del form\n  title: PropTypes.string.isRequired,\n  //String que se mostrará como título del modal\n  show: PropTypes.bool.isRequired,\n  //Boolean que especifica si se debe o no mostrar el modal\n  handleClose: PropTypes.func.isRequired,\n  //Función que cerrará el modal al presionar el botón\n  children: PropTypes.element.isRequired,\n  //Hijo que aparecerá en el modal\n  footer: PropTypes.object\n};","map":{"version":3,"sources":["C:/Users/Lab2/Documents/GitHub/VirtualNAU/client/src/modal.js"],"names":["React","Component","PropTypes","Modal","Button","ModalController","state","showModal","setState","hideModal","ModalPrototype","render","props","show","title","children","footer","post","func","label","handleClose","propTypes","isRequired","string","bool","element","object"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,aAAP;;;AAEA,OAAO,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAE3CK,KAF2C,GAEnC;AACJC,MAAAA,SAAS,EAAE,KADP,CACY;;AADZ,KAFmC;;AAAA,SAM3CA,SAN2C,GAM/B,MAAM;AAAC;AACf,WAAKC,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAR0C;;AAAA,SAU3CE,SAV2C,GAU/B,MAAM;AAAC;AACf,WAAKD,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAZ0C;AAAA;;AAAA;AAgB/C,OAAO,MAAMG,cAAN,SAA6BT,SAA7B,CAAuC;AAAC;AAE3CU,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,IAAxB;AAA8B,MAAA,SAAS,EAAC,OAAxC;AAAA,8BACI,QAAC,KAAD,CAAO,MAAP;AAAA,+BACI,QAAC,KAAD,CAAO,KAAP;AAAA,oBAAc,KAAKD,KAAL,CAAWE;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,KAAD,CAAO,IAAP;AAAA,kBACK,KAAKF,KAAL,CAAWG;AADhB;AAAA;AAAA;AAAA;AAAA,cALJ,eASI,QAAC,KAAD,CAAO,MAAP;AAAA,mBACM,KAAKH,KAAL,CAAWI,MAAX,IAAqB,KAAKJ,KAAL,CAAWI,MAAX,CAAkBH,IAAxC,gBACD,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,IAAI,EAAC,QAA/B;AAAwC,UAAA,OAAO,EAAE,MAAM;AACnD,iBAAKD,KAAL,CAAWK,IAAX;AACA,iBAAKL,KAAL,CAAWI,MAAX,CAAkBE,IAAlB;AACH,WAHD;AAAA,oBAGI,KAAKN,KAAL,CAAWI,MAAX,CAAkBG;AAHtB;AAAA;AAAA;AAAA;AAAA,gBADC,gBAIuC,qCAL5C,eAMI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,IAAI,EAAC,QAA/B;AAAwC,UAAA,OAAO,EAAE,MAAM;AACnD,iBAAKP,KAAL,CAAWK,IAAX,GADmD,CACjC;AACrB,WAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eASI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAE,KAAKL,KAAL,CAAWQ,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuBH;;AA1ByC;AA6B9CV,cAAc,CAACW,SAAf,GAA2B;AACvBJ,EAAAA,IAAI,EAAEf,SAAS,CAACgB,IAAV,CAAeI,UADE;AACS;AAChCR,EAAAA,KAAK,EAAEZ,SAAS,CAACqB,MAAV,CAAiBD,UAFD;AAEY;AACnCT,EAAAA,IAAI,EAAEX,SAAS,CAACsB,IAAV,CAAeF,UAHE;AAGS;AAChCF,EAAAA,WAAW,EAAElB,SAAS,CAACgB,IAAV,CAAeI,UAJL;AAIgB;AACvCP,EAAAA,QAAQ,EAAEb,SAAS,CAACuB,OAAV,CAAkBH,UALL;AAKgB;AACvCN,EAAAA,MAAM,EAAEd,SAAS,CAACwB;AANK,CAA3B","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './modal.css'\r\n\r\nexport class ModalController extends Component {//Debe ser extendida por el elemento que va a abrir el modal\r\n\r\n    state = {\r\n        showModal: false//True si y sólo si se debe mostrar el modal\r\n    }\r\n\r\n    showModal = () => {//A llamar cuando se quiere mostrar el modal\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    hideModal = () => {//A llamar cuando se quiere esconder el modal\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n}\r\n\r\nexport class ModalPrototype extends Component {//Debe ser invocada para crear el modal. Ver props \r\n\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} className='modal'>\r\n                <Modal.Header>\r\n                    <Modal.Title>{this.props.title}</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    {this.props.children}\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    {(this.props.footer && this.props.footer.show)?\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={() => {\r\n                        this.props.post();\r\n                        this.props.footer.func();\r\n                    }}>{this.props.footer.label}</Button> : <></>}\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={() => {\r\n                        this.props.post();//Se cierra desde post si todo está en orden\r\n                    }}>Enviar</Button>\r\n                    <Button variant=\"secundary\" onClick={this.props.handleClose}>Cerrar</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nModalPrototype.propTypes = {\r\n    post: PropTypes.func.isRequired,//Función que enviará al back-end los datos del form\r\n    title: PropTypes.string.isRequired,//String que se mostrará como título del modal\r\n    show: PropTypes.bool.isRequired,//Boolean que especifica si se debe o no mostrar el modal\r\n    handleClose: PropTypes.func.isRequired,//Función que cerrará el modal al presionar el botón\r\n    children: PropTypes.element.isRequired,//Hijo que aparecerá en el modal\r\n    footer: PropTypes.object\r\n}"]},"metadata":{},"sourceType":"module"}