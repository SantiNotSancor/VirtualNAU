{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\GitHub\\\\VirtualNAU\\\\client\\\\src\\\\Vendor\\\\addStock.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { ModalOpener } from '../modalOpener';\nimport { Request, TaskRequest } from '../textInputs';\nimport Axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment'; //import image from './Images/addStock.svg';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  responsable: '',\n  date: moment(new Date()).format(\"DD/MM/YYYY\"),\n  materials: [{\n    id: '',\n    quantity: ''\n  }],\n  //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\n  materialsData: [] //Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\n\n};\nexport class AddStock extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    //TODO: Debe darle valor a materialData, que será una lista de objetos con id, nombre, descripción, peso por unidad y metro por unidad. De no poseer alguno de los últimos dos datos, debe mostrar 0\n    let aux = [{\n      id: 15,\n      name: 'Cierre',\n      description: 'Marca SanCor',\n      weight: 0.5,\n      meters: 0\n    }, {\n      id: 4,\n      name: 'Pasador',\n      description: 'Amarillo',\n      weight: 3,\n      meters: 1\n    }, {\n      id: 6,\n      name: 'Cable',\n      description: 'De cobre',\n      weight: 0.5,\n      meters: 1.5\n    }];\n    this.setState({\n      materialsData: aux\n    });\n  }\n\n  addMaterial(material) {\n    console.log('addMaterial');\n    let aux = this.state.materials;\n    aux[aux.length - 1] = material;\n    this.setState({\n      materials: [...this.state.materials, {\n        id: '',\n        quantity: ''\n      }]\n    }); //Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\n  }\n\n  removeMaterial(i) {\n    console.log('removeMaterial');\n    let materials = this.state.materials;\n    console.log(materials[i]);\n    materials.splice(i, 1);\n    console.log(materials[i]);\n    this.setState({\n      materials\n    });\n  }\n\n  changeMaterial(i, material) {\n    console.log('changeMaterial');\n    let materials = this.state.materials;\n    materials[i] = material;\n    this.setState({\n      materials\n    });\n  }\n\n  post() {\n    //TODO: Se debe enviar materials (exceptuando el último elemento, que está vacío) a la base de datos\n    //let materials = this.state.materials;\n    console.log(this.state); // materials.pop();\n    // console.log(materials);\n  }\n\n  myForm() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(Request, {\n        toShow: \"responsable\",\n        onChange: event => {\n          this.setState({\n            responsable: event.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        id: \"taskTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nombre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Descripci\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cantidad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Peso\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Metros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: !this.state.materials ? null : this.state.materials.map((material, index) =>\n          /*#__PURE__*/\n          //Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\n          //ya ingresada (en caso de una modificación), reemplazarle.\n          _jsxDEV(Row, {\n            material: material,\n            index: index,\n            remove: i => this.removeMaterial(i),\n            materialsData: this.state.materialsData,\n            isLast: this.state.materials.length === index + 1,\n            onChange: this.state.materials.length !== index + 1 ? (e, property) => this.changeMaterial(index, e, property) : (value, property) => this.addMaterial(value, property)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ModalOpener, {\n      buttonText: \"A\\xF1adir stock\",\n      handleClose: this.resetState,\n      className: 'title'\n      /*logo={image}*/\n      ,\n      title: 'Añadir stock',\n      post: this.post,\n      children: this.myForm()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const Row = _ref => {\n  _s();\n\n  let {\n    material,\n    index,\n    onChange,\n    remove,\n    isLast,\n    materialsData\n  } = _ref;\n  const [used, setUsed] = useState(false); //Verdadero si ya se inicializó\n\n  const [input, setInput] = useState({\n    id: material.id,\n    name: '',\n    description: '',\n    quantity: material.quantity,\n    weight: '',\n    meters: ''\n  });\n  useEffect(() => {\n    console.log('hi');\n    if (!used) setUsed(true); //Evita que se use al inicializar el objeto, esquivando un bucle infinito que agregue materiales\n    else onChange(input);\n  }, [input]);\n\n  const myFun = () => {\n    setInput({\n      id: '',\n      name: '',\n      description: '',\n      quantity: '',\n      weight: '',\n      meters: ''\n    });\n    remove.bind(this, index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.id //ID\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.id = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.name //Nombre\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.name = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.description //Descripción\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.description = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.quantity //Cantidad\n        ,\n        onChange: e => {\n          if (isNaN(e.target.value) || e.target.value < 0) return;\n          let aux = { ...input\n          };\n          aux.quantity = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.weight //Peso\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.weight = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.meters //Metros\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.meters = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), !isLast ? /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => remove(index),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Row, \"Vm182KbKrcH9mWDE90fvDbOAZ2I=\");\n\n_c = Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/Admin/GitHub/VirtualNAU/client/src/Vendor/addStock.js"],"names":["React","Component","useEffect","useState","ModalOpener","Request","TaskRequest","Axios","Form","FormControl","Button","Table","moment","initialState","responsable","date","Date","format","materials","id","quantity","materialsData","AddStock","state","componentDidMount","aux","name","description","weight","meters","setState","addMaterial","material","console","log","length","removeMaterial","i","splice","changeMaterial","post","myForm","e","preventDefault","event","target","value","map","index","property","render","resetState","Row","onChange","remove","isLast","used","setUsed","input","setInput","myFun","bind","isNaN"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,eAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,EADI;AAEjBC,EAAAA,IAAI,EAAEH,MAAM,CAAC,IAAII,IAAJ,EAAD,CAAN,CAAmBC,MAAnB,CAA0B,YAA1B,CAFW;AAGjBC,EAAAA,SAAS,EAAE,CAAC;AAACC,IAAAA,EAAE,EAAE,EAAL;AAASC,IAAAA,QAAQ,EAAE;AAAnB,GAAD,CAHM;AAGmB;AACpCC,EAAAA,aAAa,EAAE,EAJE,CAIA;;AAJA,CAArB;AAOA,OAAO,MAAMC,QAAN,SAAuBrB,SAAvB,CAAiC;AAAA;AAAA;AAAA,SACpCsB,KADoC,GAC5BV,YAD4B;AAAA;;AAGpCW,EAAAA,iBAAiB,GAAG;AAChB;AACA,QAAIC,GAAG,GAAG,CAAC;AAACN,MAAAA,EAAE,EAAE,EAAL;AAASO,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,WAAW,EAAE,cAAtC;AAAsDC,MAAAA,MAAM,EAAE,GAA9D;AAAmEC,MAAAA,MAAM,EAAE;AAA3E,KAAD,EACF;AAACV,MAAAA,EAAE,EAAE,CAAL;AAAQO,MAAAA,IAAI,EAAE,SAAd;AAAyBC,MAAAA,WAAW,EAAE,UAAtC;AAAkDC,MAAAA,MAAM,EAAE,CAA1D;AAA6DC,MAAAA,MAAM,EAAE;AAArE,KADE,EAEF;AAACV,MAAAA,EAAE,EAAE,CAAL;AAAQO,MAAAA,IAAI,EAAE,OAAd;AAAuBC,MAAAA,WAAW,EAAE,UAApC;AAAgDC,MAAAA,MAAM,EAAE,GAAxD;AAA6DC,MAAAA,MAAM,EAAE;AAArE,KAFE,CAAV;AAGA,SAAKC,QAAL,CAAc;AAAET,MAAAA,aAAa,EAAEI;AAAjB,KAAd;AACH;;AAEDM,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAIT,GAAG,GAAG,KAAKF,KAAL,CAAWL,SAArB;AACAO,IAAAA,GAAG,CAACA,GAAG,CAACU,MAAJ,GAAa,CAAd,CAAH,GAAsBH,QAAtB;AACA,SAAKF,QAAL,CAAc;AAACZ,MAAAA,SAAS,EAAE,CAAC,GAAG,KAAKK,KAAL,CAAWL,SAAf,EAA0B;AAACC,QAAAA,EAAE,EAAE,EAAL;AAASC,QAAAA,QAAQ,EAAE;AAAnB,OAA1B;AAAZ,KAAd,EAJkB,CAI2D;AAChF;;AAEDgB,EAAAA,cAAc,CAACC,CAAD,EAAI;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAIhB,SAAS,GAAG,KAAKK,KAAL,CAAWL,SAA3B;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAS,CAACmB,CAAD,CAArB;AACAnB,IAAAA,SAAS,CAACoB,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYhB,SAAS,CAACmB,CAAD,CAArB;AACA,SAAKP,QAAL,CAAc;AAAEZ,MAAAA;AAAF,KAAd;AACH;;AAEDqB,EAAAA,cAAc,CAACF,CAAD,EAAIL,QAAJ,EAAc;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEA,QAAIhB,SAAS,GAAG,KAAKK,KAAL,CAAWL,SAA3B;AACAA,IAAAA,SAAS,CAACmB,CAAD,CAAT,GAAeL,QAAf;AACA,SAAKF,QAAL,CAAc;AAAEZ,MAAAA;AAAF,KAAd;AACH;;AAEDsB,EAAAA,IAAI,GAAG;AAAC;AACJ;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAjB,EAFG,CAGH;AACA;AACH;;AAEDkB,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEC,CAAC,IAAIA,CAAC,CAACC,cAAF,EAArB;AAAA,8BAEI,QAAC,OAAD;AAAS,QAAA,MAAM,EAAC,aAAhB;AAA8B,QAAA,QAAQ,EAAGC,KAAD,IAAW;AAC/C,eAAKd,QAAL,CAAc;AAAEhB,YAAAA,WAAW,EAAE8B,KAAK,CAACC,MAAN,CAAaC;AAA5B,WAAd;AACH;AAFD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI,QAAC,KAAD;AAAO,QAAA,OAAO,MAAd;AAAe,QAAA,QAAQ,MAAvB;AAAwB,QAAA,EAAE,EAAC,WAA3B;AAAA,gCACI;AAAA,iCACI;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,eAOI;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAYI;AAAA,oBACK,CAAC,KAAKvB,KAAL,CAAWL,SAAZ,GAAuB,IAAvB,GACD,KAAKK,KAAL,CAAWL,SAAX,CAAqB6B,GAArB,CAAyB,CAACf,QAAD,EAAWgB,KAAX;AAAA;AACjD;AACA;AACwB,kBAAC,GAAD;AAAK,YAAA,QAAQ,EAAEhB,QAAf;AAAqC,YAAA,KAAK,EAAEgB,KAA5C;AAAmD,YAAA,MAAM,EAAEX,CAAC,IAAI,KAAKD,cAAL,CAAoBC,CAApB,CAAhE;AAAwF,YAAA,aAAa,EAAE,KAAKd,KAAL,CAAWF,aAAlH;AACI,YAAA,MAAM,EAAE,KAAKE,KAAL,CAAWL,SAAX,CAAqBiB,MAArB,KAAgCa,KAAK,GAAG,CADpD;AACuD,YAAA,QAAQ,EAAG,KAAKzB,KAAL,CAAWL,SAAX,CAAqBiB,MAArB,KAAgCa,KAAK,GAAG,CAAzC,GACzD,CAACN,CAAD,EAAIO,QAAJ,KAAiB,KAAKV,cAAL,CAAoBS,KAApB,EAA2BN,CAA3B,EAA8BO,QAA9B,CADwC,GAEzD,CAACH,KAAD,EAAQG,QAAR,KAAqB,KAAKlB,WAAL,CAAiBe,KAAjB,EAAwBG,QAAxB;AAH7B,aAA8BD,KAA9B;AAAA;AAAA;AAAA;AAAA,kBAHA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAgCH;;AAEDE,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,WAAD;AAAa,MAAA,UAAU,EAAC,iBAAxB;AAAuC,MAAA,WAAW,EAAE,KAAKC,UAAzD;AACI,MAAA,SAAS,EAAE;AAAS;AADxB;AACyC,MAAA,KAAK,EAAE,cADhD;AACgE,MAAA,IAAI,EAAE,KAAKX,IAD3E;AACiF,MAAA,QAAQ,EAAE,KAAKC,MAAL;AAD3F;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH;;AAlFmC;AAqFxC,OAAO,MAAMW,GAAG,GAAG,QAAkE;AAAA;;AAAA,MAAjE;AAAEpB,IAAAA,QAAF;AAAYgB,IAAAA,KAAZ;AAAmBK,IAAAA,QAAnB;AAA6BC,IAAAA,MAA7B;AAAqCC,IAAAA,MAArC;AAA6ClC,IAAAA;AAA7C,GAAiE;AAEjF,QAAM,CAACmC,IAAD,EAAOC,OAAP,IAAkBtD,QAAQ,CAAC,KAAD,CAAhC,CAFiF,CAEzC;;AACxC,QAAM,CAACuD,KAAD,EAAQC,QAAR,IAAoBxD,QAAQ,CAAC;AAAEgB,IAAAA,EAAE,EAAEa,QAAQ,CAACb,EAAf;AAAmBO,IAAAA,IAAI,EAAE,EAAzB;AAA6BC,IAAAA,WAAW,EAAE,EAA1C;AAA8CP,IAAAA,QAAQ,EAAEY,QAAQ,CAACZ,QAAjE;AAA2EQ,IAAAA,MAAM,EAAE,EAAnF;AAAuFC,IAAAA,MAAM,EAAE;AAA/F,GAAD,CAAlC;AAEA3B,EAAAA,SAAS,CAAC,MAAM;AACZ+B,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,QAAG,CAACsB,IAAJ,EACIC,OAAO,CAAC,IAAD,CAAP,CADJ,CACkB;AADlB,SAGIJ,QAAQ,CAACK,KAAD,CAAR;AACP,GANQ,EAMN,CAACA,KAAD,CANM,CAAT;;AAQA,QAAME,KAAK,GAAG,MAAM;AAChBD,IAAAA,QAAQ,CAAC;AAAExC,MAAAA,EAAE,EAAE,EAAN;AAAUO,MAAAA,IAAI,EAAE,EAAhB;AAAoBC,MAAAA,WAAW,EAAE,EAAjC;AAAqCP,MAAAA,QAAQ,EAAE,EAA/C;AAAmDQ,MAAAA,MAAM,EAAE,EAA3D;AAA+DC,MAAAA,MAAM,EAAE;AAAvE,KAAD,CAAR;AACAyB,IAAAA,MAAM,CAACO,IAAP,CAAY,IAAZ,EAAkBb,KAAlB;AACH,GAHD;;AAKA,sBACI;AAAA,4BAEI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEU,KAAK,CAACvC,EAA1B,CAA6B;AAA7B;AACA,QAAA,QAAQ,EAAGuB,CAAD,IAAO;AACb,cAAIjB,GAAG,GAAG,EAAE,GAAGiC;AAAL,WAAV;AACAjC,UAAAA,GAAG,CAACN,EAAJ,GAASuB,CAAC,CAACG,MAAF,CAASC,KAAlB;AACAa,UAAAA,QAAQ,CAAC,EAAE,GAAGlC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eASI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEiC,KAAK,CAAChC,IAA1B,CAA+B;AAA/B;AACA,QAAA,QAAQ,EAAGgB,CAAD,IAAO;AACb,cAAIjB,GAAG,GAAG,EAAE,GAAGiC;AAAL,WAAV;AACAjC,UAAAA,GAAG,CAACC,IAAJ,GAAWgB,CAAC,CAACG,MAAF,CAASC,KAApB;AACAa,UAAAA,QAAQ,CAAC,EAAE,GAAGlC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YATJ,eAgBI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEiC,KAAK,CAAC/B,WAA1B,CAAsC;AAAtC;AACA,QAAA,QAAQ,EAAGe,CAAD,IAAO;AACb,cAAIjB,GAAG,GAAG,EAAE,GAAGiC;AAAL,WAAV;AACAjC,UAAAA,GAAG,CAACE,WAAJ,GAAkBe,CAAC,CAACG,MAAF,CAASC,KAA3B;AACAa,UAAAA,QAAQ,CAAC,EAAE,GAAGlC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAuBI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEiC,KAAK,CAACtC,QAA1B,CAAmC;AAAnC;AACA,QAAA,QAAQ,EAAGsB,CAAD,IAAO;AACb,cAAIoB,KAAK,CAACpB,CAAC,CAACG,MAAF,CAASC,KAAV,CAAL,IAAyBJ,CAAC,CAACG,MAAF,CAASC,KAAT,GAAiB,CAA9C,EACI;AACJ,cAAIrB,GAAG,GAAG,EAAE,GAAGiC;AAAL,WAAV;AACAjC,UAAAA,GAAG,CAACL,QAAJ,GAAesB,CAAC,CAACG,MAAF,CAASC,KAAxB;AACAa,UAAAA,QAAQ,CAAC,EAAE,GAAGlC;AAAL,WAAD,CAAR;AACH;AAPD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAvBJ,eAgCI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEiC,KAAK,CAAC9B,MAA1B,CAAiC;AAAjC;AACA,QAAA,QAAQ,EAAGc,CAAD,IAAO;AACb,cAAIjB,GAAG,GAAG,EAAE,GAAGiC;AAAL,WAAV;AACAjC,UAAAA,GAAG,CAACG,MAAJ,GAAac,CAAC,CAACG,MAAF,CAASC,KAAtB;AACAa,UAAAA,QAAQ,CAAC,EAAE,GAAGlC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAhCJ,eAuCI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEiC,KAAK,CAAC7B,MAA1B,CAAiC;AAAjC;AACA,QAAA,QAAQ,EAAGa,CAAD,IAAO;AACb,cAAIjB,GAAG,GAAG,EAAE,GAAGiC;AAAL,WAAV;AACAjC,UAAAA,GAAG,CAACI,MAAJ,GAAaa,CAAC,CAACG,MAAF,CAASC,KAAtB;AACAa,UAAAA,QAAQ,CAAC,EAAE,GAAGlC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAvCJ,EA8CK,CAAC8B,MAAD,gBAAS;AAAA,6BAAI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAMD,MAAM,CAACN,KAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAT,gBAAqE,qCA9C1E;AAAA,KAASA,KAAT;AAAA;AAAA;AAAA;AAAA,UADJ;AAkDH,CApEM;;GAAMI,G;;KAAAA,G","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n//import image from './Images/addStock.svg';\r\n\r\nconst initialState = {\r\n    responsable: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [{id: '', quantity: ''}],//Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n    materialsData: []//Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    componentDidMount() {\r\n        //TODO: Debe darle valor a materialData, que será una lista de objetos con id, nombre, descripción, peso por unidad y metro por unidad. De no poseer alguno de los últimos dos datos, debe mostrar 0\r\n        let aux = [{id: 15, name: 'Cierre', description: 'Marca SanCor', weight: 0.5, meters: 0},\r\n                {id: 4, name: 'Pasador', description: 'Amarillo', weight: 3, meters: 1},\r\n                {id: 6, name: 'Cable', description: 'De cobre', weight: 0.5, meters: 1.5}]  \r\n        this.setState({ materialsData: aux });\r\n    }\r\n\r\n    addMaterial(material) {\r\n        console.log('addMaterial');\r\n        let aux = this.state.materials;\r\n        aux[aux.length - 1] = material;\r\n        this.setState({materials: [...this.state.materials, {id: '', quantity: ''}]})//Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        console.log('removeMaterial');\r\n        let materials = this.state.materials;\r\n        console.log(materials[i]);\r\n        materials.splice(i, 1);\r\n        console.log(materials[i]);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(i, material) {\r\n        console.log('changeMaterial');\r\n\r\n        let materials = this.state.materials;\r\n        materials[i] = material;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//TODO: Se debe enviar materials (exceptuando el último elemento, que está vacío) a la base de datos\r\n        //let materials = this.state.materials;\r\n        console.log(this.state);\r\n        // materials.pop();\r\n        // console.log(materials);\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsable\" onChange={(event) => {\r\n                    this.setState({ responsable: event.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Nombre</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.materials? null :\r\n                        this.state.materials.map((material, index) =>\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle.\r\n                        <Row material={material} key={index} index={index} remove={i => this.removeMaterial(i)} materialsData={this.state.materialsData}\r\n                            isLast={this.state.materials.length === index + 1} onChange={(this.state.materials.length !== index + 1)?\r\n                                (e, property) => this.changeMaterial(index, e, property) :\r\n                                (value, property) => this.addMaterial(value, property)} />\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                className={'title'} /*logo={image}*/ title={'Añadir stock'} post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ material, index, onChange, remove, isLast, materialsData }) => {\r\n\r\n    const [used, setUsed] = useState(false);//Verdadero si ya se inicializó\r\n    const [input, setInput] = useState({ id: material.id, name: '', description: '', quantity: material.quantity, weight: '', meters: '' });\r\n\r\n    useEffect(() => {\r\n        console.log('hi');\r\n        if(!used) \r\n            setUsed(true);//Evita que se use al inicializar el objeto, esquivando un bucle infinito que agregue materiales\r\n        else\r\n            onChange(input);\r\n    }, [input]);\r\n\r\n    const myFun = () => {\r\n        setInput({ id: '', name: '', description: '', quantity: '', weight: '', meters: '' });\r\n        remove.bind(this, index);\r\n    };\r\n\r\n    return (\r\n        <tr key={index}>{/*Muestra el primero*/}\r\n            \r\n            <td><FormControl value={input.id}//ID\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.id = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.name}//Nombre\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.name = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.description}//Descripción\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.description = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.quantity}//Cantidad\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.quantity = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.weight}//Peso\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.weight = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.meters}//Metros\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.meters = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            {!isLast? <td><Button onClick={() => remove(index)}>X</Button></td> : <></>}\r\n        </tr>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}