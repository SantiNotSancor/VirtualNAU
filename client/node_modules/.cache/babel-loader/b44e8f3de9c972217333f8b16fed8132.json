{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Escritorio\\\\fabrica\\\\client\\\\src\\\\textInputs.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect, Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Axios from 'axios';\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport { ModalArt, ModalWork } from './Menu/RegistrationDrop/modals';\nimport './autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Request = _ref => {\n  _s();\n\n  let {\n    onChange,\n    toShow,\n    label,\n    value,\n    handleEnter\n  } = _ref;\n  //Pedirá un dato con un input tipo text\n  const [error, setError] = useState(false);\n\n  let placeholder,\n      auxLabel = label,\n      checked = input => input !== '';\n\n  switch (toShow) {\n    case 'name':\n      label = 'Nombre del taller';\n      placeholder = 'Ingrese el nombre del/la tallerista';\n      break;\n\n    case 'article':\n      label = 'Número de artículo';\n      placeholder = 'Ingrese el código único del artículo';\n      break;\n\n    case 'quantityArticle':\n      label = 'Cantidad asignada';\n      placeholder = 'Ingrese la cantidad de artículos';\n\n      checked = input => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\n\n      break;\n\n    case 'money':\n      label = 'Monto';\n      placeholder = 'Ingrese el monto a pagar';\n\n      checked = input => !isNaN(input) && Number(input) > 0;\n\n      break;\n\n    case 'price':\n      label = 'Precio por unidad';\n      placeholder = 'Ingrese el precio por unidad';\n\n      checked = input => !isNaN(input) && Number(input) > 0;\n\n      break;\n\n    case 'description':\n      label = 'Descripción';\n      placeholder = 'Ingrese una breve descripción del artículo';\n      break;\n\n    case 'regName':\n      label = 'Nombre del taller';\n      placeholder = 'Ingrese el nombre del/la tallerista';\n\n      checked = async input => {\n        if (input === '') return false;\n        let response = await Axios.get('http://localhost:3001/getNames');\n        response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\n        return response;\n      };\n\n      break;\n\n    case 'regArticle':\n      label = 'Número de artículo';\n      placeholder = 'Ingrese el código del artículo';\n\n      checked = async input => {\n        if (input === '' || isNaN(input)) return false;\n        let response = await Axios.post('http://localhost:3001/getDescriptionWhere', {\n          id: input\n        });\n        return response.data.length === 0;\n      };\n\n      break;\n\n    case 'weight':\n      label = 'Peso de la tarea';\n      placeholder = 'Ingrese el peso entregado';\n\n      checked = input => !isNaN(input) && Number(input) > 0;\n\n      break;\n\n    case 'deadline':\n      label = 'Fecha esperada';\n      placeholder = 'Ingrese la fecha esperada (DD/MM/AAAA)';\n\n      checked = input => {\n        let error = false;\n        let aux = input.split('/');\n        aux.map(e => {\n          if (isNaN(e)) error = true;\n        });\n        return input.length === 10 && input[2] === '/' && input[5] === '/' && !error;\n      };\n\n      break;\n\n    case 'observation':\n      label = 'Observación/es';\n      placeholder = 'Ingrese observaciones sobre la tarea si las tiene';\n\n      checked = input => true;\n\n      break;\n\n    case 'calification':\n      label = 'Calificación';\n      placeholder = 'Ingrese la calificación del 1 al 10';\n\n      checked = input => !isNaN(input) && Number(input) > 0 && Number(input) <= 10 && Number(input) === Math.round(Number(input));\n\n      break;\n\n    case 'packages':\n      label = 'Bultos';\n      placeholder = 'Ingrese la cantidad de bultos';\n\n      checked = input => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\n\n      break;\n\n    case 'fabrics':\n      label = 'Telas';\n      placeholder = 'Ingrese las telas';\n\n      checked = input => true;\n\n      break;\n\n    case 'responsable':\n      label = 'Responsables';\n      placeholder = 'Ingrese las personas responsables';\n      break;\n\n    case 'generalFeatures':\n      label = 'Características generales';\n      placeholder = 'Ingrese las características generales';\n      break;\n\n    case 'colors':\n      label = 'Colores';\n      placeholder = 'Ingrese los colores';\n      break;\n\n    case 'threads':\n      label = 'Hilos';\n      placeholder = 'Ingrese la cantidad de hilos';\n      break;\n\n    default:\n      console.error(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\n  }\n\n  label = auxLabel ? auxLabel : label;\n  placeholder += '…';\n  return toShow === 'name' ? /*#__PURE__*/_jsxDEV(NameRequest, {\n    handleEnter: handleEnter,\n    placeholder: placeholder,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 31\n  }, this) : toShow === 'article' ? /*#__PURE__*/_jsxDEV(ArticleRequest, {\n    handleEnter: handleEnter,\n    placeholder: placeholder,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 39\n  }, this) : /*#__PURE__*/_jsxDEV(Form.Group, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [toShow === 'money' || toShow === 'price' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \"$\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 71\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(FormControl, {\n        type: \"text\",\n        placeholder: placeholder,\n        value: value,\n        onKeyDown: handleEnter,\n        onChange: e => {\n          let res;\n\n          if (checked[Symbol.toStringTag] !== 'AsyncFunction') {\n            res = checked(e.target.value);\n            setError(!res); //if(res || value)\n\n            onChange(e, error);\n          } else checked(e.target.value).then(result => {\n            setError(!result); //if(result)\n\n            onChange(e, error);\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }, this), toShow === 'weight' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \"kg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 50\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"em\", {\n      children: \"El valor ingresado no es v\\xE1lido\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 30\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 17\n  }, this);\n};\n\n_s(Request, \"AvrsuJm02Cqlq6/LWpvA21zDecQ=\");\n\n_c = Request;\nRequest.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  //Función a ejecutar cuando se modifica el input\n  toShow: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  defValue: PropTypes.string,\n  handleEnter: PropTypes.func\n};\n\nconst ArticleRequest = _ref2 => {\n  _s2();\n\n  let {\n    placeholder,\n    onChange,\n    handleEnter\n  } = _ref2;\n  const [articles, setArticles] = useState([]);\n\n  const getList = () => {\n    Axios.get('http://localhost:3001/getArticles').then(response => {\n      setArticles(response.data.map(article => article.id + ': ' + article.description));\n    });\n  };\n\n  const myOnChange = (event, error) => {\n    if (event.indexOf(':') > 0) event = event.substr(0, event.indexOf(':'));\n    onChange(event, error);\n  };\n\n  getList();\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    suggestions: articles,\n    onChange: myOnChange,\n    handleEnter: handleEnter,\n    placeholder: placeholder,\n    updateList: getList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(ArticleRequest, \"BuBV0+kzxflijlNZD5a4O15fq+8=\");\n\n_c2 = ArticleRequest;\nArticleRequest.propTypes = {\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nconst NameRequest = _ref3 => {\n  _s3();\n\n  let {\n    label,\n    placeholder,\n    onChange,\n    handleEnter\n  } = _ref3;\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const getList = () => {\n    Axios.get('http://localhost:3001/getNames').then(response => {\n      setList(response.data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      suggestions: list.map(element => {\n        return element.name;\n      }),\n      handleEnter: handleEnter,\n      onChange: onChange,\n      placeholder: placeholder,\n      updateList: getList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(NameRequest, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c3 = NameRequest;\nNameRequest.propTypes = ArticleRequest.propTypes;\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.myOnKeyDown = e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        if (this.state.showSuggestions) this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });else this.props.handleEnter();\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n        if (activeSuggestion === 0) {\n          return;\n        }\n\n        this.setState({\n          activeSuggestion: activeSuggestion - 1\n        });\n      } // User pressed the down arrow\n      else if (e.keyCode === 40) {\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\n          return;\n        }\n\n        this.setState({\n          activeSuggestion: activeSuggestion + 1\n        });\n      }\n    };\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput\n      });\n      this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\n    };\n\n    this.onClick = e => {\n      let userInput = e.currentTarget.innerText;\n      console.log('hi');\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput\n      });\n      this.props.onChange(userInput, this.props.suggestions.indexOf(userInput) < 0);\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n      showModal: false\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      myOnKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions\",\n          children: filteredSuggestions.map((suggestion, index) => {\n            let className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: suggestion\n            }, suggestion, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this);\n      } else {\n        //TODO: Puede ser que no exista el artículo (Dice taller)\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-suggestions\",\n          children: [/*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"El taller ingresado no existe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              this.setState({\n                showModal: true\n              });\n            },\n            children: \"Ingresar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this);\n      }\n    }\n\n    if (!this.state.showModal) return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        placeholder: this.props.placeholder,\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: myOnKeyDown,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 21\n      }, this), suggestionsListComponent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }, this);else return /*#__PURE__*/_jsxDEV(ModalWork, {\n      handleClose: () => {\n        this.setState({\n          showModal: false\n        });\n        this.props.updateList();\n      },\n      show: this.state.showModal,\n      registration: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array).isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  updateList: PropTypes.func.isRequired,\n  handleEnter: PropTypes.func\n};\nexport const TaskRequest = _ref4 => {\n  let {\n    setSelectedTask,\n    tasks,\n    title,\n    setTitle\n  } = _ref4;\n  if (!tasks) return null;\n  return /*#__PURE__*/_jsxDEV(DropdownButton, {\n    title: title,\n    onSelect: e => {\n      setTitle('T' + tasks[e].id + ': ' + tasks[e].article_id + ' (' + tasks[e].article_description + ') x' + tasks[e].quantity + (tasks[e].price ? ' a $' + tasks[e].price : ''));\n      setSelectedTask(tasks[e]);\n    },\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n      eventKey: index,\n      children: task.id + ': ' + task.article_id + ' (' + task.article_description + ') x' + task.quantity + (task.price ? ' a $' + task.price : '')\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 9\n  }, this);\n}; // const ArticleRequest = ({ label, placeholder, onChange }) => {\n//     const [id, setId] = useState('');\n//     const [description, setDescription] = useState('');\n//     const [error, setError] = useState(false);\n//     const [show, setShow] = useState(false);\n//     const getDescription = (userInput) => {\n//         Axios.post('http://localhost:3001/getDescriptionWhere', { id: userInput }).then((response) => {\n//             setError(response.data.length === 0);\n//             if (response.data.length !== 0)\n//                 setDescription(response.data[0].description);\n//             else\n//                 setDescription('');\n//         });\n//     }\n//     const autoComplete = () => {\n//         {/* TODO: Que muestre un autocomplete (como el de talleres) que recupere el art. por su desc.\n//             Puede ser literalmente el mismo, que cada una de las opciones sea con el formato: \"art: desc\"\n//             De esta forma, al buscar la desc, ya dice el artículo. Lo ideal searía que luego lo ingrese auto\n//             máticamente*/}\n//         return;\n//     };\n//     const popover = (\n//         <Popover>\n//             <Popover.Header as=\"h3\">Descripción de artículo</Popover.Header>\n//             <Popover.Body>\n//                 {error ?\n//                     <>\n//                         <em>No existe este código de artículo</em>\n//                         <Button onClick={() => {\n//                             setId('');\n//                             setShow(true);\n//                         }}>Registrarlo</Button>\n//                         <p>Buscarlo</p>\n//                         {autoComplete()}\n//                     </>\n//                     : description}\n//             </Popover.Body>\n//         </Popover>\n//     );\n//     if (!show)\n//         return (\n//             <Form.Group className=\"mb-3\">\n//                 <Form.Label>{label}</Form.Label>\n//                 <InputGroup>\n//                     <OverlayTrigger show={id !== ''} placement=\"right\" overlay={popover}>\n//                         <FormControl type=\"text\" placeholder={placeholder} onChange={(e) => {\n//                             onChange(e);\n//                             setId(e.target.value)\n//                             getDescription(e.target.value);\n//                         }} />\n//                     </OverlayTrigger>\n//                 </InputGroup>\n//             </Form.Group>);\n//     return (<ModalArt handleClose={() => setShow(false)} show={show} registration={true} />);\n// }\n\n_c4 = TaskRequest;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Request\");\n$RefreshReg$(_c2, \"ArticleRequest\");\n$RefreshReg$(_c3, \"NameRequest\");\n$RefreshReg$(_c4, \"TaskRequest\");","map":{"version":3,"sources":["C:/Users/PC/OneDrive/Escritorio/fabrica/client/src/textInputs.js"],"names":["React","useState","useEffect","Component","Fragment","PropTypes","Form","InputGroup","FormControl","Popover","OverlayTrigger","Axios","Button","Dropdown","DropdownButton","ModalArt","ModalWork","Request","onChange","toShow","label","value","handleEnter","error","setError","placeholder","auxLabel","checked","input","isNaN","Number","Math","round","response","get","data","find","e","name","toLowerCase","post","id","length","aux","split","map","console","res","Symbol","toStringTag","target","then","result","propTypes","func","isRequired","string","defValue","ArticleRequest","articles","setArticles","getList","article","description","myOnChange","event","indexOf","substr","NameRequest","list","setList","element","Autocomplete","constructor","props","myOnKeyDown","activeSuggestion","filteredSuggestions","state","keyCode","showSuggestions","setState","userInput","suggestions","currentTarget","filter","suggestion","onClick","innerText","log","showModal","render","suggestionsListComponent","index","className","updateList","instanceOf","Array","TaskRequest","setSelectedTask","tasks","title","setTitle","article_id","article_description","quantity","price","task"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport { ModalArt, ModalWork } from './Menu/RegistrationDrop/modals'\r\nimport './autocomplete.css';\r\n\r\nexport const Request = ({ onChange, toShow, label, value, handleEnter }) => {//Pedirá un dato con un input tipo text\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    let placeholder, auxLabel = label, checked = (input) => input !== '';\r\n\r\n    switch (toShow) {\r\n        case 'name':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'price':\r\n            label = 'Precio por unidad';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        case 'regName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3001/getNames');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        case 'regArticle':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código del artículo';\r\n            checked = async (input) => {\r\n                if (input === '' || isNaN(input))\r\n                    return false;\r\n                let response = await Axios.post('http://localhost:3001/getDescriptionWhere', { id: input });\r\n                return response.data.length === 0;\r\n            };\r\n            break;\r\n        case 'weight':\r\n            label = 'Peso de la tarea';\r\n            placeholder = 'Ingrese el peso entregado';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'deadline':\r\n            label = 'Fecha esperada';\r\n            placeholder = 'Ingrese la fecha esperada (DD/MM/AAAA)';\r\n            checked = (input) => {\r\n                let error = false;\r\n                let aux = input.split('/');\r\n                aux.map((e) => {\r\n                    if (isNaN(e))\r\n                        error = true;\r\n                })\r\n                return input.length === 10 && input[2] === '/' && input[5] === '/' && !error;\r\n            }\r\n            break;\r\n        case 'observation':\r\n            label = 'Observación/es';\r\n            placeholder = 'Ingrese observaciones sobre la tarea si las tiene';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'calification':\r\n            label = 'Calificación';\r\n            placeholder = 'Ingrese la calificación del 1 al 10';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) <= 10 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'packages':\r\n            label = 'Bultos';\r\n            placeholder = 'Ingrese la cantidad de bultos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'fabrics':\r\n            label = 'Telas';\r\n            placeholder = 'Ingrese las telas';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'responsable':\r\n            label = 'Responsables';\r\n            placeholder = 'Ingrese las personas responsables';\r\n            break;\r\n        case 'generalFeatures':\r\n            label = 'Características generales';\r\n            placeholder = 'Ingrese las características generales';\r\n            break;\r\n        case 'colors':\r\n            label = 'Colores';\r\n            placeholder = 'Ingrese los colores';\r\n            break;\r\n        case 'threads':\r\n            label = 'Hilos';\r\n            placeholder = 'Ingrese la cantidad de hilos';\r\n            break;\r\n        default:\r\n            console.error(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n\r\n    label = (auxLabel) ? auxLabel : label;\r\n    placeholder += '…';\r\n    return (\r\n        (toShow === 'name') ? <NameRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n            ((toShow === 'article') ? <ArticleRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n                <Form.Group>\r\n                    <Form.Label>{label}</Form.Label>\r\n                    <InputGroup>\r\n                        {(toShow === 'money' || toShow === 'price') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                        <FormControl type=\"text\" placeholder={placeholder} value={value} onKeyDown={handleEnter} onChange={(e) => {\r\n                            let res;\r\n                            if (checked[Symbol.toStringTag] !== 'AsyncFunction') {\r\n                                res = checked(e.target.value);\r\n                                setError(!res);\r\n                                //if(res || value)\r\n                                onChange(e, error);\r\n                            }\r\n                            else\r\n                                checked(e.target.value).then(result => {\r\n                                    setError(!result);\r\n                                    //if(result)\r\n                                    onChange(e, error);\r\n                                });\r\n                        }} />\r\n                        {(toShow === 'weight') ? <InputGroup.Text>kg</InputGroup.Text> : <></>}\r\n                    </InputGroup>\r\n                    {error ? <em>El valor ingresado no es válido</em> : <></>}\r\n                </Form.Group>)\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    defValue: PropTypes.string,\r\n    handleEnter: PropTypes.func\r\n}\r\n\r\nconst ArticleRequest = ({ placeholder, onChange, handleEnter }) => {\r\n    const [articles, setArticles] = useState([]);\r\n\r\n    const getList = () => {\r\n        Axios.get('http://localhost:3001/getArticles').then((response) => {\r\n            setArticles(response.data.map(article => article.id + ': ' + article.description));\r\n        })\r\n    }\r\n    const myOnChange = (event, error) => {\r\n        if (event.indexOf(':') > 0)\r\n            event = event.substr(0, event.indexOf(':'));\r\n        onChange(event, error);\r\n    }\r\n\r\n    getList();\r\n    return (\r\n        <Autocomplete suggestions={articles} onChange={myOnChange} handleEnter={handleEnter}\r\n            placeholder={placeholder} updateList={getList} />\r\n    );\r\n}\r\nArticleRequest.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nconst NameRequest = ({ label, placeholder, onChange, handleEnter }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getList();\r\n    }, []);\r\n    const getList = () => {\r\n        Axios.get('http://localhost:3001/getNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n    }\r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })} handleEnter={handleEnter}\r\n                onChange={onChange} placeholder={placeholder} updateList={getList} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = ArticleRequest.propTypes;\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        updateList: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n        // User pressed the enter key\r\n        if (e.keyCode === 13) {\r\n            if (this.state.showSuggestions)\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n            else\r\n                this.props.handleEnter();\r\n        }\r\n        // User pressed the up arrow\r\n        else if (e.keyCode === 38) {\r\n            if (activeSuggestion === 0) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        }\r\n        // User pressed the down arrow\r\n        else if (e.keyCode === 40) {\r\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n        }\r\n    };\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        console.log('hi');\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.props.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion) {\r\n                                className = \"suggestion-active\";\r\n                            }\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                //TODO: Puede ser que no exista el artículo (Dice taller)\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>El taller ingresado no existe</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        placeholder={this.props.placeholder}\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.props.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nexport const TaskRequest = ({ setSelectedTask, tasks, title, setTitle }) => {\r\n\r\n    if (!tasks)\r\n        return null;\r\n    return (\r\n        <DropdownButton title={title} onSelect={(e) => {\r\n            setTitle('T' + tasks[e].id + ': ' + tasks[e].article_id + ' (' + tasks[e].article_description + ') x' + tasks[e].quantity + (tasks[e].price ? ' a $' + tasks[e].price : ''));\r\n            setSelectedTask(tasks[e]);\r\n        }}>\r\n            {tasks.map((task, index) =>\r\n                <Dropdown.Item key={task.id} eventKey={index}>\r\n                    {task.id + ': ' + task.article_id + ' (' + task.article_description + ') x' + task.quantity + (task.price ? ' a $' + task.price : '')}\r\n                </Dropdown.Item>)\r\n            }\r\n        </DropdownButton>\r\n    );\r\n}\r\n\r\n// const ArticleRequest = ({ label, placeholder, onChange }) => {\r\n\r\n//     const [id, setId] = useState('');\r\n//     const [description, setDescription] = useState('');\r\n//     const [error, setError] = useState(false);\r\n//     const [show, setShow] = useState(false);\r\n\r\n//     const getDescription = (userInput) => {\r\n//         Axios.post('http://localhost:3001/getDescriptionWhere', { id: userInput }).then((response) => {\r\n//             setError(response.data.length === 0);\r\n//             if (response.data.length !== 0)\r\n//                 setDescription(response.data[0].description);\r\n//             else\r\n//                 setDescription('');\r\n//         });\r\n//     }\r\n\r\n//     const autoComplete = () => {\r\n//         {/* TODO: Que muestre un autocomplete (como el de talleres) que recupere el art. por su desc.\r\n//             Puede ser literalmente el mismo, que cada una de las opciones sea con el formato: \"art: desc\"\r\n//             De esta forma, al buscar la desc, ya dice el artículo. Lo ideal searía que luego lo ingrese auto\r\n//             máticamente*/}\r\n//         return;\r\n//     };\r\n\r\n//     const popover = (\r\n//         <Popover>\r\n//             <Popover.Header as=\"h3\">Descripción de artículo</Popover.Header>\r\n//             <Popover.Body>\r\n//                 {error ?\r\n//                     <>\r\n//                         <em>No existe este código de artículo</em>\r\n//                         <Button onClick={() => {\r\n//                             setId('');\r\n//                             setShow(true);\r\n//                         }}>Registrarlo</Button>\r\n//                         <p>Buscarlo</p>\r\n//                         {autoComplete()}\r\n//                     </>\r\n//                     : description}\r\n//             </Popover.Body>\r\n//         </Popover>\r\n//     );\r\n\r\n//     if (!show)\r\n//         return (\r\n//             <Form.Group className=\"mb-3\">\r\n//                 <Form.Label>{label}</Form.Label>\r\n//                 <InputGroup>\r\n//                     <OverlayTrigger show={id !== ''} placement=\"right\" overlay={popover}>\r\n//                         <FormControl type=\"text\" placeholder={placeholder} onChange={(e) => {\r\n//                             onChange(e);\r\n//                             setId(e.target.value)\r\n//                             getDescription(e.target.value);\r\n//                         }} />\r\n//                     </OverlayTrigger>\r\n//                 </InputGroup>\r\n//             </Form.Group>);\r\n//     return (<ModalArt handleClose={() => setShow(false)} show={show} registration={true} />);\r\n// }"]},"metadata":{},"sourceType":"module"}