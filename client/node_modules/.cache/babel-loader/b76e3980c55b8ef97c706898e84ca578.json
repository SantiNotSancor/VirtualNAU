{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\GitHub\\\\VirtualNAU\\\\client\\\\src\\\\Vendor\\\\addStock.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { ModalOpener } from '../modalOpener';\nimport { Request, RawResourceRequest } from '../textInputs';\nimport Axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment'; //import image from './Images/addStock.svg';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  responsible: '',\n  date: moment(new Date()).format(\"DD/MM/YYYY\"),\n  materials: [{\n    id: '',\n    meters: '',\n    quantity: '',\n    weight: ''\n  }],\n  //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\n  materialsData: [] //Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\n\n};\nexport class AddStock extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialState;\n\n    this.resetState = () => {\n      this.setState(initialState);\n    };\n  }\n\n  componentDidMount() {\n    //TODO: MICHAT Debe darle valor a materialData, que será una lista de objetos con id, peso por unidad y metro por unidad. De no poseer alguno de los últimos dos datos, debe mostrar 0\n    let aux = [{\n      id: 15,\n      weight: 0.5,\n      meters: 0\n    }, {\n      id: 4,\n      weight: 3,\n      meters: 1\n    }, {\n      id: 6,\n      weight: 0.5,\n      meters: 1.5\n    }];\n    this.setState({\n      materialsData: aux\n    });\n  }\n\n  addMaterial(material) {\n    let materials = this.state.materials;\n    materials[materials.length - 1] = material;\n    this.setState({\n      materials: [...this.state.materials, {\n        id: '',\n        meters: '',\n        quantity: '',\n        weight: ''\n      }]\n    }); //Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\n  }\n\n  removeMaterial(i) {\n    let materials = this.state.materials;\n    console.log(materials);\n    materials.splice(i, 1);\n    console.log(materials);\n    this.setState({\n      materials\n    });\n  }\n\n  changeMaterial(i, material) {\n    let materials = this.state.materials;\n    materials[i] = material;\n    this.setState({\n      materials\n    });\n  }\n\n  post() {\n    //TODO: MICHAT Se debe enviar materials (exceptuando el último elemento, que está vacío) a la base de datos\n    //let materials = this.state.materials;\n    // materials.pop();\n    // console.log(materials);\n    this.resetState();\n  }\n\n  myForm() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(Request, {\n        toShow: \"responsible\",\n        onChange: event => {\n          this.setState({\n            responsible: event.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        id: \"taskTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID: Nombre (descripci\\xF3n)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cantidad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Peso\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Metros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: !this.state.materials ? null : this.state.materials.map((material, index) => {\n            console.log('update'); //Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\n            //ya ingresada (en caso de una modificación), reemplazarle.\n\n            return /*#__PURE__*/_jsxDEV(Row, {\n              index: index,\n              remove: i => this.removeMaterial(i),\n              materialsData: this.state.materialsData,\n              isLast: this.state.materials.length === index + 1,\n              onChange: this.state.materials.length !== index + 1 ? material => this.changeMaterial(index, material) : material => this.addMaterial(material)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 32\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ModalOpener, {\n      buttonText: \"A\\xF1adir stock\",\n      handleClose: this.resetState,\n      className: 'title'\n      /*logo={image}*/\n      ,\n      title: 'Añadir stock',\n      post: this.post,\n      children: this.myForm()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const Row = _ref => {\n  _s();\n\n  let {\n    index,\n    onChange,\n    remove,\n    isLast,\n    materialsData\n  } = _ref;\n  const [input, setInput] = useState({\n    id: '',\n    quantity: '',\n    weight: '',\n    meters: ''\n  });\n  const [convertion, setConvertion] = useState({});\n  useEffect(() => {\n    if (!input.id) return;\n    console.log('trying');\n    materialsData.map(material => {\n      if (Number(material.id) === Number(input.id)) setConvertion(material);\n    });\n  }, [input.id]);\n\n  const changeInput = newInput => {\n    let aux = newInput;\n    if (!convertion.weight) aux.weight = '-';\n    if (!convertion.meters) aux.meters = '-';\n\n    if (newInput.quantity !== input.quantity && newInput.quantity) {\n      //Si cambió la cantidad...\n      aux.weight = newInput.quantity * convertion.weight;\n      aux.meters = newInput.quantity * convertion.meters;\n    }\n\n    if (newInput.weight !== input.weight && newInput.weight) {\n      //Si cambió el peso...\n      aux.quantity = newInput.weight / convertion.weight;\n      aux.meters = aux.quantity * convertion.meters;\n    }\n\n    if (newInput.meters !== input.meters && newInput.meters) {\n      //Si cambió la longitud\n      aux.quantity = newInput.meters / convertion.meters;\n      aux.weight = aux.quantity * convertion.weight;\n    }\n\n    onChange(aux);\n    setInput(aux);\n  };\n\n  const myFun = () => {\n    console.log(input);\n    remove(index);\n    setInput({\n      id: '',\n      quantity: '',\n      weight: '',\n      meters: ''\n    });\n    console.log(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(RawResourceRequest, {\n        placeholder: \"\",\n        handleEnter: () => console.log('hi') //TODO: No se borra cuando se elimina (porque no tiene value, sino onChange)\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          if (e.indexOf(':') > 0) aux.id = e.substr(0, e.indexOf(':'));else aux.id = '';\n          changeInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.quantity //Cantidad\n        ,\n        onChange: e => {\n          if (isNaN(e.target.value) || e.target.value < 0) return;\n          let aux = { ...input\n          };\n          aux.quantity = e.target.value;\n          changeInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.weight //Peso\n        ,\n        onChange: e => {\n          if (isNaN(e.target.value) || e.target.value < 0) return;\n          let aux = { ...input\n          };\n          aux.weight = e.target.value;\n          changeInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.meters //Metros\n        ,\n        onChange: e => {\n          if (isNaN(e.target.value) || e.target.value < 0) return;\n          let aux = { ...input\n          };\n          aux.meters = e.target.value;\n          changeInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), !isLast ? /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: myFun,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Row, \"h8ayh731QIYHKcCPS4vF4eMOBRc=\");\n\n_c = Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/Admin/GitHub/VirtualNAU/client/src/Vendor/addStock.js"],"names":["React","Component","useEffect","useState","ModalOpener","Request","RawResourceRequest","Axios","Form","FormControl","Button","Table","moment","initialState","responsible","date","Date","format","materials","id","meters","quantity","weight","materialsData","AddStock","state","resetState","setState","componentDidMount","aux","addMaterial","material","length","removeMaterial","i","console","log","splice","changeMaterial","post","myForm","e","preventDefault","event","target","value","map","index","render","Row","onChange","remove","isLast","input","setInput","convertion","setConvertion","Number","changeInput","newInput","myFun","indexOf","substr","isNaN"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, RawResourceRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n//import image from './Images/addStock.svg';\r\n\r\nconst initialState = {\r\n    responsible: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [{id: '', meters: '', quantity: '', weight: ''}],//Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n    materialsData: []//Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //TODO: MICHAT Debe darle valor a materialData, que será una lista de objetos con id, peso por unidad y metro por unidad. De no poseer alguno de los últimos dos datos, debe mostrar 0\r\n        let aux = [{id: 15, weight: 0.5, meters: 0},\r\n                {id: 4, weight: 3, meters: 1},\r\n                {id: 6, weight: 0.5, meters: 1.5}];\r\n        this.setState({ materialsData: aux });\r\n    }\r\n\r\n    addMaterial(material) {\r\n        let materials = this.state.materials;\r\n        materials[materials.length - 1] = material;\r\n        this.setState({materials: [...this.state.materials, {id: '', meters: '', quantity: '', weight: ''}]})//Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        let materials = this.state.materials;\r\n        console.log(materials);\r\n        materials.splice(i, 1);\r\n        console.log(materials);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(i, material) {\r\n        let materials = this.state.materials;\r\n        materials[i] = material;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//TODO: MICHAT Se debe enviar materials (exceptuando el último elemento, que está vacío) a la base de datos\r\n        //let materials = this.state.materials;\r\n        // materials.pop();\r\n        // console.log(materials);\r\n        this.resetState();\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsible\" onChange={(event) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID: Nombre (descripción)</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.materials? null :\r\n                        this.state.materials.map((material, index) =>{ console.log('update');\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle.\r\n                        return <Row key={index} index={index} remove={i => this.removeMaterial(i)} materialsData={this.state.materialsData}\r\n                            isLast={this.state.materials.length === index + 1} onChange={(this.state.materials.length !== index + 1)?\r\n                                (material) => this.changeMaterial(index, material) :\r\n                                (material) => this.addMaterial(material)} />\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                className={'title'} /*logo={image}*/ title={'Añadir stock'} post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ index, onChange, remove, isLast, materialsData }) => {\r\n\r\n    const [input, setInput] = useState({ id: '', quantity: '', weight: '', meters: '' });\r\n    const [convertion, setConvertion] = useState({});\r\n\r\n    useEffect(() => {\r\n        if(!input.id)\r\n            return;\r\n        console.log('trying');\r\n        materialsData.map((material) => {\r\n            if(Number(material.id) === Number(input.id))\r\n                setConvertion(material)\r\n            });\r\n    }, [input.id]);\r\n\r\n    const changeInput = (newInput) => {\r\n        let aux = newInput;\r\n        if(!convertion.weight)\r\n            aux.weight = '-';\r\n        if(!convertion.meters)\r\n            aux.meters = '-';\r\n        if(newInput.quantity !== input.quantity && newInput.quantity){//Si cambió la cantidad...\r\n            aux.weight = newInput.quantity * convertion.weight;\r\n            aux.meters = newInput.quantity * convertion.meters;\r\n        }\r\n        if(newInput.weight !== input.weight && newInput.weight){//Si cambió el peso...\r\n            aux.quantity = newInput.weight / convertion.weight;\r\n            aux.meters = aux.quantity * convertion.meters;\r\n        }\r\n        if(newInput.meters !== input.meters && newInput.meters){//Si cambió la longitud\r\n            aux.quantity = newInput.meters / convertion.meters;\r\n            aux.weight = aux.quantity * convertion.weight;\r\n        }\r\n        onChange(aux);\r\n        setInput(aux);\r\n    }\r\n\r\n    const myFun = () => {\r\n        console.log(input);\r\n        remove(index);\r\n        setInput({ id: '', quantity: '', weight: '', meters: '' });\r\n        console.log(index);\r\n    };\r\n\r\n    return (\r\n        <tr key={index}>\r\n            {/* TODO: handleEnter */}\r\n            <td><RawResourceRequest placeholder=\"\" handleEnter={()=>console.log('hi')}//TODO: No se borra cuando se elimina (porque no tiene value, sino onChange)\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    if (e.indexOf(':') > 0)\r\n                        aux.id = e.substr(0, e.indexOf(':'));\r\n                    else\r\n                        aux.id = '';\r\n                    changeInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.quantity}//Cantidad\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.quantity = e.target.value;\r\n                    changeInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.weight}//Peso\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.weight = e.target.value;\r\n                    changeInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.meters}//Metros\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.meters = e.target.value;\r\n                    changeInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            {!isLast? <td><Button onClick={myFun}>X</Button></td> : <></>}\r\n        </tr>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}