{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Escritorio\\\\fabrica\\\\src\\\\modal.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ModalController extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      showModal: false //True si y sólo si se debe mostrar el modal\n\n    };\n\n    this.showModal = () => {\n      //A llamar cuando se quiere mostrar el modal\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      //A llamar cuando se quiere esconder el modal\n      this.setState({\n        showModal: false\n      });\n    };\n  }\n\n}\nModalPrototype.propTypes = {\n  show: PropTypes.bool.isRequired,\n  //Boolean que especifica si se debe o no mostrar el modal\n  handleClose: PropTypes.func.isRequired,\n  //Función que cerrará el modal al presionar el botón\n  children: PropTypes.element.isRequired //Hijo que aparecerá en el modal\n\n};\nexport class ModalPrototype extends Component {\n  //Debe ser invocada para crear el modal. Ver props \n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        'display': this.props.show ? 'block' : 'none',\n        'background': 'yellow'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.props.handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), this.props.children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/PC/OneDrive/Escritorio/fabrica/src/modal.js"],"names":["React","Component","PropTypes","ModalController","state","showModal","setState","hideModal","ModalPrototype","propTypes","show","bool","isRequired","handleClose","func","children","element","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAE3CG,KAF2C,GAEnC;AACJC,MAAAA,SAAS,EAAE,KADP,CACY;;AADZ,KAFmC;;AAAA,SAM3CA,SAN2C,GAM/B,MAAM;AAAC;AACf,WAAKC,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAR0C;;AAAA,SAU3CE,SAV2C,GAU/B,MAAM;AAAC;AACf,WAAKD,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAZ0C;AAAA;;AAAA;AAiB/CG,cAAc,CAACC,SAAf,GAA2B;AACvBC,EAAAA,IAAI,EAAER,SAAS,CAACS,IAAV,CAAeC,UADE;AACS;AAChCC,EAAAA,WAAW,EAAEX,SAAS,CAACY,IAAV,CAAeF,UAFL;AAEgB;AACvCG,EAAAA,QAAQ,EAAEb,SAAS,CAACc,OAAV,CAAkBJ,UAHL,CAGe;;AAHf,CAA3B;AAMA,OAAO,MAAMJ,cAAN,SAA6BP,SAA7B,CAAuC;AAAC;AAC3CgB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,KAAK,EAAE;AAAE,mBAAW,KAAKC,KAAL,CAAWR,IAAX,GAAkB,OAAlB,GAA4B,MAAzC;AAAiD,sBAAc;AAA/D,OAAZ;AAAA,8BACI;AAAA,+BACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAE,KAAKQ,KAAL,CAAWL,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,EAMK,KAAKK,KAAL,CAAWH,QANhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AAZyC","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ModalController extends Component {//Debe ser extendida por el elemento que va a abrir el modal\r\n\r\n    state = {\r\n        showModal: false//True si y sólo si se debe mostrar el modal\r\n    }\r\n\r\n    showModal = () => {//A llamar cuando se quiere mostrar el modal\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    hideModal = () => {//A llamar cuando se quiere esconder el modal\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n\r\n}\r\n\r\nModalPrototype.propTypes = {\r\n    show: PropTypes.bool.isRequired,//Boolean que especifica si se debe o no mostrar el modal\r\n    handleClose: PropTypes.func.isRequired,//Función que cerrará el modal al presionar el botón\r\n    children: PropTypes.element.isRequired//Hijo que aparecerá en el modal\r\n}\r\n\r\nexport class ModalPrototype extends Component {//Debe ser invocada para crear el modal. Ver props \r\n    render() {\r\n        return (\r\n            <div style={{ 'display': this.props.show ? 'block' : 'none', 'background': 'yellow' }}>{/*Mostrar si y sólo si this.props.show*/}\r\n                <section>\r\n                    <button type=\"button\" onClick={this.props.handleClose}>{/*Botón que cierra el modal*/}\r\n                        Close\r\n                    </button>\r\n                </section>\r\n                {this.props.children}{/*Invocación de hijo(s)*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}