{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Escritorio\\\\fabrica\\\\src\\\\modal.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Modal from 'react-bootstrap/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class ModalController extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      showModal: false //True si y sólo si se debe mostrar el modal\n\n    };\n\n    this.showModal = () => {\n      //A llamar cuando se quiere mostrar el modal\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      //A llamar cuando se quiere esconder el modal\n      this.setState({\n        showModal: false\n      });\n    };\n  }\n\n}\nexport const ModalPrototype = () => {\n  _s();\n\n  //Debe ser invocada para crear el modal. Ver props \n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const showModal = () => {\n    setIsOpen(true);\n  };\n\n  const hideModal = () => {\n    setIsOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: showModal,\n      children: \"Display Modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: isOpen,\n      onHide: hideModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Hi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: \"The body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: hideModal,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true); // render() {\n  //     return (\n  //         <>\n  //             <Modal show={this.props.show} onHide={this.props.handleClose}>\n  //                 <Modal.Header closeButton>\n  //                     <Modal.Title>HI</Modal.Title>\n  //                 </Modal.Header>\n  //                 <Modal.Body>\n  //                     {this.props.children}\n  //                 </Modal.Body>\n  //                 <Modal.Footer>\n  //                     <button onClick={this.props.handleClose}>Close</button>\n  //                 </Modal.Footer>\n  //             </Modal>\n  //         </>\n  //     );\n  // }\n};\n\n_s(ModalPrototype, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n\n_c = ModalPrototype;\nModalPrototype.propTypes = {\n  show: PropTypes.bool.isRequired,\n  //Boolean que especifica si se debe o no mostrar el modal\n  handleClose: PropTypes.func.isRequired,\n  //Función que cerrará el modal al presionar el botón\n  children: PropTypes.element.isRequired //Hijo que aparecerá en el modal\n\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalPrototype\");","map":{"version":3,"sources":["C:/Users/PC/OneDrive/Escritorio/fabrica/src/modal.js"],"names":["React","Component","PropTypes","Modal","ModalController","state","showModal","setState","hideModal","ModalPrototype","isOpen","setIsOpen","useState","propTypes","show","bool","isRequired","handleClose","func","children","element"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,sCAAP;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,OAAO,MAAMC,eAAN,SAA8BH,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAE3CI,KAF2C,GAEnC;AACJC,MAAAA,SAAS,EAAE,KADP,CACY;;AADZ,KAFmC;;AAAA,SAM3CA,SAN2C,GAM/B,MAAM;AAAC;AACf,WAAKC,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAR0C;;AAAA,SAU3CE,SAV2C,GAU/B,MAAM;AAAC;AACf,WAAKD,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAZ0C;AAAA;;AAAA;AAiB/C,OAAO,MAAMG,cAAc,GAAG,MAAM;AAAA;;AAAC;AACjC,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBX,KAAK,CAACY,QAAN,CAAe,KAAf,CAA3B;;AAEA,QAAMN,SAAS,GAAG,MAAM;AACpBK,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAFD;;AAIA,QAAMH,SAAS,GAAG,MAAM;AACpBG,IAAAA,SAAS,CAAC,KAAD,CAAT;AACH,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEL,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEI,MAAb;AAAqB,MAAA,MAAM,EAAEF,SAA7B;AAAA,8BACE,QAAC,KAAD,CAAO,MAAP;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,KAAD,CAAO,MAAP;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAEA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF,CAXgC,CA0BhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA3CM;;GAAMC,c;;KAAAA,c;AA6CbA,cAAc,CAACI,SAAf,GAA2B;AACvBC,EAAAA,IAAI,EAAEZ,SAAS,CAACa,IAAV,CAAeC,UADE;AACS;AAChCC,EAAAA,WAAW,EAAEf,SAAS,CAACgB,IAAV,CAAeF,UAFL;AAEgB;AACvCG,EAAAA,QAAQ,EAAEjB,SAAS,CAACkB,OAAV,CAAkBJ,UAHL,CAGe;;AAHf,CAA3B","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nexport class ModalController extends Component {//Debe ser extendida por el elemento que va a abrir el modal\r\n\r\n    state = {\r\n        showModal: false//True si y sólo si se debe mostrar el modal\r\n    }\r\n\r\n    showModal = () => {//A llamar cuando se quiere mostrar el modal\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    hideModal = () => {//A llamar cuando se quiere esconder el modal\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const ModalPrototype = () => {//Debe ser invocada para crear el modal. Ver props \r\n    const[isOpen, setIsOpen] = React.useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    return(\r\n      <>\r\n        <button onClick={showModal}>Display Modal</button>\r\n        <Modal show={isOpen} onHide={hideModal}>\r\n          <Modal.Header>\r\n            <Modal.Title>Hi</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>The body</Modal.Body>\r\n          <Modal.Footer>\r\n            <button onClick={hideModal}>Cancel</button>\r\n            <button>Save</button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n    // render() {\r\n    //     return (\r\n    //         <>\r\n    //             <Modal show={this.props.show} onHide={this.props.handleClose}>\r\n    //                 <Modal.Header closeButton>\r\n    //                     <Modal.Title>HI</Modal.Title>\r\n    //                 </Modal.Header>\r\n    //                 <Modal.Body>\r\n    //                     {this.props.children}\r\n    //                 </Modal.Body>\r\n    //                 <Modal.Footer>\r\n    //                     <button onClick={this.props.handleClose}>Close</button>\r\n    //                 </Modal.Footer>\r\n    //             </Modal>\r\n    //         </>\r\n    //     );\r\n    // }\r\n}\r\n\r\nModalPrototype.propTypes = {\r\n    show: PropTypes.bool.isRequired,//Boolean que especifica si se debe o no mostrar el modal\r\n    handleClose: PropTypes.func.isRequired,//Función que cerrará el modal al presionar el botón\r\n    children: PropTypes.element.isRequired//Hijo que aparecerá en el modal\r\n}"]},"metadata":{},"sourceType":"module"}