{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Escritorio\\\\fabrica\\\\client\\\\src\\\\textInputs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Axios from 'axios';\nimport './autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Request = _ref => {\n  let {\n    onChange,\n    toShow,\n    label,\n    reg\n  } = _ref;\n  //Pedirá un dato con un input tipo text\n  let placeholder,\n      auxStorage = label;\n\n  switch (toShow) {\n    case 'name':\n      label = 'Nombre del taller';\n      placeholder = 'Ingrese el nombre del/la tallerista';\n      break;\n\n    case 'article':\n      label = 'Número de artículo';\n      placeholder = 'Ingrese el código único del artículo';\n      break;\n\n    case 'quantityArticle':\n      label = 'Cantidad asignada';\n      placeholder = 'Ingrese la cantidad de artículos';\n      break;\n\n    case 'task':\n      label = 'Número de tarea';\n      placeholder = 'Ingrese el número de tarea';\n      break;\n\n    case 'money':\n      label = 'Monto';\n      placeholder = 'Ingrese el monto a pagar';\n      break;\n\n    case 'price':\n      label = 'Precio';\n      placeholder = 'Ingrese el precio por unidad';\n      break;\n\n    case 'description':\n      label = 'Descripción';\n      placeholder = 'Ingrese una breve descripción del artículo';\n      break;\n\n    default:\n      console.log(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\n  }\n\n  label = auxStorage ? auxStorage : label;\n  placeholder += '…';\n  return toShow === 'name' && !reg ? /*#__PURE__*/_jsxDEV(NameRequest, {\n    label: label,\n    onSelect: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 43\n  }, this) : /*#__PURE__*/_jsxDEV(Form.Group, {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [toShow === 'money' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \"$\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(FormControl, {\n        type: \"text\",\n        placeholder: placeholder,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), toShow === 'money' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \".00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_c = Request;\nRequest.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  //Función a ejecutar cuando se modifica el input\n  toShow: PropTypes.string.isRequired,\n  reg: PropTypes.bool,\n  //True si se está dando de alta\n  label: PropTypes.string\n};\nexport const NameRequest = _ref2 => {\n  _s();\n\n  let {\n    label,\n    onSelect\n  } = _ref2;\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    getList();\n    return () => {\n      setList([]); // This worked for me\n    };\n  }, []);\n\n  const getList = () => {\n    Axios.get('http://localhost:3001/dropdownNames').then(response => {\n      setList(response.data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      suggestions: list.map(element => {\n        return element.name;\n      }),\n      onSelect: onSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NameRequest, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c2 = NameRequest;\nNameRequest.propTypes = {\n  label: PropTypes.string.isRequired\n};\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n        if (activeSuggestion === 0) {\n          return;\n        }\n\n        this.setState({\n          activeSuggestion: activeSuggestion - 1\n        });\n      } // User pressed the down arrow\n      else if (e.keyCode === 40) {\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\n          return;\n        }\n\n        this.setState({\n          activeSuggestion: activeSuggestion + 1\n        });\n      }\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  }\n\n  componentDidUpdate(prevState, prvProps) {\n    try {\n      console.log(this.state.userInput);\n      this.props.onSelect(this.state.userInput);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions\",\n          children: filteredSuggestions.map((suggestion, index) => {\n            let className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: suggestion\n            }, suggestion, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this);\n      } else {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-suggestions\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"No suggestions, you're on your own!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), suggestionsListComponent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Request\");\n$RefreshReg$(_c2, \"NameRequest\");","map":{"version":3,"sources":["C:/Users/PC/OneDrive/Escritorio/fabrica/client/src/textInputs.js"],"names":["React","useState","useEffect","Component","Fragment","PropTypes","Form","InputGroup","FormControl","Axios","Request","onChange","toShow","label","reg","placeholder","auxStorage","console","log","propTypes","func","isRequired","string","bool","NameRequest","onSelect","list","setList","getList","get","then","response","data","map","element","name","Autocomplete","constructor","props","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","componentDidUpdate","prevState","prvProps","render","suggestionsListComponent","index","className","instanceOf","Array","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;;AAEA,OAAO,MAAMC,OAAO,GAAG,QAAsC;AAAA,MAArC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA;AAA3B,GAAqC;AAAC;AAE1D,MAAIC,WAAJ;AAAA,MAAiBC,UAAU,GAAGH,KAA9B;;AAEA,UAAQD,MAAR;AACI,SAAK,MAAL;AACIC,MAAAA,KAAK,GAAG,mBAAR;AACAE,MAAAA,WAAW,GAAG,qCAAd;AACA;;AACJ,SAAK,SAAL;AACIF,MAAAA,KAAK,GAAG,oBAAR;AACAE,MAAAA,WAAW,GAAG,sCAAd;AACA;;AACJ,SAAK,iBAAL;AACIF,MAAAA,KAAK,GAAG,mBAAR;AACAE,MAAAA,WAAW,GAAG,kCAAd;AACA;;AACJ,SAAK,MAAL;AACIF,MAAAA,KAAK,GAAG,iBAAR;AACAE,MAAAA,WAAW,GAAG,4BAAd;AACA;;AACJ,SAAK,OAAL;AACIF,MAAAA,KAAK,GAAG,OAAR;AACAE,MAAAA,WAAW,GAAG,0BAAd;AACA;;AACJ,SAAK,OAAL;AACIF,MAAAA,KAAK,GAAG,QAAR;AACAE,MAAAA,WAAW,GAAG,8BAAd;AACA;;AACJ,SAAK,aAAL;AACIF,MAAAA,KAAK,GAAG,aAAR;AACAE,MAAAA,WAAW,GAAG,4CAAd;AACA;;AACJ;AACIE,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAmCN,MAAnC,GAA4C,6BAAxD;AA9BR;;AAgCAC,EAAAA,KAAK,GAAIG,UAAD,GAAeA,UAAf,GAA4BH,KAApC;AACAE,EAAAA,WAAW,IAAI,GAAf;AACA,SAASH,MAAM,KAAK,MAAX,IAAqB,CAACE,GAAvB,gBAA8B,QAAC,WAAD;AAAa,IAAA,KAAK,EAAED,KAApB;AAA2B,IAAA,QAAQ,EAAEF;AAArC;AAAA;AAAA;AAAA;AAAA,UAA9B,gBACJ,QAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,MAAtB;AAAA,4BACI,QAAC,IAAD,CAAM,KAAN;AAAA,gBAAaE;AAAb;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,UAAD;AAAA,iBACMD,MAAM,KAAK,OAAZ,gBAAuB,QAAC,UAAD,CAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvB,gBAA8D,qCADnE,eAEI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAC,MAAlB;AAAyB,QAAA,WAAW,EAAEG,WAAtC;AAAmD,QAAA,QAAQ,EAAEJ;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGMC,MAAM,KAAK,OAAZ,gBAAuB,QAAC,UAAD,CAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvB,gBAAgE,qCAHrE;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAhDM;KAAMF,O;AAiDbA,OAAO,CAACS,SAAR,GAAoB;AAChBR,EAAAA,QAAQ,EAAEN,SAAS,CAACe,IAAV,CAAeC,UADT;AACqB;AACrCT,EAAAA,MAAM,EAAEP,SAAS,CAACiB,MAAV,CAAiBD,UAFT;AAGhBP,EAAAA,GAAG,EAAET,SAAS,CAACkB,IAHC;AAGI;AACpBV,EAAAA,KAAK,EAAER,SAAS,CAACiB;AAJD,CAApB;AAOA,OAAO,MAAME,WAAW,GAAG,SAAyB;AAAA;;AAAA,MAAxB;AAAEX,IAAAA,KAAF;AAASY,IAAAA;AAAT,GAAwB;AAEhD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC,EAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,OAAO;AACP,WAAO,MAAM;AACTD,MAAAA,OAAO,CAAC,EAAD,CAAP,CADS,CACI;AAChB,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;;AAMA,QAAMC,OAAO,GAAG,MAAM;AAClBnB,IAAAA,KAAK,CAACoB,GAAN,CAAU,qCAAV,EAAiDC,IAAjD,CAAuDC,QAAD,IAAc;AAChEJ,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACH,KAFD;AAGH,GAJD;;AAKA,sBACI,QAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,MAAtB;AAAA,4BACI,QAAC,IAAD,CAAM,KAAN;AAAA,gBAAanB;AAAb;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AAAc,MAAA,WAAW,EAAEa,IAAI,CAACO,GAAL,CAAUC,OAAD,IAAa;AAAE,eAAOA,OAAO,CAACC,IAAf;AAAqB,OAA7C,CAA3B;AAA2E,MAAA,QAAQ,EAAEV;AAArF;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CApBM;;GAAMD,W;;MAAAA,W;AAqBbA,WAAW,CAACL,SAAZ,GAAwB;AACpBN,EAAAA,KAAK,EAAER,SAAS,CAACiB,MAAV,CAAiBD;AADJ,CAAxB;;AAKA,MAAMe,YAAN,SAA2BjC,SAA3B,CAAqC;AASjCkC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAuBnB3B,QAvBmB,GAuBR4B,CAAC,IAAI;AACZ,YAAM;AAAEC,QAAAA;AAAF,UAAkB,KAAKF,KAA7B;AACA,YAAMG,SAAS,GAAGF,CAAC,CAACG,aAAF,CAAgBC,KAAlC,CAFY,CAIZ;;AACA,YAAMC,mBAAmB,GAAGJ,WAAW,CAACK,MAAZ,CACxBC,UAAU,IACNA,UAAU,CAACC,WAAX,GAAyBC,OAAzB,CAAiCP,SAAS,CAACM,WAAV,EAAjC,IAA4D,CAAC,CAFzC,CAA5B;AAKA,WAAKE,QAAL,CAAc;AACVC,QAAAA,gBAAgB,EAAE,CADR;AAEVN,QAAAA,mBAFU;AAGVO,QAAAA,eAAe,EAAE,IAHP;AAIVV,QAAAA,SAAS,EAAEF,CAAC,CAACG,aAAF,CAAgBC;AAJjB,OAAd;AAMH,KAvCkB;;AAAA,SAyCnBS,OAzCmB,GAyCTb,CAAC,IAAI;AACX,WAAKU,QAAL,CAAc;AACVC,QAAAA,gBAAgB,EAAE,CADR;AAEVN,QAAAA,mBAAmB,EAAE,EAFX;AAGVO,QAAAA,eAAe,EAAE,KAHP;AAIVV,QAAAA,SAAS,EAAEF,CAAC,CAACG,aAAF,CAAgBW;AAJjB,OAAd;AAMH,KAhDkB;;AAAA,SAkDnBC,SAlDmB,GAkDPf,CAAC,IAAI;AACb,YAAM;AAAEW,QAAAA,gBAAF;AAAoBN,QAAAA;AAApB,UAA4C,KAAKW,KAAvD,CADa,CAGb;;AACA,UAAIhB,CAAC,CAACiB,OAAF,KAAc,EAAlB,EAAsB;AAClB,aAAKP,QAAL,CAAc;AACVC,UAAAA,gBAAgB,EAAE,CADR;AAEVC,UAAAA,eAAe,EAAE,KAFP;AAGVV,UAAAA,SAAS,EAAEG,mBAAmB,CAACM,gBAAD;AAHpB,SAAd;AAKH,OAND,CAOA;AAPA,WAQK,IAAIX,CAAC,CAACiB,OAAF,KAAc,EAAlB,EAAsB;AACvB,YAAIN,gBAAgB,KAAK,CAAzB,EAA4B;AACxB;AACH;;AAED,aAAKD,QAAL,CAAc;AAAEC,UAAAA,gBAAgB,EAAEA,gBAAgB,GAAG;AAAvC,SAAd;AACH,OANI,CAOL;AAPK,WAQA,IAAIX,CAAC,CAACiB,OAAF,KAAc,EAAlB,EAAsB;AACvB,YAAIN,gBAAgB,GAAG,CAAnB,KAAyBN,mBAAmB,CAACa,MAAjD,EAAyD;AACrD;AACH;;AAED,aAAKR,QAAL,CAAc;AAAEC,UAAAA,gBAAgB,EAAEA,gBAAgB,GAAG;AAAvC,SAAd;AACH;AACJ,KA7EkB;;AAGf,SAAKK,KAAL,GAAa;AACT;AACAL,MAAAA,gBAAgB,EAAE,CAFT;AAGT;AACAN,MAAAA,mBAAmB,EAAE,EAJZ;AAKT;AACAO,MAAAA,eAAe,EAAE,KANR;AAOT;AACAV,MAAAA,SAAS,EAAE;AARF,KAAb;AAUH;;AAEDiB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AACpC,QAAI;AACA3C,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKqC,KAAL,CAAWd,SAAvB;AACA,WAAKH,KAAL,CAAWb,QAAX,CAAoB,KAAK8B,KAAL,CAAWd,SAA/B;AACH,KAHD,CAIA,OAAOF,CAAP,EAAS;AAACtB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,CAAZ;AAAe;AAC5B;;AA0DDsB,EAAAA,MAAM,GAAG;AACL,UAAM;AACFlD,MAAAA,QADE;AAEFyC,MAAAA,OAFE;AAGFE,MAAAA,SAHE;AAIFC,MAAAA,KAAK,EAAE;AACHL,QAAAA,gBADG;AAEHN,QAAAA,mBAFG;AAGHO,QAAAA,eAHG;AAIHV,QAAAA;AAJG;AAJL,QAUF,IAVJ;AAYA,QAAIqB,wBAAJ;;AAEA,QAAIX,eAAe,IAAIV,SAAvB,EAAkC;AAC9B,UAAIG,mBAAmB,CAACa,MAAxB,EAAgC;AAC5BK,QAAAA,wBAAwB,gBACpB;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA,oBACKlB,mBAAmB,CAACX,GAApB,CAAwB,CAACa,UAAD,EAAaiB,KAAb,KAAuB;AAC5C,gBAAIC,SAAJ,CAD4C,CAG5C;;AACA,gBAAID,KAAK,KAAKb,gBAAd,EAAgC;AAC5Bc,cAAAA,SAAS,GAAG,mBAAZ;AACH;;AAED,gCACI;AAAI,cAAA,SAAS,EAAEA,SAAf;AAA2C,cAAA,OAAO,EAAEZ,OAApD;AAAA,wBACKN;AADL,eAA+BA,UAA/B;AAAA;AAAA;AAAA;AAAA,oBADJ;AAKH,WAbA;AADL;AAAA;AAAA;AAAA;AAAA,gBADJ;AAkBH,OAnBD,MAmBO;AACHgB,QAAAA,wBAAwB,gBACpB;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH;AACJ;;AAED,wBACI,QAAC,QAAD;AAAA,8BACI,QAAC,WAAD;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,QAAQ,EAAEnD,QAFd;AAGI,QAAA,SAAS,EAAE2C,SAHf;AAII,QAAA,KAAK,EAAEb;AAJX;AAAA;AAAA;AAAA;AAAA,cADJ,EAOKqB,wBAPL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA/IgC;;AAA/B1B,Y,CACKjB,S,GAAY;AACfqB,EAAAA,WAAW,EAAEnC,SAAS,CAAC4D,UAAV,CAAqBC,KAArB;AADE,C;AADjB9B,Y,CAKK+B,Y,GAAe;AAClB3B,EAAAA,WAAW,EAAE;AADK,C","sourcesContent":["import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Axios from 'axios';\r\nimport './autocomplete.css';\r\n\r\nexport const Request = ({ onChange, toShow, label, reg }) => {//Pedirá un dato con un input tipo text\r\n\r\n    let placeholder, auxStorage = label;\r\n\r\n    switch (toShow) {\r\n        case 'name':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            break;\r\n        case 'task':\r\n            label = 'Número de tarea';\r\n            placeholder = 'Ingrese el número de tarea';\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            break;\r\n        case 'price':\r\n            label = 'Precio';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        default:\r\n            console.log(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n    label = (auxStorage) ? auxStorage : label;\r\n    placeholder += '…';\r\n    return ((toShow === 'name' && !reg) ? <NameRequest label={label} onSelect={onChange} /> :\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <InputGroup>\r\n                {(toShow === 'money') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                <FormControl type=\"text\" placeholder={placeholder} onChange={onChange} />\r\n                {(toShow === 'money') ? <InputGroup.Text>.00</InputGroup.Text> : <></>}\r\n            </InputGroup>\r\n        </Form.Group>\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    reg: PropTypes.bool,//True si se está dando de alta\r\n    label: PropTypes.string\r\n}\r\n\r\nexport const NameRequest = ({ label, onSelect }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n    useEffect(() => {\r\n        getList();\r\n        return () => {\r\n            setList([]); // This worked for me\r\n        };\r\n    }, []);\r\n    const getList = () => {\r\n        Axios.get('http://localhost:3001/dropdownNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n    }\r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })} onSelect={onSelect} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = {\r\n    label: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array)\r\n    };\r\n\r\n    static defaultProps = {\r\n        suggestions: []\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevState, prvProps) {\r\n        try {\r\n            console.log(this.state.userInput);\r\n            this.props.onSelect(this.state.userInput);\r\n        }\r\n        catch (e){console.log(e)}\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onClick = e => {\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput: e.currentTarget.innerText\r\n        });\r\n    };\r\n\r\n    onKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n        // User pressed the enter key\r\n        if (e.keyCode === 13) {\r\n            this.setState({\r\n                activeSuggestion: 0,\r\n                showSuggestions: false,\r\n                userInput: filteredSuggestions[activeSuggestion]\r\n            });\r\n        }\r\n        // User pressed the up arrow\r\n        else if (e.keyCode === 38) {\r\n            if (activeSuggestion === 0) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        }\r\n        // User pressed the down arrow\r\n        else if (e.keyCode === 40) {\r\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            onKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion) {\r\n                                className = \"suggestion-active\";\r\n                            }\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No suggestions, you're on your own!</em>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    onChange={onChange}\r\n                    onKeyDown={onKeyDown}\r\n                    value={userInput}\r\n                />\r\n                {suggestionsListComponent}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}