{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\GitHub\\\\VirtualNAU\\\\client\\\\src\\\\Vendor\\\\addStock.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { ModalOpener } from '../modalOpener';\nimport { Request, TaskRequest } from '../textInputs';\nimport Axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment'; //import image from './Images/addStock.svg';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  responsable: '',\n  date: moment(new Date()).format(\"DD/MM/YYYY\"),\n  materials: [],\n  //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\n  materialsData: [] //Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\n\n};\nexport class AddStock extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    //TODO: Debe darle valor a materialData, que será una lista de objetos con id, nombre, descripción, peso por unidad y metro por unidad. De no poseer alguno de los últimos dos datos, debe mostrar 0\n    let aux = [{\n      id: 15,\n      name: 'Cierre',\n      description: 'Marca SanCor',\n      weight: 0.5,\n      meters: 0\n    }, {\n      id: 4,\n      name: 'Pasador',\n      description: 'Amarillo',\n      weight: 3,\n      meters: 1\n    }, {\n      id: 6,\n      name: 'Cable',\n      description: 'De cobre',\n      weight: 0.5,\n      meters: 1.5\n    }];\n    this.setState({\n      materialsData: aux\n    });\n  }\n\n  addMaterial(value, property) {\n    let aux = {\n      id: '',\n      quantity: ''\n    };\n    aux[property] = value;\n    this.setState({\n      materials: [...this.state.materials, aux]\n    }); //Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\n  }\n\n  removeMaterial(i) {\n    let materials = this.state.materials;\n    materials.splice(i, 1);\n    this.setState({\n      materials\n    });\n  }\n\n  changeMaterial(i, value, property) {\n    let materials = this.state.materials;\n    materials[i][property] = value;\n    this.setState({\n      materials\n    });\n  }\n\n  post() {\n    //TODO:\n    console.log('hi');\n  }\n\n  myForm() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(Request, {\n        toShow: \"responsable\",\n        onChange: event => {\n          this.setState({\n            responsable: event.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        id: \"taskTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nombre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Descripci\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cantidad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Peso\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Metros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [!this.state.materials ? null : this.state.materials.map((material, index) =>\n          /*#__PURE__*/\n          //Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\n          //ya ingresada (en caso de una modificación), reemplazarle.\n          _jsxDEV(Row, {\n            material: material,\n            index: index,\n            remove: i => this.removeMaterial(i),\n            materialsData: this.state.materialsData,\n            onChange: (e, property) => this.changeMaterial(index, e, property)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(Row, {\n            material: {\n              id: '',\n              quantity: ''\n            },\n            onChange: (value, property) => {\n              console.log('hi');\n              this.addMaterial(value, property);\n            },\n            materialsData: this.state.materialsData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //null\n      _jsxDEV(ModalOpener, {\n        buttonText: \"A\\xF1adir stock\",\n        handleClose: this.resetState,\n        className: 'title'\n        /*logo={image}*/\n        ,\n        title: 'Añadir stock',\n        post: this.post,\n        children: this.myForm()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}\nexport const Row = _ref => {\n  _s();\n\n  let {\n    material,\n    index,\n    onChange,\n    remove,\n    materialsData\n  } = _ref;\n  const [input, setInput] = useState({\n    id: material.id,\n    name: '',\n    description: '',\n    quantity: material.quantity,\n    weight: '',\n    meters: ''\n  });\n  useEffect(() => {\n    console.log(onChange);\n    onChange(this, input.id, 'id');\n    onChange(this, input.quantity, 'quantity');\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    style: {\n      'backgroundColor': 'green'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.id //ID\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.id = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.name //Nombre\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.name = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.description //Descripción\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.description = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.quantity //Cantidad\n        ,\n        onChange: e => {\n          if (isNaN(e.target.value) || e.target.value < 0) return;\n          let aux = { ...input\n          };\n          aux.quantity = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.weight //Peso\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.weight = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.meters //Metros\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.meters = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), remove ? /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: remove.bind(this, index),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}; // import React from \"react\";\n// import './styles.css'\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = { \n//        materials: [{ name: \"\", email : \"\" }]\n//      };\n//     this.handleSubmit = this.handleSubmit.bind(this)\n//   }\n//   handleChange(i, e) {\n//     let materials = this.state.materials;\n//     materials[i][e.target.name] = e.target.value;\n//     this.setState({ materials });\n//   }\n//   addFormFields() {\n//     this.setState(({\n//       materials: [...this.state.materials, { name: \"\", email: \"\" }]\n//     }))\n//   }\n//   removeFormFields(i) {\n//     let materials = this.state.materials;\n//     materials.splice(i, 1);\n//     this.setState({ materials });\n//   }\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     alert(JSON.stringify(this.state.materials));\n//   }\n//   render() {\n//     return (\n//         <form  onSubmit={this.handleSubmit}>\n//           {this.state.materials.map((element, index) => (\n//             <div className=\"form-inline\" key={index}>\n//               <label>Name</label>\n//               <input type=\"text\" name=\"name\" value={element.name || \"\"} onChange={e => this.handleChange(index, e)} />\n//               <label>Email</label>\n//               <input type=\"text\" name=\"email\" value={element.email || \"\"} onChange={e => this.handleChange(index, e)} />\n//               {\n//                 index ? \n//                   <button type=\"button\"  className=\"button remove\" onClick={() => this.removeFormFields(index)}>Remove</button> \n//                 : null\n//               }\n//             </div>\n//           ))}\n//           <div className=\"button-section\">\n//               <button className=\"button add\" type=\"button\" onClick={() => this.addFormFields()}>Add</button>\n//               <button className=\"button submit\" type=\"submit\">Submit</button>\n//           </div>\n//       </form>\n//     );\n//   }\n// }\n\n_s(Row, \"1t3Q0j+ZYgkD2VHUUUR2S0eITkU=\");\n\n_c = Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/Admin/GitHub/VirtualNAU/client/src/Vendor/addStock.js"],"names":["React","Component","useEffect","useState","ModalOpener","Request","TaskRequest","Axios","Form","FormControl","Button","Table","moment","initialState","responsable","date","Date","format","materials","materialsData","AddStock","state","componentDidMount","aux","id","name","description","weight","meters","setState","addMaterial","value","property","quantity","removeMaterial","i","splice","changeMaterial","post","console","log","myForm","e","preventDefault","event","target","map","material","index","render","resetState","Row","onChange","remove","input","setInput","isNaN","bind"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,eAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,EADI;AAEjBC,EAAAA,IAAI,EAAEH,MAAM,CAAC,IAAII,IAAJ,EAAD,CAAN,CAAmBC,MAAnB,CAA0B,YAA1B,CAFW;AAGjBC,EAAAA,SAAS,EAAE,EAHM;AAGH;AACdC,EAAAA,aAAa,EAAE,EAJE,CAIA;;AAJA,CAArB;AAOA,OAAO,MAAMC,QAAN,SAAuBnB,SAAvB,CAAiC;AAAA;AAAA;AAAA,SACpCoB,KADoC,GAC5BR,YAD4B;AAAA;;AAGpCS,EAAAA,iBAAiB,GAAG;AACpB;AACA,QAAIC,GAAG,GAAG,CAAC;AAACC,MAAAA,EAAE,EAAE,EAAL;AAASC,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,WAAW,EAAE,cAAtC;AAAsDC,MAAAA,MAAM,EAAE,GAA9D;AAAmEC,MAAAA,MAAM,EAAE;AAA3E,KAAD,EACC;AAACJ,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,IAAI,EAAE,SAAd;AAAyBC,MAAAA,WAAW,EAAE,UAAtC;AAAkDC,MAAAA,MAAM,EAAE,CAA1D;AAA6DC,MAAAA,MAAM,EAAE;AAArE,KADD,EAEC;AAACJ,MAAAA,EAAE,EAAE,CAAL;AAAQC,MAAAA,IAAI,EAAE,OAAd;AAAuBC,MAAAA,WAAW,EAAE,UAApC;AAAgDC,MAAAA,MAAM,EAAE,GAAxD;AAA6DC,MAAAA,MAAM,EAAE;AAArE,KAFD,CAAV;AAGA,SAAKC,QAAL,CAAc;AAAEV,MAAAA,aAAa,EAAEI;AAAjB,KAAd;AACC;;AAEDO,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACzB,QAAIT,GAAG,GAAG;AAACC,MAAAA,EAAE,EAAE,EAAL;AAASS,MAAAA,QAAQ,EAAE;AAAnB,KAAV;AACAV,IAAAA,GAAG,CAACS,QAAD,CAAH,GAAgBD,KAAhB;AACA,SAAKF,QAAL,CAAc;AAACX,MAAAA,SAAS,EAAE,CAAC,GAAG,KAAKG,KAAL,CAAWH,SAAf,EAA0BK,GAA1B;AAAZ,KAAd,EAHyB,CAGiC;AAC7D;;AAEDW,EAAAA,cAAc,CAACC,CAAD,EAAI;AACd,QAAIjB,SAAS,GAAG,KAAKG,KAAL,CAAWH,SAA3B;AACAA,IAAAA,SAAS,CAACkB,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;AACA,SAAKN,QAAL,CAAc;AAAEX,MAAAA;AAAF,KAAd;AACH;;AAEDmB,EAAAA,cAAc,CAACF,CAAD,EAAIJ,KAAJ,EAAWC,QAAX,EAAqB;AAC/B,QAAId,SAAS,GAAG,KAAKG,KAAL,CAAWH,SAA3B;AACAA,IAAAA,SAAS,CAACiB,CAAD,CAAT,CAAaH,QAAb,IAAyBD,KAAzB;AACA,SAAKF,QAAL,CAAc;AAAEX,MAAAA;AAAF,KAAd;AACH;;AAEDoB,EAAAA,IAAI,GAAG;AAAC;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEC,CAAC,IAAIA,CAAC,CAACC,cAAF,EAArB;AAAA,8BAEI,QAAC,OAAD;AAAS,QAAA,MAAM,EAAC,aAAhB;AAA8B,QAAA,QAAQ,EAAGC,KAAD,IAAW;AAC/C,eAAKf,QAAL,CAAc;AAAEf,YAAAA,WAAW,EAAE8B,KAAK,CAACC,MAAN,CAAad;AAA5B,WAAd;AACH;AAFD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI,QAAC,KAAD;AAAO,QAAA,OAAO,MAAd;AAAe,QAAA,QAAQ,MAAvB;AAAwB,QAAA,EAAE,EAAC,WAA3B;AAAA,gCACI;AAAA,iCACI;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,eAOI;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAYI;AAAA,qBACK,CAAC,KAAKV,KAAL,CAAWH,SAAZ,GAAuB,IAAvB,GACD,KAAKG,KAAL,CAAWH,SAAX,CAAqB4B,GAArB,CAAyB,CAACC,QAAD,EAAWC,KAAX;AAAA;AACjD;AACA;AACwB,kBAAC,GAAD;AAAK,YAAA,QAAQ,EAAED,QAAf;AAAyB,YAAA,KAAK,EAAEC,KAAhC;AAAuC,YAAA,MAAM,EAAEb,CAAC,IAAI,KAAKD,cAAL,CAAoBC,CAApB,CAApD;AAA4E,YAAA,aAAa,EAAE,KAAKd,KAAL,CAAWF,aAAtG;AACI,YAAA,QAAQ,EAAE,CAACuB,CAAD,EAAIV,QAAJ,KAAiB,KAAKK,cAAL,CAAoBW,KAApB,EAA2BN,CAA3B,EAA8BV,QAA9B;AAD/B;AAAA;AAAA;AAAA;AAAA,kBAHA,CAFJ,eAQI,QAAC,GAAD;AAAK,YAAA,QAAQ,EAAE;AAACR,cAAAA,EAAE,EAAE,EAAL;AAASS,cAAAA,QAAQ,EAAE;AAAnB,aAAf;AAAuC,YAAA,QAAQ,EAAE,CAACF,KAAD,EAAQC,QAAR,KAAqB;AAClEO,cAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,mBAAKV,WAAL,CAAiBC,KAAjB,EAAwBC,QAAxB;AACH,aAHD;AAGG,YAAA,aAAa,EAAE,KAAKX,KAAL,CAAWF;AAH7B;AAAA;AAAA;AAAA;AAAA,kBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkCH;;AAED8B,EAAAA,MAAM,GAAG;AACL;AAAA;AACI;AACA,cAAC,WAAD;AAAa,QAAA,UAAU,EAAC,iBAAxB;AAAuC,QAAA,WAAW,EAAE,KAAKC,UAAzD;AACI,QAAA,SAAS,EAAE;AAAS;AADxB;AACyC,QAAA,KAAK,EAAE,cADhD;AACgE,QAAA,IAAI,EAAE,KAAKZ,IAD3E;AACiF,QAAA,QAAQ,EAAE,KAAKG,MAAL;AAD3F;AAAA;AAAA;AAAA;AAAA;AAFJ;AAKH;;AA5EmC;AA+ExC,OAAO,MAAMU,GAAG,GAAG,QAA0D;AAAA;;AAAA,MAAzD;AAAEJ,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBI,IAAAA,QAAnB;AAA6BC,IAAAA,MAA7B;AAAqClC,IAAAA;AAArC,GAAyD;AAEzE,QAAM,CAACmC,KAAD,EAAQC,QAAR,IAAoBpD,QAAQ,CAAC;AAAEqB,IAAAA,EAAE,EAAEuB,QAAQ,CAACvB,EAAf;AAAmBC,IAAAA,IAAI,EAAE,EAAzB;AAA6BC,IAAAA,WAAW,EAAE,EAA1C;AAA8CO,IAAAA,QAAQ,EAAEc,QAAQ,CAACd,QAAjE;AAA2EN,IAAAA,MAAM,EAAE,EAAnF;AAAuFC,IAAAA,MAAM,EAAE;AAA/F,GAAD,CAAlC;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACZqC,IAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACAA,IAAAA,QAAQ,CAAC,IAAD,EAAOE,KAAK,CAAC9B,EAAb,EAAiB,IAAjB,CAAR;AACA4B,IAAAA,QAAQ,CAAC,IAAD,EAAOE,KAAK,CAACrB,QAAb,EAAuB,UAAvB,CAAR;AACH,GAJQ,EAIN,CAACqB,KAAD,CAJM,CAAT;AAMA,sBACI;AAAI,IAAA,KAAK,EAAE;AAAE,yBAAmB;AAArB,KAAX;AAAA,4BAEI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEA,KAAK,CAAC9B,EAA1B,CAA6B;AAA7B;AACA,QAAA,QAAQ,EAAGkB,CAAD,IAAO;AACb,cAAInB,GAAG,GAAG,EAAE,GAAG+B;AAAL,WAAV;AACA/B,UAAAA,GAAG,CAACC,EAAJ,GAASkB,CAAC,CAACG,MAAF,CAASd,KAAlB;AACAwB,UAAAA,QAAQ,CAAC,EAAE,GAAGhC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eASI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE+B,KAAK,CAAC7B,IAA1B,CAA+B;AAA/B;AACA,QAAA,QAAQ,EAAGiB,CAAD,IAAO;AACb,cAAInB,GAAG,GAAG,EAAE,GAAG+B;AAAL,WAAV;AACA/B,UAAAA,GAAG,CAACE,IAAJ,GAAWiB,CAAC,CAACG,MAAF,CAASd,KAApB;AACAwB,UAAAA,QAAQ,CAAC,EAAE,GAAGhC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YATJ,eAgBI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE+B,KAAK,CAAC5B,WAA1B,CAAsC;AAAtC;AACA,QAAA,QAAQ,EAAGgB,CAAD,IAAO;AACb,cAAInB,GAAG,GAAG,EAAE,GAAG+B;AAAL,WAAV;AACA/B,UAAAA,GAAG,CAACG,WAAJ,GAAkBgB,CAAC,CAACG,MAAF,CAASd,KAA3B;AACAwB,UAAAA,QAAQ,CAAC,EAAE,GAAGhC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAuBI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE+B,KAAK,CAACrB,QAA1B,CAAmC;AAAnC;AACA,QAAA,QAAQ,EAAGS,CAAD,IAAO;AACb,cAAIc,KAAK,CAACd,CAAC,CAACG,MAAF,CAASd,KAAV,CAAL,IAAyBW,CAAC,CAACG,MAAF,CAASd,KAAT,GAAiB,CAA9C,EACI;AACJ,cAAIR,GAAG,GAAG,EAAE,GAAG+B;AAAL,WAAV;AACA/B,UAAAA,GAAG,CAACU,QAAJ,GAAeS,CAAC,CAACG,MAAF,CAASd,KAAxB;AACAwB,UAAAA,QAAQ,CAAC,EAAE,GAAGhC;AAAL,WAAD,CAAR;AACH;AAPD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAvBJ,eAgCI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE+B,KAAK,CAAC3B,MAA1B,CAAiC;AAAjC;AACA,QAAA,QAAQ,EAAGe,CAAD,IAAO;AACb,cAAInB,GAAG,GAAG,EAAE,GAAG+B;AAAL,WAAV;AACA/B,UAAAA,GAAG,CAACI,MAAJ,GAAae,CAAC,CAACG,MAAF,CAASd,KAAtB;AACAwB,UAAAA,QAAQ,CAAC,EAAE,GAAGhC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAhCJ,eAuCI;AAAA,6BAAI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE+B,KAAK,CAAC1B,MAA1B,CAAiC;AAAjC;AACA,QAAA,QAAQ,EAAGc,CAAD,IAAO;AACb,cAAInB,GAAG,GAAG,EAAE,GAAG+B;AAAL,WAAV;AACA/B,UAAAA,GAAG,CAACK,MAAJ,GAAac,CAAC,CAACG,MAAF,CAASd,KAAtB;AACAwB,UAAAA,QAAQ,CAAC,EAAE,GAAGhC;AAAL,WAAD,CAAR;AACH;AALD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAvCJ,EA8CK8B,MAAM,gBAAE;AAAA,6BAAI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA,MAAM,CAACI,IAAP,CAAY,IAAZ,EAAkBT,KAAlB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAF,gBAAmE,qCA9C9E;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkDH,CA5DM,C,CA8DP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAzHaG,G;;KAAAA,G","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n//import image from './Images/addStock.svg';\r\n\r\nconst initialState = {\r\n    responsable: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [],//Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n    materialsData: []//Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    componentDidMount() {\r\n    //TODO: Debe darle valor a materialData, que será una lista de objetos con id, nombre, descripción, peso por unidad y metro por unidad. De no poseer alguno de los últimos dos datos, debe mostrar 0\r\n    let aux = [{id: 15, name: 'Cierre', description: 'Marca SanCor', weight: 0.5, meters: 0},\r\n               {id: 4, name: 'Pasador', description: 'Amarillo', weight: 3, meters: 1},\r\n               {id: 6, name: 'Cable', description: 'De cobre', weight: 0.5, meters: 1.5}]  \r\n    this.setState({ materialsData: aux });\r\n    }\r\n\r\n    addMaterial(value, property) {\r\n        let aux = {id: '', quantity: ''};\r\n        aux[property] = value;\r\n        this.setState({materials: [...this.state.materials, aux]})//Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        let materials = this.state.materials;\r\n        materials.splice(i, 1);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(i, value, property) {\r\n        let materials = this.state.materials;\r\n        materials[i][property] = value;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//TODO:\r\n        console.log('hi');\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsable\" onChange={(event) => {\r\n                    this.setState({ responsable: event.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Nombre</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.materials? null :\r\n                        this.state.materials.map((material, index) =>\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle.\r\n                        <Row material={material} index={index} remove={i => this.removeMaterial(i)} materialsData={this.state.materialsData}\r\n                            onChange={(e, property) => this.changeMaterial(index, e, property)} />\r\n                        )}\r\n                        <Row material={{id: '', quantity: ''}} onChange={(value, property) => {\r\n                            console.log('hi');\r\n                            this.addMaterial(value, property);\r\n                        }} materialsData={this.state.materialsData} />\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            //null\r\n            <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                className={'title'} /*logo={image}*/ title={'Añadir stock'} post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ material, index, onChange, remove, materialsData }) => {\r\n\r\n    const [input, setInput] = useState({ id: material.id, name: '', description: '', quantity: material.quantity, weight: '', meters: '' });\r\n\r\n    useEffect(() => {\r\n        console.log(onChange);\r\n        onChange(this, input.id, 'id');\r\n        onChange(this, input.quantity, 'quantity');\r\n    }, [input]);\r\n\r\n    return (\r\n        <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n            \r\n            <td><FormControl value={input.id}//ID\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.id = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.name}//Nombre\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.name = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.description}//Descripción\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.description = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.quantity}//Cantidad\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.quantity = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.weight}//Peso\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.weight = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.meters}//Metros\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.meters = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            {remove? <td><Button onClick={remove.bind(this, index)}>X</Button></td> : <></>}\r\n        </tr>\r\n    );\r\n}\r\n\r\n// import React from \"react\";\r\n// import './styles.css'\r\n\r\n// class App extends React.Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.state = { \r\n//        materials: [{ name: \"\", email : \"\" }]\r\n//      };\r\n//     this.handleSubmit = this.handleSubmit.bind(this)\r\n//   }\r\n  \r\n//   handleChange(i, e) {\r\n//     let materials = this.state.materials;\r\n//     materials[i][e.target.name] = e.target.value;\r\n//     this.setState({ materials });\r\n//   }\r\n\r\n//   addFormFields() {\r\n//     this.setState(({\r\n//       materials: [...this.state.materials, { name: \"\", email: \"\" }]\r\n//     }))\r\n//   }\r\n\r\n//   removeFormFields(i) {\r\n//     let materials = this.state.materials;\r\n//     materials.splice(i, 1);\r\n//     this.setState({ materials });\r\n//   }\r\n\r\n//   handleSubmit(event) {\r\n//     event.preventDefault();\r\n//     alert(JSON.stringify(this.state.materials));\r\n//   }\r\n\r\n//   render() {\r\n\r\n//     return (\r\n//         <form  onSubmit={this.handleSubmit}>\r\n//           {this.state.materials.map((element, index) => (\r\n//             <div className=\"form-inline\" key={index}>\r\n//               <label>Name</label>\r\n//               <input type=\"text\" name=\"name\" value={element.name || \"\"} onChange={e => this.handleChange(index, e)} />\r\n//               <label>Email</label>\r\n//               <input type=\"text\" name=\"email\" value={element.email || \"\"} onChange={e => this.handleChange(index, e)} />\r\n//               {\r\n//                 index ? \r\n//                   <button type=\"button\"  className=\"button remove\" onClick={() => this.removeFormFields(index)}>Remove</button> \r\n//                 : null\r\n//               }\r\n//             </div>\r\n//           ))}\r\n//           <div className=\"button-section\">\r\n//               <button className=\"button add\" type=\"button\" onClick={() => this.addFormFields()}>Add</button>\r\n//               <button className=\"button submit\" type=\"submit\">Submit</button>\r\n//           </div>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}