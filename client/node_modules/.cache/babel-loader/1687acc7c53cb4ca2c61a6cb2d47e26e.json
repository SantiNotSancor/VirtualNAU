{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport './modal.css';\nexport class ModalController extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      showModal: false //True si y sólo si se debe mostrar el modal\n\n    };\n\n    this.showModal = () => {\n      //A llamar cuando se quiere mostrar el modal\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      //A llamar cuando se quiere esconder el modal\n      this.setState({\n        showModal: false\n      });\n    };\n  }\n\n}\nexport class ModalPrototype extends Component {\n  //Debe ser invocada para crear el modal. Ver props \n  render() {// return (\n    //     <Modal show={this.props.show} dialogClassName=\"modal-dialog\">\n    //         <Modal.Header >\n    //             <Modal.Title>{this.props.title}</Modal.Title>\n    //         </Modal.Header>\n    //         <Modal.Body >\n    //             {this.props.children}\n    //         </Modal.Body>\n    //         <Modal.Footer >\n    //             {(this.props.footer && this.props.footer.show)?\n    //             <Button variant=\"primary\" type=\"submit\" onClick={() => {\n    //                 this.props.footer.func();\n    //                 //this.props.post();\n    //             }}>{this.props.footer.label}</Button> : <></>}\n    //             <Button variant=\"primary\" type=\"submit\" onClick={() => {\n    //                 this.props.post();//Se cierra desde post si todo está en orden\n    //             }}>Confirmar</Button>\n    //             <Button variant=\"secundary\" onClick={this.props.handleClose}>Cancelar</Button>\n    //         </Modal.Footer>\n    //     </Modal >\n    // );\n  }\n\n}\nModalPrototype.propTypes = {\n  post: PropTypes.func.isRequired,\n  //Función que enviará al back-end los datos del form\n  title: PropTypes.string.isRequired,\n  //String que se mostrará como título del modal\n  show: PropTypes.bool.isRequired,\n  //Boolean que especifica si se debe o no mostrar el modal\n  handleClose: PropTypes.func.isRequired,\n  //Función que cerrará el modal al presionar el botón\n  children: PropTypes.element.isRequired,\n  //Hijo que aparecerá en el modal\n  footer: PropTypes.object\n};","map":{"version":3,"sources":["C:/Users/santi/OneDrive/Escritorio/Proyecto 2022/VirtualNAU/client/src/modal.js"],"names":["React","Component","PropTypes","Modal","Button","ModalController","state","showModal","setState","hideModal","ModalPrototype","render","propTypes","post","func","isRequired","title","string","show","bool","handleClose","children","element","footer","object"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,aAAP;AAEA,OAAO,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAE3CK,KAF2C,GAEnC;AACJC,MAAAA,SAAS,EAAE,KADP,CACY;;AADZ,KAFmC;;AAAA,SAM3CA,SAN2C,GAM/B,MAAM;AAAC;AACf,WAAKC,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAR0C;;AAAA,SAU3CE,SAV2C,GAU/B,MAAM;AAAC;AACf,WAAKD,QAAL,CAAc;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAZ0C;AAAA;;AAAA;AAgB/C,OAAO,MAAMG,cAAN,SAA6BT,SAA7B,CAAuC;AAAC;AAE3CU,EAAAA,MAAM,GAAG,CACL;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AA1ByC;AA6B9CD,cAAc,CAACE,SAAf,GAA2B;AACvBC,EAAAA,IAAI,EAAEX,SAAS,CAACY,IAAV,CAAeC,UADE;AACS;AAChCC,EAAAA,KAAK,EAAEd,SAAS,CAACe,MAAV,CAAiBF,UAFD;AAEY;AACnCG,EAAAA,IAAI,EAAEhB,SAAS,CAACiB,IAAV,CAAeJ,UAHE;AAGS;AAChCK,EAAAA,WAAW,EAAElB,SAAS,CAACY,IAAV,CAAeC,UAJL;AAIgB;AACvCM,EAAAA,QAAQ,EAAEnB,SAAS,CAACoB,OAAV,CAAkBP,UALL;AAKgB;AACvCQ,EAAAA,MAAM,EAAErB,SAAS,CAACsB;AANK,CAA3B","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './modal.css'\r\n\r\nexport class ModalController extends Component {//Debe ser extendida por el elemento que va a abrir el modal\r\n\r\n    state = {\r\n        showModal: false//True si y sólo si se debe mostrar el modal\r\n    }\r\n\r\n    showModal = () => {//A llamar cuando se quiere mostrar el modal\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    hideModal = () => {//A llamar cuando se quiere esconder el modal\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n}\r\n\r\nexport class ModalPrototype extends Component {//Debe ser invocada para crear el modal. Ver props \r\n\r\n    render() {\r\n        // return (\r\n        //     <Modal show={this.props.show} dialogClassName=\"modal-dialog\">\r\n        //         <Modal.Header >\r\n        //             <Modal.Title>{this.props.title}</Modal.Title>\r\n        //         </Modal.Header>\r\n\r\n        //         <Modal.Body >\r\n        //             {this.props.children}\r\n        //         </Modal.Body>\r\n\r\n        //         <Modal.Footer >\r\n        //             {(this.props.footer && this.props.footer.show)?\r\n        //             <Button variant=\"primary\" type=\"submit\" onClick={() => {\r\n        //                 this.props.footer.func();\r\n        //                 //this.props.post();\r\n        //             }}>{this.props.footer.label}</Button> : <></>}\r\n        //             <Button variant=\"primary\" type=\"submit\" onClick={() => {\r\n        //                 this.props.post();//Se cierra desde post si todo está en orden\r\n        //             }}>Confirmar</Button>\r\n        //             <Button variant=\"secundary\" onClick={this.props.handleClose}>Cancelar</Button>\r\n        //         </Modal.Footer>\r\n        //     </Modal >\r\n        // );\r\n    }\r\n}\r\n\r\nModalPrototype.propTypes = {\r\n    post: PropTypes.func.isRequired,//Función que enviará al back-end los datos del form\r\n    title: PropTypes.string.isRequired,//String que se mostrará como título del modal\r\n    show: PropTypes.bool.isRequired,//Boolean que especifica si se debe o no mostrar el modal\r\n    handleClose: PropTypes.func.isRequired,//Función que cerrará el modal al presionar el botón\r\n    children: PropTypes.element.isRequired,//Hijo que aparecerá en el modal\r\n    footer: PropTypes.object\r\n}"]},"metadata":{},"sourceType":"module"}