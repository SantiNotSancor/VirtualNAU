{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Escritorio\\\\fabrica\\\\client\\\\src\\\\textInputs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Popover from 'react-bootstrap/Popover';\nimport Axios from 'axios';\nimport './autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Request = _ref => {\n  let {\n    onChange,\n    toShow,\n    label\n  } = _ref;\n  //Pedirá un dato con un input tipo text\n  let placeholder,\n      auxStorage = label;\n\n  switch (toShow) {\n    case 'name':\n      label = 'Nombre del taller';\n      placeholder = 'Ingrese el nombre del/la tallerista';\n      break;\n\n    case 'article':\n      label = 'Número de artículo';\n      placeholder = 'Ingrese el código único del artículo';\n      break;\n\n    case 'quantityArticle':\n      label = 'Cantidad asignada';\n      placeholder = 'Ingrese la cantidad de artículos';\n      break;\n\n    case 'task':\n      label = 'Número de tarea';\n      placeholder = 'Ingrese el número de tarea';\n      break;\n\n    case 'money':\n      label = 'Monto';\n      placeholder = 'Ingrese el monto a pagar';\n      break;\n\n    case 'price':\n      label = 'Precio';\n      placeholder = 'Ingrese el precio por unidad';\n      break;\n\n    case 'description':\n      label = 'Descripción';\n      placeholder = 'Ingrese una breve descripción del artículo';\n      break;\n\n    case 'regName':\n      label = 'Nombre del taller';\n      placeholder = 'Ingrese el nombre del/la tallerista';\n      break;\n\n    default:\n      console.log(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\n  }\n\n  label = auxStorage ? auxStorage : label;\n  placeholder += '…';\n  return toShow === 'name' ? /*#__PURE__*/_jsxDEV(NameRequest, {\n    label: label,\n    placeholder: placeholder,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 35\n  }, this) : toShow === 'article' ? /*#__PURE__*/_jsxDEV(ArticleRequest, {\n    label: label,\n    placeholder: placeholder,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 35\n  }, this) : /*#__PURE__*/_jsxDEV(Form.Group, {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [toShow === 'money' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \"$\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(FormControl, {\n        type: \"text\",\n        placeholder: placeholder,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), toShow === 'money' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \".00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_c = Request;\nRequest.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  //Función a ejecutar cuando se modifica el input\n  toShow: PropTypes.string.isRequired,\n  label: PropTypes.string\n};\nexport const NameRequest = _ref2 => {\n  _s();\n\n  let {\n    label,\n    placeholder,\n    onChange\n  } = _ref2;\n  const [list, setList] = useState([]);\n  let ref = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    getList();\n    console.log(\"HI\");\n    return () => {\n      setList([]);\n    };\n  }, []);\n\n  const getList = () => {\n    Axios.get('http://localhost:3001/getNames').then(response => {\n      setList(response.data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      suggestions: list.map(element => {\n        return element.name;\n      }),\n      ref: ref,\n      onChange: onChange,\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NameRequest, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c2 = NameRequest;\nNameRequest.propTypes = {\n  label: PropTypes.string.isRequired\n};\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n      this.props.onChange(e.currentTarget.value);\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n      this.props.onChange(e.currentTarget.innerText);\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions\",\n          children: filteredSuggestions.map((suggestion, index) => {\n            let className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: suggestion\n            }, suggestion, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this);\n      } else {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-suggestions\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"El taller ingresado no existe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        placeholder: this.props.placeholder,\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), suggestionsListComponent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array).isRequired,\n  onChange: PropTypes.func.isRequired\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Request\");\n$RefreshReg$(_c2, \"NameRequest\");","map":{"version":3,"sources":["C:/Users/PC/OneDrive/Escritorio/fabrica/client/src/textInputs.js"],"names":["React","useState","useEffect","Component","Fragment","PropTypes","Form","InputGroup","FormControl","Popover","Axios","Request","onChange","toShow","label","placeholder","auxStorage","console","log","propTypes","func","isRequired","string","NameRequest","list","setList","ref","createRef","getList","get","then","response","data","map","element","name","Autocomplete","constructor","props","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","state","render","onKeyDown","suggestionsListComponent","length","index","className","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport Axios from 'axios';\r\nimport './autocomplete.css';\r\n\r\nexport const Request = ({ onChange, toShow, label }) => {//Pedirá un dato con un input tipo text\r\n\r\n    let placeholder, auxStorage = label;\r\n\r\n    switch (toShow) {\r\n        case 'name':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            break;\r\n        case 'task':\r\n            label = 'Número de tarea';\r\n            placeholder = 'Ingrese el número de tarea';\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            break;\r\n        case 'price':\r\n            label = 'Precio';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        case 'regName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        default:\r\n            console.log(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n    label = (auxStorage) ? auxStorage : label;\r\n    placeholder += '…';\r\n    return ((toShow === 'name') ? <NameRequest label={label} placeholder={placeholder} onChange={onChange} /> :\r\n        ((toShow === 'article') ? <ArticleRequest label={label} placeholder={placeholder} onChange={onChange} /> :\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <InputGroup>\r\n                {(toShow === 'money') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                <FormControl type=\"text\" placeholder={placeholder} onChange={onChange} />\r\n                {(toShow === 'money') ? <InputGroup.Text>.00</InputGroup.Text> : <></>}\r\n            </InputGroup>\r\n        </Form.Group>)\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string\r\n}\r\n\r\nexport const NameRequest = ({ label, placeholder, onChange }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n    let ref = React.createRef();\r\n    useEffect(() => {\r\n        getList();\r\n        console.log(\"HI\");\r\n        return () => {\r\n            setList([]);\r\n        };\r\n    }, []);\r\n    const getList = () => {\r\n        Axios.get('http://localhost:3001/getNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n    }\r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })}\r\n                ref={ref} onChange={onChange} placeholder={placeholder} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = {\r\n    label: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired,\r\n        onChange: PropTypes.func.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        suggestions: []\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\"\r\n        };\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput: e.currentTarget.value\r\n        });\r\n        this.props.onChange(e.currentTarget.value);\r\n    };\r\n\r\n    onClick = e => {\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput: e.currentTarget.innerText\r\n        });\r\n        this.props.onChange(e.currentTarget.innerText);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            onKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion) {\r\n                                className = \"suggestion-active\";\r\n                            }\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>El taller ingresado no existe</em>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <FormControl\r\n                    placeholder={this.props.placeholder}\r\n                    type=\"text\"\r\n                    onChange={onChange}\r\n                    onKeyDown={onKeyDown}\r\n                    value={userInput}\r\n                />\r\n                {suggestionsListComponent}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}