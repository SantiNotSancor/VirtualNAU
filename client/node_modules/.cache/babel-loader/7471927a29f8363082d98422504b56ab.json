{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lab2\\\\Documents\\\\GitHub\\\\VirtualNAU\\\\client\\\\src\\\\Vendor\\\\addStock.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { ModalOpener } from '../modalOpener';\nimport { Request, TaskRequest } from '../textInputs';\nimport Axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment'; //import image from './Images/addStock.svg';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  responsible: '',\n  date: moment(new Date()).format(\"DD/MM/YYYY\"),\n  materials: [{\n    id: '',\n    quantity: ''\n  }] //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\n\n};\nexport class AddStock extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialState;\n  }\n\n  addMaterial() {\n    this.setState({\n      materials: [...this.state.materials, {\n        id: '',\n        quantity: ''\n      }]\n    });\n  }\n\n  removeMaterial(i) {\n    let materials = this.state.materials;\n    materials.splice(i, 1);\n    this.setState({\n      materials\n    });\n  }\n\n  changeMaterial(index, e, property) {\n    let materials = this.state.materials;\n    materials[index][property] = e.target.value;\n    this.setState({\n      materials\n    });\n  }\n\n  post() {\n    //TODO: Enviar a la base de datos\n    console.log('hi');\n  }\n\n  myForm() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(Request, {\n        toShow: \"responsible\",\n        onChange: event => {\n          this.setState({\n            responsible: event.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        id: \"taskTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nombre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Descripci\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cantidad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Peso\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Metros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.materials ? null : this.state.materials.map((material, index) => {\n            //Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\n            //ya ingresada (en caso de una modificación), reemplazarle. En caso de eliminarse una fila, aparecerá la cantidad como -1\n\n            /*#__PURE__*/\n            _jsxDEV(Row, {\n              onRemove: this.removeMaterial(index),\n              onChange: (e, property) => {\n                this.changeMaterial(index, e, property);\n                this.addMaterial();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //null\n      _jsxDEV(ModalOpener, {\n        buttonText: \"A\\xF1adir stock\",\n        handleClose: this.resetState,\n        className: 'title'\n        /*logo={image}*/\n        ,\n        title: 'Añadir stock',\n        post: this.post,\n        children: this.myForm()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}\nexport const Row = _ref => {\n  _s();\n\n  let {\n    onChange,\n    onRemove\n  } = _ref;\n  const [input, setInput] = useState({\n    id: '',\n    name: '',\n    description: '',\n    quantity: '',\n    weight: '',\n    meters: ''\n  });\n  useEffect(() => {\n    onChange(input.id, 'id');\n    onChange(input.id, 'quantity');\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    style: {\n      'backgroundColor': 'green'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.id //ID\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.id = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.name //Nombre\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.name = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.description //Descripción\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.description = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.quantity //Cantidad\n        ,\n        onChange: e => {\n          if (isNaN(e.target.value) || e.target.value < 0) return;\n          let aux = { ...input\n          };\n          aux.quantity = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.weight //Peso\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.weight = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.meters //Metros\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.meters = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onRemove,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}; // import React from \"react\";\n// import './styles.css'\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = { \n//        materials: [{ name: \"\", email : \"\" }]\n//      };\n//     this.handleSubmit = this.handleSubmit.bind(this)\n//   }\n//   handleChange(i, e) {\n//     let materials = this.state.materials;\n//     materials[i][e.target.name] = e.target.value;\n//     this.setState({ materials });\n//   }\n//   addFormFields() {\n//     this.setState(({\n//       materials: [...this.state.materials, { name: \"\", email: \"\" }]\n//     }))\n//   }\n//   removeFormFields(i) {\n//     let materials = this.state.materials;\n//     materials.splice(i, 1);\n//     this.setState({ materials });\n//   }\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     alert(JSON.stringify(this.state.materials));\n//   }\n//   render() {\n//     return (\n//         <form  onSubmit={this.handleSubmit}>\n//           {this.state.materials.map((element, index) => (\n//             <div className=\"form-inline\" key={index}>\n//               <label>Name</label>\n//               <input type=\"text\" name=\"name\" value={element.name || \"\"} onChange={e => this.handleChange(index, e)} />\n//               <label>Email</label>\n//               <input type=\"text\" name=\"email\" value={element.email || \"\"} onChange={e => this.handleChange(index, e)} />\n//               {\n//                 index ? \n//                   <button type=\"button\"  className=\"button remove\" onClick={() => this.removeFormFields(index)}>Remove</button> \n//                 : null\n//               }\n//             </div>\n//           ))}\n//           <div className=\"button-section\">\n//               <button className=\"button add\" type=\"button\" onClick={() => this.addFormFields()}>Add</button>\n//               <button className=\"button submit\" type=\"submit\">Submit</button>\n//           </div>\n//       </form>\n//     );\n//   }\n// }\n\n_s(Row, \"odNZ6nlR6OVgotk06GiWhr9vEhQ=\");\n\n_c = Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/Lab2/Documents/GitHub/VirtualNAU/client/src/Vendor/addStock.js"],"names":["React","Component","useEffect","useState","ModalOpener","Request","TaskRequest","Axios","Form","FormControl","Button","Table","moment","initialState","responsible","date","Date","format","materials","id","quantity","AddStock","state","addMaterial","setState","removeMaterial","i","splice","changeMaterial","index","e","property","target","value","post","console","log","myForm","preventDefault","event","map","material","render","resetState","Row","onChange","onRemove","input","setInput","name","description","weight","meters","aux","isNaN"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n//import image from './Images/addStock.svg';\r\n\r\nconst initialState = {\r\n    responsible: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [{id: '', quantity: ''}]//Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    addMaterial() {\r\n        this.setState({materials: [...this.state.materials, { id: '', quantity: '' }]})\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        let materials = this.state.materials;\r\n        materials.splice(i, 1);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(index, e, property) {\r\n        let materials = this.state.materials;\r\n        materials[index][property] = e.target.value;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//TODO: Enviar a la base de datos\r\n        console.log('hi');\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsible\" onChange={(event) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Nombre</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.materials? null :\r\n                        this.state.materials.map((material, index) => {\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle. En caso de eliminarse una fila, aparecerá la cantidad como -1\r\n                        <Row onRemove={this.removeMaterial(index)} onChange={(e, property) => {\r\n                            this.changeMaterial(index, e, property);\r\n                            this.addMaterial();\r\n                        }} /> })\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            //null\r\n            <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                className={'title'} /*logo={image}*/ title={'Añadir stock'} post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ onChange, onRemove }) => {\r\n\r\n    const [input, setInput] = useState({ id: '', name: '', description: '', quantity: '', weight: '', meters: '' });\r\n\r\n    useEffect(() => {\r\n        onChange(input.id, 'id');\r\n        onChange(input.id, 'quantity');\r\n    }, [input]);\r\n\r\n    return (\r\n        <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n            <td><FormControl value={input.id}//ID\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.id = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.name}//Nombre\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.name = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.description}//Descripción\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.description = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.quantity}//Cantidad\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.quantity = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.weight}//Peso\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.weight = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.meters}//Metros\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.meters = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><Button onClick={onRemove}>X</Button></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\n// import React from \"react\";\r\n// import './styles.css'\r\n\r\n// class App extends React.Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.state = { \r\n//        materials: [{ name: \"\", email : \"\" }]\r\n//      };\r\n//     this.handleSubmit = this.handleSubmit.bind(this)\r\n//   }\r\n  \r\n//   handleChange(i, e) {\r\n//     let materials = this.state.materials;\r\n//     materials[i][e.target.name] = e.target.value;\r\n//     this.setState({ materials });\r\n//   }\r\n\r\n//   addFormFields() {\r\n//     this.setState(({\r\n//       materials: [...this.state.materials, { name: \"\", email: \"\" }]\r\n//     }))\r\n//   }\r\n\r\n//   removeFormFields(i) {\r\n//     let materials = this.state.materials;\r\n//     materials.splice(i, 1);\r\n//     this.setState({ materials });\r\n//   }\r\n\r\n//   handleSubmit(event) {\r\n//     event.preventDefault();\r\n//     alert(JSON.stringify(this.state.materials));\r\n//   }\r\n\r\n//   render() {\r\n\r\n//     return (\r\n//         <form  onSubmit={this.handleSubmit}>\r\n//           {this.state.materials.map((element, index) => (\r\n//             <div className=\"form-inline\" key={index}>\r\n//               <label>Name</label>\r\n//               <input type=\"text\" name=\"name\" value={element.name || \"\"} onChange={e => this.handleChange(index, e)} />\r\n//               <label>Email</label>\r\n//               <input type=\"text\" name=\"email\" value={element.email || \"\"} onChange={e => this.handleChange(index, e)} />\r\n//               {\r\n//                 index ? \r\n//                   <button type=\"button\"  className=\"button remove\" onClick={() => this.removeFormFields(index)}>Remove</button> \r\n//                 : null\r\n//               }\r\n//             </div>\r\n//           ))}\r\n//           <div className=\"button-section\">\r\n//               <button className=\"button add\" type=\"button\" onClick={() => this.addFormFields()}>Add</button>\r\n//               <button className=\"button submit\" type=\"submit\">Submit</button>\r\n//           </div>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}