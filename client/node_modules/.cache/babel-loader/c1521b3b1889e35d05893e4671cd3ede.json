{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lab2\\\\Documents\\\\GitHub\\\\VirtualNAU\\\\client\\\\src\\\\Vendor\\\\addStock.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { ModalOpener } from '../modalOpener';\nimport { Request, TaskRequest } from '../textInputs';\nimport Axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment'; //import image from './Images/addStock.svg';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  responsable: '',\n  date: moment(new Date()).format(\"DD/MM/YYYY\"),\n  material: [] //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\n\n};\nexport class AddStock extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialState;\n  }\n\n  myForm() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(Request, {\n        toShow: \"responsable\",\n        onChange: event => {\n          this.setState({\n            name: event\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        id: \"taskTable\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nombre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Descripci\\xF3n\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cantidad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Peso\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Metros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            onChange: row => {\n              //Debería tomar la fila dada por Input y agregarsela a la lista de\n              //materias primas que posee el componente. De estar esta ya ingresada\n              //(en caso de una modificación), reemplazarle.\n              //En caso de eliminarse una fila, aparecerá la cantidad como -1\n              let alreadyListed = false,\n                  aux = { ...this.state.material\n              },\n                  i = 0;\n              console.log(this.state.material);\n              if (aux) aux.map(listedRow => {\n                if (!alreadyListed) i++;\n                if (listedRow.id === row.id) alreadyListed = true;\n              });\n              if (alreadyListed) {\n                if (row.quantity !== -1) aux[i] = row;else aux.splice(i, 1);\n              } else aux.push(row);\n              this.setState({\n                material: aux\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ModalOpener, {\n      buttonText: \"A\\xF1adir stock\",\n      handleClose: this.resetState,\n      className: 'title'\n      /*logo={image}*/\n      ,\n      title: 'Añadir stock',\n      post: this.post,\n      children: this.myForm()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const Input = _ref => {\n  _s();\n\n  let {\n    onChange\n  } = _ref;\n  const [input, setInput] = useState({\n    id: '',\n    name: '',\n    description: '',\n    quantity: '',\n    weight: '',\n    meters: ''\n  });\n  useEffect(() => onChange(input), [input]);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    style: {\n      'backgroundColor': 'green'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.id //ID\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.id = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.name //Nombre\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.name = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.description //Descripción\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.description = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.quantity //Cantidad\n        ,\n        onChange: e => {\n          if (isNaN(e.target.value) || e.target.value < 0) return;\n          let aux = { ...input\n          };\n          aux.quantity = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.weight //Peso\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.weight = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        value: input.meters //Metros\n        ,\n        onChange: e => {\n          let aux = { ...input\n          };\n          aux.meters = e.target.value;\n          setInput({ ...aux\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          let aux = { ...input\n          };\n          aux.quantity = -1;\n          setInput({ ...aux\n          }); //Eliminar fila\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Input, \"odNZ6nlR6OVgotk06GiWhr9vEhQ=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Lab2/Documents/GitHub/VirtualNAU/client/src/Vendor/addStock.js"],"names":["React","Component","useEffect","useState","ModalOpener","Request","TaskRequest","Axios","Form","FormControl","Button","Table","moment","initialState","responsable","date","Date","format","material","AddStock","state","myForm","e","preventDefault","event","setState","name","row","alreadyListed","aux","i","console","log","map","listedRow","id","quantity","splice","push","render","resetState","post","Input","onChange","input","setInput","description","weight","meters","target","value","isNaN"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n//import image from './Images/addStock.svg';\r\n\r\nconst initialState = {\r\n    responsable: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    material: []\r\n    //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsable\" onChange={(event) => {\r\n                    this.setState({ name: event });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Nombre</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <Input onChange={(row) => {//Debería tomar la fila dada por Input y agregarsela a la lista de\r\n                                                   //materias primas que posee el componente. De estar esta ya ingresada\r\n                                                   //(en caso de una modificación), reemplazarle.\r\n                                                   //En caso de eliminarse una fila, aparecerá la cantidad como -1\r\n                            let alreadyListed = false , aux = { ...this.state.material }, i = 0;\r\n                            console.log(this.state.material);\r\n                            if(aux)\r\n                                aux.map((listedRow) => {\r\n                                    if(!alreadyListed) i++;\r\n                                    if(listedRow.id === row.id) alreadyListed = true;\r\n                                })\r\n                            if (alreadyListed)\r\n                                if(row.quantity !== -1)\r\n                                    aux[i] = row;\r\n                                else\r\n                                    aux.splice(i, 1);\r\n                            else\r\n                                aux.push(row);\r\n                            this.setState({ material: aux })}\r\n                            } />\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                className={'title'} /*logo={image}*/ title={'Añadir stock'} post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Input = ({ onChange }) => {\r\n\r\n    const [input, setInput] = useState({ id: '', name: '', description: '', quantity: '', weight: '', meters: '' });\r\n\r\n    useEffect(() => onChange(input), [input]);\r\n\r\n    return (\r\n        <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n            <td><FormControl value={input.id}//ID\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.id = e.target.value;\r\n                    setInput({ ...aux });}}/>\r\n            </td>\r\n            <td><FormControl value={input.name}//Nombre\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.name = e.target.value;\r\n                    setInput({ ...aux });}}/></td>\r\n            <td><FormControl value={input.description}//Descripción\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.description = e.target.value;\r\n                    setInput({ ...aux });}}/></td>\r\n            <td><FormControl value={input.quantity}//Cantidad\r\n                onChange={(e) => {\r\n                    if(isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.quantity = e.target.value;\r\n                    setInput({ ...aux });}}/></td>\r\n            <td><FormControl value={input.weight}//Peso\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.weight = e.target.value;\r\n                    setInput({ ...aux });}}/></td>\r\n            <td><FormControl value={input.meters}//Metros\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.meters = e.target.value;\r\n                    setInput({ ...aux });}}/></td>\r\n            <td><Button onClick={() => {\r\n                let aux = { ...input };\r\n                aux.quantity = -1;\r\n                setInput({ ...aux });\r\n                //Eliminar fila\r\n            }}>X</Button></td>\r\n        </tr>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}