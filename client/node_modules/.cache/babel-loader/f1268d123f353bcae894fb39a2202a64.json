{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\Escritorio\\\\fabrica\\\\client\\\\src\\\\textInputs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { Dropdown as BootstrapDropdown } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Request = _ref => {\n  let {\n    onChange,\n    toShow,\n    label\n  } = _ref;\n  //Pedirá un dato con un input tipo text\n  let placeholder,\n      auxStorage = label;\n\n  switch (toShow) {\n    case 'name':\n      label = 'Nombre del taller';\n      placeholder = 'Ingrese el nombre del/la tallerista';\n      break;\n\n    case 'article':\n      label = 'Número de artículo';\n      placeholder = 'Ingrese el código único del artículo';\n      break;\n\n    case 'quantityArticle':\n      label = 'Cantidad asignada';\n      placeholder = 'Ingrese la cantidad de artículos';\n      break;\n\n    case 'task':\n      label = 'Número de tarea';\n      placeholder = 'Ingrese el número de tarea';\n      break;\n\n    case 'money':\n      label = 'Monto';\n      placeholder = 'Ingrese el monto a pagar';\n      break;\n\n    case 'price':\n      label = 'Precio';\n      placeholder = 'Ingrese el precio por unidad';\n      break;\n\n    case 'description':\n      label = 'Descripción';\n      placeholder = 'Ingrese una breve descripción del artículo';\n      break;\n\n    default:\n      console.log(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\n  }\n\n  label = auxStorage ? auxStorage : label;\n  placeholder += '…';\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [toShow === 'money' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \"$\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(FormControl, {\n        type: \"text\",\n        placeholder: placeholder,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), toShow === 'money' ? /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n        children: \".00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_c = Request;\nRequest.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  //Función a ejecutar cuando se modifica el input\n  toShow: PropTypes.string.isRequired,\n  label: PropTypes.string\n};\n\nconst Dropdown = props => {\n  return /*#__PURE__*/_jsxDEV(BootstrapDropdown, {\n    children: [/*#__PURE__*/_jsxDEV(BootstrapDropdown.Toggle, {\n      variant: \"success\",\n      id: \"dropdown\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BootstrapDropdown.Menu, {\n      children: props.items.map((name, index) => /*#__PURE__*/_jsxDEV(BootstrapDropdown.Item, {\n        onClick: event => {\n          console.log(event.target.text);\n          props.setSelected(event.target.text);\n        },\n        value: name,\n        children: name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Dropdown;\n\nfunction Parent() {\n  _s();\n\n  const [typeFilter, setTypeFilter] = useState('');\n  const allItems = [{\n    name: 'Coffee Milk Tea',\n    type: 'Tea'\n  }, {\n    name: 'Earl Gray Milk Tea',\n    type: 'Tea'\n  }, {\n    name: 'Orange Juice',\n    type: 'Juice'\n  }, {\n    name: 'Wheatgrass Juice',\n    type: 'Juice'\n  }];\n  const itemsToShow = allItems.filter(item => {\n    if (typeFilter) {\n      return item.type === typeFilter;\n    }\n\n    return true;\n  }).map((item, i) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: item.name\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 20\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n      items: ['Tea', 'Juice'],\n      setSelected: setTypeFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: itemsToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Parent, \"xv0KGdVIVZ1xlHQPKgoNPl/EzH4=\");\n\n_c3 = Parent;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Request\");\n$RefreshReg$(_c2, \"Dropdown\");\n$RefreshReg$(_c3, \"Parent\");","map":{"version":3,"sources":["C:/Users/PC/OneDrive/Escritorio/fabrica/client/src/textInputs.js"],"names":["React","useState","PropTypes","Form","InputGroup","FormControl","Dropdown","BootstrapDropdown","Request","onChange","toShow","label","placeholder","auxStorage","console","log","propTypes","func","isRequired","string","props","items","map","name","index","event","target","text","setSelected","Parent","typeFilter","setTypeFilter","allItems","type","itemsToShow","filter","item","i"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { Dropdown as BootstrapDropdown } from 'react-bootstrap';\r\n\r\nexport const Request = ({ onChange, toShow, label }) => {//Pedirá un dato con un input tipo text\r\n\r\n    let placeholder, auxStorage = label;\r\n\r\n    switch (toShow) {\r\n        case 'name':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            break;\r\n        case 'task':\r\n            label = 'Número de tarea';\r\n            placeholder = 'Ingrese el número de tarea';\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            break;\r\n        case 'price':\r\n            label = 'Precio';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        default:\r\n            console.log(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n    label = (auxStorage) ? auxStorage : label;\r\n    placeholder += '…';\r\n\r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <InputGroup>\r\n                {(toShow === 'money') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                <FormControl type=\"text\" placeholder={placeholder} onChange={onChange} />\r\n                {(toShow === 'money') ? <InputGroup.Text>.00</InputGroup.Text> : <></>}\r\n            </InputGroup>\r\n        </Form.Group>\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string\r\n}\r\n\r\n\r\n\r\nconst Dropdown = (props) => {\r\n    return (\r\n        <BootstrapDropdown>\r\n            <BootstrapDropdown.Toggle variant='success' id='dropdown'>\r\n                <span>Selection</span>\r\n            </BootstrapDropdown.Toggle>\r\n\r\n            <BootstrapDropdown.Menu>\r\n                {props.items.map((name, index) => (\r\n                    <BootstrapDropdown.Item\r\n                        key={index}\r\n                        onClick={(event) => {\r\n                            console.log(event.target.text);\r\n                            props.setSelected(event.target.text);\r\n                        }}\r\n                        value={name}\r\n                    >\r\n                        {name}\r\n                    </BootstrapDropdown.Item>\r\n                ))}\r\n            </BootstrapDropdown.Menu>\r\n        </BootstrapDropdown>\r\n    );\r\n};\r\n\r\nfunction Parent() {\r\n    const [typeFilter, setTypeFilter] = useState('');\r\n\r\n    const allItems = [\r\n        { name: 'Coffee Milk Tea', type: 'Tea' },\r\n        { name: 'Earl Gray Milk Tea', type: 'Tea' },\r\n        { name: 'Orange Juice', type: 'Juice' },\r\n        { name: 'Wheatgrass Juice', type: 'Juice' },\r\n    ];\r\n\r\n    const itemsToShow = allItems\r\n        .filter((item) => {\r\n            if (typeFilter) {\r\n                return item.type === typeFilter;\r\n            }\r\n            return true;\r\n        })\r\n        .map((item, i) => {\r\n            return <li key={i}>{item.name}</li>;\r\n        });\r\n\r\n    return (\r\n        <div>\r\n            <Dropdown items={['Tea', 'Juice']} setSelected={setTypeFilter} />\r\n            <ol>{itemsToShow}</ol>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}