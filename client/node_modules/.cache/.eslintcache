[{"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js":"1","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\index.js":"2","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\index.js":"3","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js":"4","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js":"5","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js":"6","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js":"7","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js":"8","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js":"9","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js":"10","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js":"11","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js":"12","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js":"13","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js":"14","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js":"15","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\showData.js":"16"},{"size":350,"mtime":1661791496148,"results":"17","hashOfConfig":"18"},{"size":4726,"mtime":1661140739329,"results":"19","hashOfConfig":"18"},{"size":806,"mtime":1661140755536,"results":"20","hashOfConfig":"18"},{"size":1393,"mtime":1662659250815,"results":"21","hashOfConfig":"18"},{"size":5218,"mtime":1661185674158,"results":"22","hashOfConfig":"18"},{"size":565,"mtime":1661185691617,"results":"23","hashOfConfig":"18"},{"size":8815,"mtime":1661140755327,"results":"24","hashOfConfig":"18"},{"size":5525,"mtime":1661791353400,"results":"25","hashOfConfig":"18"},{"size":4671,"mtime":1662658647571,"results":"26","hashOfConfig":"18"},{"size":16378,"mtime":1660842118128,"results":"27","hashOfConfig":"18"},{"size":2099,"mtime":1660842118121,"results":"28","hashOfConfig":"18"},{"size":25429,"mtime":1661794389043,"results":"29","hashOfConfig":"18"},{"size":2859,"mtime":1662658090474,"results":"30","hashOfConfig":"18"},{"size":3444,"mtime":1662663657363,"results":"31","hashOfConfig":"18"},{"size":6908,"mtime":1660842118113,"results":"32","hashOfConfig":"18"},{"size":16716,"mtime":1661791353406,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qnao0",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"39"},"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js",["75","76"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\index.js",["77","78","79","80","81","82","83","84","85","86"],"import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n//import './index.css';\r\nimport logo from './images/nau.png';\r\nimport { \r\n    BrowserRouter as Router,\r\n    Routes,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Vendor from '../Vendor';\r\n\r\nconst initialState = {\r\n    password: \"\",\r\n    actualPassword: \"\",\r\n    user: \"\",\r\n    error: false\r\n};\r\n\r\nexport default class Login extends Component {\r\n    state = initialState;\r\n\r\n    componentDidUpdate(prevState){\r\n        if(prevState.password !== this.state.password || prevState.actualPassword !== this.state.actualPassword)\r\n            this.setState({ error: this.state.password !== this.state.actualPassword });\r\n    }\r\n\r\n    submit = () => {\r\n        console.log('Correcto');\r\n\r\n        //window.open(this.state.user,'_self');\r\n        // TODO: Debe existir una página para cada usuario que se llame vendor, production, workshops, expedition o manager\r\n    };\r\n\r\n    path(){\r\n        if (this.state.error)\r\n            return;\r\n        return '/' + this.state.user;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <style>body:{'background-color: #20154D; background-image: url(\"./images/wave.png\"); background-repeat: no-repeat; background-position: 2px 280px; width: 100%; height: 700px; font-family: \"SalmaAlfasans\", sans-serif;'}</style>\r\n                <img className=\"logo\" src={logo}/>\r\n                <h1></h1>\r\n                <div className=\"divLogin\">\r\n                    <h1 className=\"h1Login\">Iniciar sesión</h1>\r\n                    <h2 className=\"h2Login\">Seleccione tipo de usuario</h2>\r\n                    <select className=\"selectLogin\" name=\"Tipo de Usuario\" id=\"usuario\"\r\n                        onChange={(user) => {\r\n                            console.log(user.target.value)\r\n                            Axios.post('http://localhost:3307/getPassword', { user: user.target.value }).then((response) =>\r\n                                this.setState({ actualPassword: response.data[0].password, user: user.target.value }));\r\n                        }}>\r\n                        <option value=\"vendor\">Vendedor</option>\r\n                        <option value=\"production\">Producción</option>\r\n                        <option value=\"workshops\">Administración de talleres</option>\r\n                        <option value=\"expedition\">Expedición</option>\r\n                        <option value=\"manager\">Gerencia</option>\r\n                    </select>\r\n                    <input className=\"inputLogin\" type=\"password\" placeholder=\"Contraseña\" onChange={(e) => this.setState({ password: e.target.value })}></input>\r\n                    {this.state.error ? <p className=\"pLogin\">Contraseña incorrecta. Vuelva a intentarlo.</p> : null}\r\n                    <br/>\r\n                    <br/>\r\n                    {/* <Router>\r\n                        <Link to={this.path()}> */}\r\n                            <button className=\"buttonLogin\" onClick={\r\n                            (e) => {\r\n                                e.preventDefault();\r\n                                const error = this.state.password !== this.state.actualPassword;\r\n                                this.setState({ error });\r\n                                if (!error)\r\n                                    this.submit();\r\n                            }\r\n                        }>\r\n                                Ingresar\r\n                            </button>\r\n                        {/* </Link>\r\n                        <Routes>\r\n                            <Route path=\"/vendor\" element={<Vendor />} />\r\n                        </Routes>\r\n                    </Router> */}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        // return (\r\n        // <Router>\r\n        //     <div>\r\n        //     <nav>\r\n        //         <ul>\r\n        //         <li>\r\n        //             <Link to=\"/vendor\"><button>Home</button></Link>\r\n        //         </li>\r\n        //         <li>\r\n        //             <Link to=\"/about\">About</Link>\r\n        //         </li>\r\n        //         <li>\r\n        //             <Link to=\"/users\">Users</Link>\r\n        //         </li>\r\n        //         </ul>\r\n        //     </nav>\r\n        //     <Routes>\r\n        //         <Route path=\"/about\" element={<About />} />\r\n        //         <Route path=\"/users\" element={<Users/>} />\r\n        //         <Route path=\"/vendor\" element={<Vendor/>} />\r\n        //     </Routes>\r\n        //     </div>\r\n        // </Router>\r\n        // );\r\n    }\r\n  }\r\n  \r\n  function Home() {\r\n    return <p>Home</p>;\r\n  }\r\n  \r\n  function About() {\r\n    return <p>About</p>;\r\n  }\r\n  \r\n  function Users() {\r\n    return <p>Users</p>;\r\n  }",["87","88"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\index.js",["89"],"import React, { Component, useEffect } from 'react';\r\nimport {AddStock} from './addStock';\r\nimport {NewQuery} from './newQuery';\r\nimport { ViewQuery } from './viewQuery';\r\n// import {TickSuspended} from './tickSuspended';\r\n// import {TickToDos} from './tickToDos';\r\nimport './styles.css';\r\n\r\nexport default class Vendor extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <style>{'body {background-color: #20154D; background-Image: url(http://localhost:3000/images/waveVendor.png); background-repeat: no-repeat; background-size: contain;'}</style>\r\n        <h2 className='indexVendorh2'>¿Qué desea hacer?</h2>\r\n        <div><NewQuery/></div>\r\n        <div><AddStock/></div>\r\n        <div><ViewQuery/></div>\r\n        {/*<TickSuspended />\r\n        <TickToDo /> */}\r\n      </>\r\n    );\r\n  }\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js",["90","91","92","93","94"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js",["95","96"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport newQueryLogo from './Images/newQuery.gif';\r\nimport './styles.css';\r\n\r\nconst initialState = {\r\n    customerName : '',                                                              //Añade cliente  \r\n    observation : '',                                                           //Añade observaciones\r\n    query : [{id:'', description:'', quantity:'', colour:'', toDeliver:''}]     //Lista de objetos pedido\r\n}\r\n\r\nexport class NewQuery extends Component {\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (this.state.customerName === prevState.customerName)\r\n            return;\r\n        if (!this.state.customerName)\r\n            return;\r\n        Axios.get('http://localhost:3307/getCustomerNames', )\r\n    }\r\n\r\n    myForm = () => {\r\n        return(\r\n            <>\r\n                <Request toShow=\"customerName\" onChange={(e) => {\r\n                    this.setState({customerName: e.target.value});\r\n                }}/>\r\n                <Request toShow=\"observation\" onChange={(e) => {\r\n                    this.setState({observation: e.target.value});\r\n                }}/>\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Color</th>\r\n                            <th>Entregar</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.query.map ((order, index) => {\r\n                            return (!order ? null :\r\n                            <tr>\r\n                                <td><FormControl value={order.id}\r\n                                    onChange={(e) => {\r\n                                        if(isNaN(e.target.event));\r\n                                            return;\r\n                                        let aux = this.state.query;\r\n                                        aux[index].id = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                    />\r\n                                </td>\r\n                                <td><FormControl value={order.description}\r\n                                    onChange={(e) => {\r\n                                        let aux = this.state.query;\r\n                                        aux[index].description = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                    />\r\n                                </td>\r\n                                <td><FormControl value={order.quantity}\r\n                                    onChange={(e) => {\r\n                                        let aux = this.state.query;\r\n                                        aux[index].quantity = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                />\r\n                                </td>\r\n                                <td><FormControl value={order.colour}\r\n                                    onChange={(e) => {\r\n                                        let aux = this.state.query;\r\n                                        aux[index].colour = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                />\r\n                                </td>\r\n                                <td>\r\n                                    <Form.Check onChange={() => {\r\n                                       let aux = this.state.query;\r\n                                        aux[index].toDeliver = !this.state.query;\r\n                                        this.setState({query: aux})\r\n                                    }}/>\r\n                                </td>\r\n                            </tr>);\r\n                            //TODO: la creacion de nuevas filas\r\n                        }\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // post = () => {      TODO: el post de los datos al tocar el boton\r\n    //     return(\r\n\r\n    //     );\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Nuevo pedido' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor1' imageClassName='imgVendor' logo={newQueryLogo} title={'Nuevo pedido'} post={this.post} children={this.myForm()} />\r\n            \r\n        );\r\n    }\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js",["97","98","99","100","101"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport image from './Images/assignTask.gif';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport ReactToPrint from \"react-to-print\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    task: '',\r\n    deadline: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: 0,\r\n    //Auto-asignar\r\n    packages: '',\r\n    description: '',\r\n    quantity: '',\r\n    //Otros\r\n    error: true,\r\n    errors: [true, true, true, true, true, true],\r\n    selectedTask: null,\r\n    tasks: [],\r\n    title: 'Elegir Tarea',\r\n    showPrint: false\r\n};\r\n\r\nexport class AssignTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n    toPrint = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => {\r\n            aux = aux && (key === index) ? error : e;\r\n        });\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (this.state.selectedTask === prevState.selectedTask && this.state.name === prevState.name)\r\n            return;\r\n        if (!this.state.name || !this.state.selectedTask || this.state.price)\r\n            return;\r\n        Axios.post('http://localhost:3307/getPrices',\r\n            { name: this.state.name, article: this.state.selectedTask.article_id }).then((response) => {\r\n                //Se debe encontrar el mayor de los id que sean menores a selectedTask.id o el mayor, si no tiene menores\r\n                if (response.data.length === 0)\r\n                    return;\r\n                let currentId = this.state.selectedTask.id, aux = response.data[0];\r\n                response.data.map((task) => {\r\n                    if ((task.id > aux.id && task.id < currentId) || (task.id > currentId && (aux.id === 0 || aux.id > currentId)))\r\n                        aux = task;\r\n                })\r\n                this.setState({ price: aux.price });\r\n            });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[(index === -1) ? 1 : index + 1].focus();\r\n        if (event.keyCode) //Si el evento es artificial ({key = 'enter'}), no se prevendrá el evento porque no existe\r\n            event.preventDefault();\r\n    };\r\n\r\n    myForm = () => {\r\n        let defaultDeadline = new Date();\r\n        defaultDeadline.setDate(defaultDeadline.getDate() + 7);\r\n        defaultDeadline = moment(defaultDeadline).format(\"DD/MM/YYYY\")\r\n        // if(!this.state.deadline)\r\n        //     this.setState({deadline: defaultDeadline});\r\n        Axios.post('http://localhost:3307/getTasks', { state: 'toAssign' }).then((response) => {\r\n            this.setState({ tasks: response.data });\r\n        });\r\n        return (\r\n            <Form ref={this.form}>\r\n                {this.state.selectedTask ?\r\n                    <>\r\n                        <h3>Bultos: {this.state.selectedTask.packages}</h3>\r\n                        <h3>Descripción: {this.state.selectedTask.article_description}</h3>\r\n                        <h3>Cantidad: {this.state.selectedTask.quantity}</h3>\r\n                    </>\r\n                    : null}\r\n\r\n                <TaskRequest setSelectedTask={(e) => {\r\n                    this.setState({ selectedTask: e, quantity: e.quantity });\r\n                    this.updateError(0, !!e);\r\n                    this.handleEnter({ key: 'enter' });\r\n                }} tasks={this.state.tasks} handleEnter={this.handleEnter}\r\n                    title={this.state.title} setTitle={(e) => { this.setState({ title: e }) }} />\r\n\r\n                <Request toShow=\"workshopName\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ name: event });\r\n                    this.updateError(1, error);\r\n                }} />\r\n\r\n                <Request toShow=\"price\" value={this.state.price.toString()} handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ price: event.target.value });\r\n                    this.updateError(2, error);\r\n                }} />\r\n\r\n                <Request toShow=\"deadline\" value={this.state.deadline} handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    let deadline = event.target.value, currentYear = new Date().getFullYear();\r\n                    //deadline += deadline.length < 10 ? '/' + currentYear : '';\r\n                    this.setState({ deadline });\r\n                    console.log('hi');\r\n                    this.updateError(3, error);\r\n                }} />\r\n\r\n                <Request toShow=\"weight\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ weight: event.target.value });\r\n                    this.updateError(4, error);\r\n                }} />\r\n\r\n                <Request toShow=\"threads\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ threads: event.target.value });\r\n                    this.updateError(5, error);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    print = () => {\r\n        this.setState({ showPrint: true });\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n        this.setState({ showPrint: false });\r\n    }\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        this.resetState();\r\n        Axios.put('http://localhost:3307/assignTask', {\r\n            name: aux.name, task: this.state.selectedTask.id, deadline: aux.deadline, weight: aux.weight, threads: aux.threads,\r\n            price: aux.price, exitDate: moment(new Date()).format(\"DD/MM/YYYY\")\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {selectedTask, deadline, quantity, weight, threads, price} = this.state;\r\n        let description = selectedTask ? selectedTask.article_description : '';\r\n        return (\r\n            <>\r\n\r\n                {/* component to be printed */}\r\n                <div style={{ display: \"none\" }}>\r\n                    <ComponentToPrint ref={(el) => (this.toPrint = el)} data={{deadline, description, quantity, weight, threads, price}}/>\r\n                </div>\r\n                <ModalOpener buttonText='Asignar Tarea' handleClose={this.resetState}\r\n                    footer={{ content: this.toPrint, show: !this.state.error }} error={this.state.error}\r\n                    cardClassName='cardWorkshopAdm' containerClassName='containerWorkshopAdm' buttonClassName='button2WorkshopAdm' imageClassName='imgWorkshopAdm' logo={image} title={'Asignar Tarea'} post={this.post} children={this.myForm()} />\r\n            {/* Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nclass ComponentToPrint extends React.Component {\r\n    render(){\r\n        const { data } = this.props;\r\n        return (\r\n            <div id=\"toPrint\">\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Fecha</th>\r\n                            <th>Descripción de artículo</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Hilos</th>\r\n                            <th>Precio por unidad</th>\r\n                            <th>Dinero</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                            <td>{data.deadline}</td>\r\n                            <td>{data.description}</td>\r\n                            <td>{data.quantity}</td>\r\n                            <td>{data.weight}</td>\r\n                            <td>{data.threads}</td>\r\n                            <td>{'$' + data.price}</td>\r\n                            <td>{'$' + data.price * data.quantity}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js",["102","103","104","105"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n//import image from './Images/addStock.svg';\r\n\r\nconst initialState = {\r\n    responsible: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [{id: '', quantity: ''}]\r\n    //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    addMaterial() {\r\n        this.setState({materials: [...this.state.materials, { id: '', quantity: '' }]})\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        let materials = this.state.materials;\r\n        materials.splice(i, 1);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(index, e, property) {\r\n        let materials = this.state.materials;\r\n        materials[index][property] = e.target.value;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//TODO: Enviar a la base de datos\r\n        console.log('hi');\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsible\" onChange={(event) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Nombre</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {/* {!this.state.materials[0]? null : */}\r\n                        {this.state.materials.map((material, index) => {console.log('hi');\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle. En caso de eliminarse una fila, aparecerá la cantidad como -1\r\n                        <Row onRemove={this.removeMaterial(index)} onChange={(e, property) => {\r\n                            this.changeMaterial(index, e, property);\r\n                            this.addMaterial();\r\n                        }} /> })\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                className={'title'} /*logo={image}*/ title={'Añadir stock'} post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ onChange, onRemove }) => {\r\n\r\n    const [input, setInput] = useState({ id: '', name: '', description: '', quantity: '', weight: '', meters: '' });\r\n\r\n    useEffect(() => {\r\n        onChange(input.id, 'id');\r\n        onChange(input.id, 'quantity');\r\n    }, [input]);\r\n    //TODO:\r\n    return (\r\n        <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n            <td><FormControl value={input.id}//ID\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.id = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.name}//Nombre\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.name = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.description}//Descripción\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.description = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.quantity}//Cantidad\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.quantity = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.weight}//Peso\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.weight = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><FormControl value={input.meters}//Metros\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.meters = e.target.value;\r\n                    setInput({ ...aux });\r\n                }} /></td>\r\n            <td><Button onClick={onRemove}>X</Button></td>\r\n        </tr>\r\n    );\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js",["106"],"import React, { Component, useState, useEffect } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Form from 'react-bootstrap/Form';\r\nimport image from './Images/deliverTask.gif';\r\nimport moment from 'moment';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalPrototype } from '../modal';\r\n\r\nconst initialState = {\r\n    error: true,\r\n    errors: [true, true],\r\n    showObsModal: false,\r\n    task: '',\r\n    name: '',\r\n    quantity: '',\r\n    money: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: '',\r\n    faulty: '',\r\n    completed: false,\r\n    calification: '',\r\n    observation: '',\r\n    paid: false,\r\n    workshopAccount: ''\r\n}\r\n\r\nexport class DeliverTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) =>\r\n            aux = aux && (key === index) ? error : e\r\n        );\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n    };\r\n\r\n    myForm = () => {\r\n        return (\r\n            <Form id='toPrint' ref={this.form} onSubmit={e => e.preventDefault()}>\r\n                <Request toShow=\"workshopName\" handleEnter={this.handleEnter} onChange={(value, error) => {\r\n                    this.setState({ name: value });\r\n                    this.updateError(0, error);\r\n                }} />\r\n                <Input name={this.state.name} onChange={(data, price, faulty, task, completed, paid, workshopAccount, usedAccount) => {\r\n                    this.setState({\r\n                        task, quantity: data.quantity, money: Number(data.money) + Number(usedAccount), weight: data.weight,\r\n                        threads: data.threads, completed, price, faulty, paid, workshopAccount\r\n                    });\r\n                    this.updateError(1, false);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    post = () => {\r\n        let { completed, task, money, weight, name, quantity, price, threads, paid, workshopAccount } = this.state;\r\n        if (!completed)\r\n            this.resetState();\r\n        Axios.post('http://localhost:3307/getTasks', { id: task }).then((response) => {\r\n            Axios.put('http://localhost:3307/payWorkshop',\r\n                { name: response.data[0].name, money: money - quantity * price })\r\n        })\r\n        Axios.post('http://localhost:3307/newPart',\r\n            {\r\n                name, task, date: moment(new Date()).format('DD/MM/YYYY'), quantity, threads, paid,\r\n                weight: Number(weight).toFixed(1), money: Number(money).toFixed(1)\r\n            }).then(() => {\r\n                if (completed)\r\n                    this.setState({ showObsModal: true });\r\n            });\r\n        Axios.put('http://localhost:3307/setAccount', { money: workshopAccount, name })//Actualizar el dinero que posee a cuenta el taller\r\n    }\r\n\r\n    completelyReturned = () => {\r\n        Axios.put('http://localhost:3307/printObs',\r\n            {\r\n                id: this.state.task, observations: this.state.observation, calification: this.state.calification,\r\n                faulty: this.state.faulty\r\n            });\r\n    }\r\n\r\n    print = () => {\r\n        if (this.state.error) {\r\n            alert('Error. No se puede imprimir una boleta inválida.');\r\n            return;\r\n        }\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n    }\r\n\r\n    sendObs = () => {\r\n        this.completelyReturned();\r\n        this.resetState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ModalOpener buttonText=\"Recibir tarea\" children={this.myForm()} logo={image} cardClassName='cardWorkshopAdm' containerClassName='containerWorkshopAdm' buttonClassName='button3WorkshopAdm' imageClassName='imgWorkshopAdm'\r\n                    footer={{ label: 'Imprimir', func: this.print, show: !!document.getElementById(\"taskTable\") }}\r\n                    title=\"Ingreso de tarea\" post={this.post} error={this.state.error} handleClose={this.resetState} />\r\n                {/*Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm*/}\r\n\r\n                <ModalPrototype title=\"Calificar\" show={this.state.showObsModal} post={this.sendObs} handleClose={(this.sendObs)}>\r\n                    <>\r\n                        <Request toShow=\"observation\" onChange={(e) => this.setState({ observation: e.target.value })} />\r\n                        <Request toShow=\"calification\" onChange={(e) => this.setState({ calification: e.target.value })} />\r\n                    </>\r\n                </ModalPrototype>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Input = ({ onChange, name }) => {\r\n\r\n    const [title, setTitle] = useState('Elegir tarea'); //Título del selectBox. Primero va a ser 'Elegir tarea' pero luego va a mostrar la tarea elegida\r\n    const [tasks, setTasks] = useState([]);//Todas las tareas que no se le pagaron por completo al taller\r\n    const [parts, setParts] = useState([]);//Todas las entregas parciales de la tarea elegida\r\n    const [input, setInput] = useState({ quantity: 0, weight: 0, money: 0, threads: 0 });//Lo ingresado por el usuario en la tabla\r\n    const [selectedTask, setSelectedTask] = useState('');//La tarea elegida\r\n    const [refund, setRefund] = useState(false);//¿Está cargando una devolución?\r\n    const [completed, setCompleted] = useState(false);//¿El taller entregó el total de la mercadería?\r\n    //const [actualAccount, setActualAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [account, setAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [quantityBackUp, setQuantityBackUp] = useState('');//Una variable auxiliar para recordar la cantidad, de esta forma podremos saber cuándo cambia\r\n\r\n    useEffect(() => {\r\n        if (name === '')\r\n            return;\r\n        Axios.post('http://localhost:3307/getUnpaidTasks', { name }).then((response) => {\r\n            if (response.data.length === 0)\r\n                return;\r\n            setTasks(response.data);\r\n        });\r\n        console.log('update tasks');\r\n    }, [name]);\r\n\r\n    useEffect(() => {//Cuando selectedTask cambia...\r\n        setInput({ quantity: 0, weight: 0, money: 0, threads: 0 });//Resetear los valores de Input (porque el usuario no ingresó nada)\r\n        let moneyPaid = input.money;\r\n        Axios.post('http://localhost:3307/getParts', { task: selectedTask.id }).then(response => {\r\n            setParts(response.data)//Recuperar partes desde la BD y asignarselas a parts\r\n            response.data.map(part => moneyPaid += part.money);//Sumar a moneyPaid todo lo pagado en cada parte\r\n            if (name)//Si se sabe el nombre del taller...\r\n                Axios.post('http://localhost:3307/getAccount', { name }).then(response => {//Recuperar de la BD la cuenta corriente del taller\r\n                    setAccount(response.data[0].money);\r\n                });\r\n        });\r\n    }, [selectedTask]);\r\n\r\n    useEffect(() => {\r\n        let delivered = input.quantity;\r\n        let moneyPaid = isNaN(input.money) ? 0 : input.money;\r\n        parts.map(part => moneyPaid = Number(moneyPaid) + Number(part.money));//Sumar a moneyPaid todo lo pagado en cada parte\r\n        parts.map(part => delivered += part.quantity);//Sumar a delivered todas las cantidades entregadas en cada parte\r\n        if (quantityBackUp !== input.quantity) {//Si se modificó la cantidad\r\n            input.money = input.quantity * selectedTask.price - account;//Le recomienda al usuario pagar todo lo que debe pagar (lo entregado en esta parte * el precio acordado - la cuenta corriente de esta parte)\r\n            input.money = input.money < 0 ? 0 : input.money;//No se le puede recomendar pagar un número negativo\r\n            setQuantityBackUp(input.quantity);//Volver a actualizar la cantidad\r\n        }\r\n        onChange(input, selectedTask.price, selectedTask.quantity - delivered, selectedTask.id,//Se envían los cambios\r\n            delivered === selectedTask.quantity || completed, selectedTask.quantity * selectedTask.price <= moneyPaid, input.quantity * selectedTask.price - moneyPaid - account, account);//TODO: Revisar fórmula para leftover (workshopAccount)\r\n        //onChange(data, price, faulty, task, completed, paid, workshopAccount, usedAccount)//objeto con todo lo ingresado, precio, artículos fallados, id de tarea, si se entregaron todos los artículos, si se pagó la totalidad de la tarea, lo que le quedará de cuenta corriente al taller luego de la parte y la cantidad de dinero utilizado de la cuenta corriente\r\n    }, [input, completed, refund]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const inputField = (property, total) => {//Función que devuelve un inputbox para ingresar datos al objeto input. propery\r\n        //property es la propiedad de input que se quiere modificar con el inputbox y total es el objeto que contiene todos los totales\r\n        return (\r\n            <FormControl value={input[property]}//Asignar al inputbox la variable input[property], es decir que cada vez que el inputbox se modifica, la variable también y vice versa\r\n                onChange={(e) => {//Cuando cambia el inputbox...\r\n                    let value = e.target.value;\r\n                    if (isNaN(value) || (total[property] < value && property !== 'money'))//Si el valor es inválido...\r\n                        return;//Cancelar\r\n                    let aux = { ...input };\r\n                    aux[property] = (value[value.length - 1] === '.') ? value : Number(value);\r\n                    aux[property] = (refund) ?//Si se está haciendo una devolución de mercadería o se contó mal la mercadería en una parte anterior\r\n                        -Math.abs(aux[property]) ://Poner en negativo lo ingresado (así se suma y no se resta al total)\r\n                        (aux[property] < 0) ? 0 : aux[property];//Si la propiedad es negativa, convertir en 0\r\n                    if (property === 'quantity' || property === 'threads')//Si la propiedad es cantidad o hilos...\r\n                        aux[property] = Math.round(aux[property]);//No puede ser decimal\r\n                    setInput({ ...aux });\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const getTable = () => {\r\n\r\n        let total = {\r\n            quantity: selectedTask.quantity,\r\n            weight: selectedTask.weight,\r\n            money: selectedTask.quantity * selectedTask.price,\r\n            threads: selectedTask.threads\r\n        };\r\n        return (\r\n            <>\r\n                {parts.map((part, index) => {\r\n                    total = {\r\n                        quantity: total.quantity - part.quantity,\r\n                        weight: total.weight - part.weight,\r\n                        money: total.money - part.money,\r\n                        threads: total.threads - part.threads,\r\n                    };\r\n                    return (\r\n                        <tr key={index}>{/*Muestra el medio*/}\r\n                            <td>{part.date}</td>\r\n                            <td>{part.quantity}</td>\r\n                            <td>{total.quantity}</td>\r\n                            <td>{Number(part.weight).toFixed(1)}</td>\r\n                            <td>{Number(total.weight).toFixed(1)}</td>\r\n                            <td>{part.threads}</td>\r\n                            <td>{total.threads}</td>\r\n                            <td>{'$' + Number(part.money).toFixed(1)}</td>\r\n                            <td>{ }</td>\r\n                            <td>{'$' + Number(total.money).toFixed(1)}</td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                <tr>{/*Muestra la última fila*/}\r\n                    <td>{moment(new Date()).format('DD/MM/YYYY')}</td>\r\n                    <td>{inputField('quantity', total)}</td>\r\n                    <td>{total.quantity - input.quantity}</td>\r\n                    <td>{inputField('weight', total)}</td>\r\n                    <td>{(total.weight - input.weight).toFixed(1)}</td>\r\n                    <td>{inputField('threads', total)}</td>\r\n                    <td>{total.threads - input.threads}</td>\r\n                    <td>{inputField('money', total)}</td>\r\n                    <td>{'$' + account}</td>\r\n                    <td>{'$' + (total.money - input.money - account).toFixed(1)}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getExceeded = () => {//Devuelve true si se excedió la fecha de entrega\r\n        if (!selectedTask.deadline)\r\n            return;\r\n        let today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        var dateParts = selectedTask.deadline.split('/');\r\n        var deadline = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        return today > deadline;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ 'justifyContent': 'space-between', 'display': 'flex', 'alignItems': 'baseline' }}>\r\n                <TaskRequest setSelectedTask={setSelectedTask} tasks={tasks} title={title} setTitle={setTitle} />\r\n                <h4 style={{ 'color': getExceeded() ? 'red' : 'green' }}>\r\n                    {(selectedTask === '') ? null : selectedTask.deadline}\r\n                </h4>\r\n            </div>\r\n            {title === 'Elegir tarea' ? null :\r\n                <>\r\n                    <Form.Check onChange={() => {\r\n                        setRefund(!refund);\r\n                        input.money = -input.money;\r\n                        input.quantity = -input.quantity;\r\n                        input.threads = -input.threads;\r\n                        input.weight = -input.weight;\r\n                    }} label=\"Devolución o corrección\" />\r\n                    <Form.Check onChange={() => setCompleted(!completed)} label=\"Tarea cerrada\" />\r\n                    <Table striped bordered id=\"taskTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Fecha</th>\r\n                                <th>Cantidad entregada por el taller</th>\r\n                                <th>Cantidad total de la tarea</th>\r\n                                <th>Peso entregado por el taller</th>\r\n                                <th>Peso total</th>\r\n                                <th>Hilos devueltos</th>\r\n                                <th>Hilos totales</th>\r\n                                <th>Dinero entregado</th>\r\n                                <th>Dinero a cuenta</th>\r\n                                <th>Dinero total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                                <td>{selectedTask.exitDate}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.quantity}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.weight}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.threads}</td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td>{'$' + selectedTask.price * selectedTask.quantity}</td>\r\n                            </tr>\r\n                            {getTable()}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js",["107"],"import React from 'react';\r\nimport { ModalWork } from './modals';\r\nimport { ModalArt } from './modals';\r\nimport { ModalController } from '../../modal';\r\nimport PropTypes from 'prop-types';\r\nimport image from '../Images/registrationDrop.gif'\r\n\r\nexport class ArtWorkButton extends ModalController {\r\n\r\n    state = {\r\n        ...this.state,//Hereda los estados de ModalController (showModal: false)\r\n        modify: 'reg'\r\n    }\r\n\r\n    showModal = e => {//Cuando se presione el botón se ejecuta\r\n        this.setState({ showModal: true, modify: e })\r\n        //modify toma el valor pasado en el botón y se muestra el modal\r\n    }\r\n\r\n    callModal = () => {\r\n        if (this.props.article)\r\n            return (\r\n                <ModalArt handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n            );\r\n        return (\r\n            <ModalWork handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='card2WorkshopAdm'>\r\n                <p className='pWorkshopAdm'>{this.props.article ? 'Artículo' : 'Actualizar datos de taller'}</p>\r\n                <img id='imagen_diferente' src={image}/>\r\n                <div className='containerWorkshopAdm'>\r\n                    <button className='button4WorkshopAdm' onClick={() => this.showModal('reg')}>\r\n                        Alta\r\n                    </button>\r\n                    <button className='button5WorkshopAdm' onClick={() => this.showModal('drop')}>\r\n                        Baja\r\n                    </button>\r\n                    <button className='button6WorkshopAdm' onClick={() => this.showModal('update')}>\r\n                        Modificar\r\n                    </button>\r\n                </div>\r\n\r\n                {this.callModal()}\r\n                {/*Llama al Modal encargado de los Artículos*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nArtWorkButton.propTypes = {\r\n    article: PropTypes.bool.isRequired //Especifica si se debe hacer un botón sobre artículos o talleres\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js",["108","109","110","111","112"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js",["113","114"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\showData.js",["115","116","117","118","119","120","121","122","123","124","125"],"import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport './WorkshopsAdm/styles.css'\r\n\r\nconst initialState = {\r\n    data: '', //El nombre de la BD de la que sacamos los datos\r\n    table: [],//La tabla de datos sin filtrar\r\n    filteredTable: [],//La tabla a mostrar\r\n    titles: [],//Los atributos de la BD\r\n    headers: [],//Los títulos que se mostrarán en la tabla\r\n    input: '',//Ingreso de Inputbox para filtrar la tabla\r\n    filters: [],//Lista que muestra el tipo de filtro\r\n    filterInputs: [] //Lista que contiene lo ingresado por el usuario en cada filtro\r\n};\r\n\r\nexport class ShowData extends Component {\r\n\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    setData = e => {//Consigue los datos de la base de datos, en base a e, que le especifica qué datos buscar   \r\n        if(this.state.data === e)\r\n            return;\r\n        Axios.get('http://localhost:3307/get' + e.charAt(0).toUpperCase() + e.slice(1)).then(response => {\r\n            const res = response.data, table = [], titles = [];\r\n            if (res)\r\n                res.map(row => table.push(Object.values(row)));\r\n            Object.getOwnPropertyNames(res[0]).map(property => {\r\n                let header;\r\n                switch (property) {\r\n                    case 'date':\r\n                        header = 'Fecha';\r\n                        break;\r\n                    case 'id':\r\n                        header = 'Código';\r\n                        break;\r\n                    case 'description':\r\n                        header = 'Descripción';\r\n                        break;\r\n                    case 'name':\r\n                        header = 'Nombre';\r\n                        break;\r\n                    case 'contact':\r\n                        header = 'Contacto';\r\n                        break;\r\n                    case 'money':\r\n                        header = (this.state.data === 'Workshop') ? 'Cuenta corriente' : 'Saldo';\r\n                        break;\r\n                    case 'article_id':\r\n                        header = 'Código de artículo';\r\n                        break;\r\n                    case 'article_description':\r\n                        header = 'Descripción de artículo';\r\n                        break;\r\n                    case 'quantity':\r\n                        header = 'Cantidad';\r\n                        break;\r\n                    case 'packages':\r\n                        header = 'Bultos';\r\n                        break;\r\n                    case 'cutDate':\r\n                        header = 'Fecha de corte';\r\n                        break;\r\n                    case 'fabrics':\r\n                        header = 'Telas';\r\n                        break;\r\n                    case 'colors':\r\n                        header = 'Colores';\r\n                        break;\r\n                    case 'responsible':\r\n                        header = 'responsible/s';\r\n                        break;\r\n                    case 'generalFeatures':\r\n                        header = 'Detalles';\r\n                        break;\r\n                    case 'state':\r\n                        header = 'Estado';\r\n                        break;\r\n                    case 'exitDate':\r\n                        header = 'Fecha de salida';\r\n                        break;\r\n                    case 'deadline':\r\n                        header = 'Fecha esperada';\r\n                        break;\r\n                    case 'weight':\r\n                        header = 'Peso';\r\n                        break;\r\n                    case 'price':\r\n                        header = 'Precio unitario';\r\n                        break;\r\n                    case 'threads':\r\n                        header = 'Hilos entregados';\r\n                        break;\r\n                    case 'calification':\r\n                        header = 'Calificación';\r\n                        break;\r\n                    case 'observations':\r\n                        header = 'Observaciones';\r\n                        break;\r\n                    case 'faulty':\r\n                        header = 'Fallados';\r\n                        break;\r\n                }\r\n                titles.push(header);\r\n            });\r\n            if(!this.state.table || this.state.table.length === 0)\r\n                this.setState({ filteredTable: table });\r\n            console.log(table);\r\n            console.log(titles);\r\n            this.setState({ titles, table, filteredTable: table, data: e });\r\n            this.setFilters(titles);\r\n        });\r\n    }\r\n\r\n    header = (name, index) => {//Devuelve un HTML tipo header que diga name\r\n        return (<th key={index}>{name}</th>);\r\n    }\r\n    \r\n    setFilters = (titles) => {//Crea los filtros en base a los títulos\r\n        let filters = [];\r\n        let filterInputs = [];\r\n        titles.map((title) => {//TODO: \r\n            switch(title){\r\n                case 'Descripción':\r\n                case 'Nombre':\r\n                case 'Contacto':\r\n                case 'Código de artículo':\r\n                case 'Descripción de artículo':\r\n                case 'Telas':\r\n                case 'Colores':\r\n                case 'responsible/s':\r\n                case 'Detalles':\r\n                case 'Código':\r\n                case 'Observaciones':\r\n                    filters.push('input');\r\n                    break;\r\n                case 'Saldo':\r\n                case 'Cantidad':\r\n                case 'Bultos':\r\n                case 'Precio unitario':\r\n                case 'Peso':\r\n                case 'Hilos entregados':\r\n                case 'Calificación':\r\n                case 'Fallados':\r\n                    filters.push('number');\r\n                    break;\r\n                case 'Fecha':\r\n                case 'Fecha de corte':\r\n                case 'Fecha de salida':\r\n                case 'Fecha esperada':\r\n                    filters.push('date');\r\n                    break;\r\n                case 'Estado':\r\n                    filters.push(['Todos', 'Asignado', 'No Asignado', 'Devuelto']);\r\n                    break;\r\n                case 'Pago':\r\n                    filters.push(['Todos', 'Pago', 'No Pago']);\r\n                    break;\r\n                default:\r\n                    filters.push('');\r\n                    break;\r\n                }\r\n            filterInputs.push('');\r\n            })\r\n        this.setState({filters, filterInputs});\r\n    }\r\n\r\n    compareTable = () => {//Le asigna a filteredTable una versión filtrada de table \r\n        //TODO: table se actualiza a filteredTable\r\n        \r\nconst {table, filterInputs, filters} = this.state;\r\n        let filteredTable = table.slice(), toErase = [];\r\n        table.map((row, i) => {\r\n            let erase = false;\r\n            row.map((cell, j) => {\r\n                let filterInput = filterInputs[j];\r\n                let operator = filterInput[0];\r\n                switch(filters[j]){\r\n                    case 'input':\r\n                        let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                        if(!cellString.toLowerCase().includes(filterInput))\r\n                            erase = true;\r\n                        break;\r\n                    case 'number':\r\n                        let number = filterInput.slice(1, filterInput.length);\r\n                        if(number === ''){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        if(isNaN(number) || (operator !== ' ' && operator !== '<' && operator !== '>' && operator !== '=')){\r\n                            erase = true;\r\n                            break;\r\n                        }                    \r\n                        number = Number(number);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = number >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = number <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = number !== cell;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case 'date':\r\n                        let dateRaw = filterInput.slice(1, filterInput.length);\r\n                        if(!(((dateRaw.length === 10 && dateRaw[5] === '/') || dateRaw.length === 5) && dateRaw[2] === '/')){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        let dateParts = dateRaw.slice(1, dateRaw.length).split('/');\r\n                        let date = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        dateParts = cell.split('/');\r\n                        cell = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                // erase = (1 === dates.compare(date, cell));\r\n                                erase = date >= cell;\r\n                                break;\r\n                            case '<':\r\n                                // erase = (-1 === dates.compare(date, cell));\r\n                                erase = date <= cell;\r\n                                break;\r\n                            case '=':\r\n                                // erase = (0 === dates.compare(date, cell));\r\n                                erase = date !== cell;\r\n                                break;\r\n                        }\r\n                    }\r\n                if(!erase)\r\n                    toErase.push(i);\r\n            });\r\n        })\r\n        toErase = toErase.reverse();\r\n        toErase.map((element) => filteredTable.splice(element, 1));\r\n        if(this.state.filteredTable !== filteredTable)\r\n            this.setState({filteredTable});\r\n    }\r\n\r\n    render() {\r\n        const {filteredTable, titles, table} = this.state, data = { 'articles': 'Artículos', 'workshops': 'Talleres', 'payments': 'Pagos', 'tasks': 'Tareas'};\r\n        let title = 'Elegir datos a mostrar', dropdownList = [];\r\n        for (const key in data)\r\n            dropdownList.push(key);\r\n        return (\r\n            <>\r\n\r\n                <div className='selectWorkshopAdm'>\r\n                    <select title={title} onSelect={e => {\r\n                        this.setData(e);\r\n                        title = data.e;\r\n                    }}>\r\n                        <option>Elegir datos a mostrar</option>\r\n                        {dropdownList.map((e, index) => <option key={index} eventKey={e}>{data[e]}</option>)}\r\n                    </select>\r\n                </div>\r\n                {(titles && filteredTable) ?\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                {titles.map((title, i) => this.header(title, i))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                            {this.state.filters.map((filter, i) => {\r\n                                let aux = this.state.filterInputs;\r\n                                switch (filter) {\r\n                                    case 'input':\r\n                                        return <td key={i}><FormControl value={aux[i]} onChange={(e) => {\r\n                                            aux[i] = e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/></td>\r\n                                    case 'number':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <option eventKey={'>'}>Mayor</option>\r\n                                            <option eventKey={'<'}>Menor</option>\r\n                                            <option eventKey={'='}>Igual</option>\r\n                                        </DropdownButton></td>\r\n                                    case 'date':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <option eventKey={'>'}>Mayor</option>\r\n                                            <option eventKey={'<'}>Menor</option>\r\n                                            <option eventKey={'='}>Igual</option>\r\n                                        </DropdownButton></td>\r\n                                    default:\r\n                                        if(!filter[0])\r\n                                            return <td key={i}></td>;\r\n                                        return <td key={i}>\r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            aux[i] = e;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            {filter.map((element, index) => \r\n                                            <option key={index} eventKey={element}>{element}</option>)}\r\n                                        </DropdownButton></td>        \r\n                                }\r\n                            })}\r\n                            </tr>\r\n                            {filteredTable.map((row, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                    : null}\r\n            </>\r\n        );\r\n    }\r\n}",{"ruleId":"126","severity":1,"message":"127","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":13},{"ruleId":"126","severity":1,"message":"130","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":14},{"ruleId":"126","severity":1,"message":"131","line":6,"column":22,"nodeType":"128","messageId":"129","endLine":6,"endColumn":28},{"ruleId":"126","severity":1,"message":"132","line":7,"column":5,"nodeType":"128","messageId":"129","endLine":7,"endColumn":11},{"ruleId":"126","severity":1,"message":"133","line":8,"column":5,"nodeType":"128","messageId":"129","endLine":8,"endColumn":10},{"ruleId":"126","severity":1,"message":"134","line":9,"column":5,"nodeType":"128","messageId":"129","endLine":9,"endColumn":9},{"ruleId":"126","severity":1,"message":"130","line":11,"column":8,"nodeType":"128","messageId":"129","endLine":11,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":45,"column":17,"nodeType":"137","endLine":45,"endColumn":51},{"ruleId":"138","severity":1,"message":"139","line":46,"column":17,"nodeType":"137","endLine":46,"endColumn":21},{"ruleId":"126","severity":1,"message":"140","line":115,"column":12,"nodeType":"128","messageId":"129","endLine":115,"endColumn":16},{"ruleId":"126","severity":1,"message":"141","line":119,"column":12,"nodeType":"128","messageId":"129","endLine":119,"endColumn":17},{"ruleId":"126","severity":1,"message":"142","line":123,"column":12,"nodeType":"128","messageId":"129","endLine":123,"endColumn":17},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"126","severity":1,"message":"147","line":1,"column":28,"nodeType":"128","messageId":"129","endLine":1,"endColumn":37},{"ruleId":"126","severity":1,"message":"148","line":2,"column":10,"nodeType":"128","messageId":"129","endLine":2,"endColumn":23},{"ruleId":"126","severity":1,"message":"149","line":4,"column":10,"nodeType":"128","messageId":"129","endLine":4,"endColumn":26},{"ruleId":"126","severity":1,"message":"150","line":5,"column":10,"nodeType":"128","messageId":"129","endLine":5,"endColumn":27},{"ruleId":"126","severity":1,"message":"151","line":6,"column":10,"nodeType":"128","messageId":"129","endLine":6,"endColumn":26},{"ruleId":"126","severity":1,"message":"152","line":7,"column":10,"nodeType":"128","messageId":"129","endLine":7,"endColumn":18},{"ruleId":"126","severity":1,"message":"153","line":3,"column":19,"nodeType":"128","messageId":"129","endLine":3,"endColumn":30},{"ruleId":"154","severity":1,"message":"155","line":59,"column":41,"nodeType":"156","messageId":"157","endLine":61,"endColumn":69},{"ruleId":"126","severity":1,"message":"158","line":10,"column":8,"nodeType":"128","messageId":"129","endLine":10,"endColumn":14},{"ruleId":"126","severity":1,"message":"159","line":11,"column":8,"nodeType":"128","messageId":"129","endLine":11,"endColumn":20},{"ruleId":"160","severity":1,"message":"161","line":48,"column":29,"nodeType":"162","messageId":"163","endLine":48,"endColumn":31},{"ruleId":"160","severity":1,"message":"161","line":65,"column":42,"nodeType":"162","messageId":"163","endLine":65,"endColumn":44},{"ruleId":"126","severity":1,"message":"164","line":121,"column":56,"nodeType":"128","messageId":"129","endLine":121,"endColumn":67},{"ruleId":"126","severity":1,"message":"153","line":3,"column":19,"nodeType":"128","messageId":"129","endLine":3,"endColumn":30},{"ruleId":"126","severity":1,"message":"165","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":13},{"ruleId":"160","severity":1,"message":"161","line":63,"column":69,"nodeType":"162","messageId":"163","endLine":63,"endColumn":71},{"ruleId":"166","severity":1,"message":"167","line":92,"column":8,"nodeType":"168","endLine":92,"endColumn":15,"suggestions":"169"},{"ruleId":"166","severity":1,"message":"170","line":176,"column":8,"nodeType":"168","endLine":176,"endColumn":22,"suggestions":"171"},{"ruleId":"135","severity":1,"message":"136","line":34,"column":17,"nodeType":"137","endLine":34,"endColumn":57},{"ruleId":"126","severity":1,"message":"172","line":6,"column":8,"nodeType":"128","messageId":"129","endLine":6,"endColumn":15},{"ruleId":"126","severity":1,"message":"173","line":7,"column":8,"nodeType":"128","messageId":"129","endLine":7,"endColumn":22},{"ruleId":"126","severity":1,"message":"174","line":12,"column":10,"nodeType":"128","messageId":"129","endLine":12,"endColumn":18},{"ruleId":"160","severity":1,"message":"161","line":89,"column":29,"nodeType":"162","messageId":"163","endLine":89,"endColumn":31},{"ruleId":"126","severity":1,"message":"175","line":575,"column":12,"nodeType":"128","messageId":"129","endLine":575,"endColumn":17},{"ruleId":"126","severity":1,"message":"176","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":13},{"ruleId":"126","severity":1,"message":"158","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":14},{"ruleId":"126","severity":1,"message":"177","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":16},{"ruleId":"126","severity":1,"message":"178","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":13},{"ruleId":"160","severity":1,"message":"161","line":35,"column":61,"nodeType":"162","messageId":"163","endLine":35,"endColumn":63},{"ruleId":"179","severity":1,"message":"180","line":37,"column":17,"nodeType":"181","messageId":"182","endLine":110,"endColumn":18},{"ruleId":"160","severity":1,"message":"161","line":129,"column":28,"nodeType":"162","messageId":"163","endLine":129,"endColumn":30},{"ruleId":"160","severity":1,"message":"161","line":180,"column":28,"nodeType":"162","messageId":"163","endLine":180,"endColumn":30},{"ruleId":"160","severity":1,"message":"161","line":182,"column":31,"nodeType":"162","messageId":"163","endLine":182,"endColumn":33},{"ruleId":"179","severity":1,"message":"180","line":185,"column":17,"nodeType":"181","messageId":"182","endLine":244,"endColumn":22},{"ruleId":"179","severity":1,"message":"180","line":202,"column":25,"nodeType":"181","messageId":"182","endLine":215,"endColumn":26},{"ruleId":"179","severity":1,"message":"180","line":227,"column":25,"nodeType":"181","messageId":"182","endLine":243,"endColumn":26},{"ruleId":"126","severity":1,"message":"183","line":256,"column":39,"nodeType":"128","messageId":"129","endLine":256,"endColumn":44},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'Vendor' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'Home' is defined but never used.","'About' is defined but never used.","'Users' is defined but never used.","no-native-reassign",["184"],"no-negated-in-lhs",["185"],"'useEffect' is defined but never used.","'ArtWorkButton' is defined but never used.","'NewPaymentButton' is defined but never used.","'DeliverTaskButton' is defined but never used.","'AssignTaskButton' is defined but never used.","'ShowData' is defined but never used.","'TaskRequest' is defined but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'Button' is defined but never used.","'ReactToPrint' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'currentYear' is assigned a value but never used.","'Axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["186"],"React Hook useEffect has missing dependencies: 'input.money' and 'name'. Either include them or remove the dependency array.",["187"],"'Popover' is defined but never used.","'OverlayTrigger' is defined but never used.","'ModalArt' is defined but never used.","'shown' is assigned a value but never used.","'Modal' is defined but never used.","'Dropdown' is defined but never used.","'Table' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'table' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [input, onChange]",{"range":"192","text":"193"},"Update the dependencies array to be: [input.money, name, selectedTask]",{"range":"194","text":"195"},[3627,3634],"[input, onChange]",[7813,7827],"[input.money, name, selectedTask]"]