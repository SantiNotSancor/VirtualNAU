[{"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js":"1","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\index.js":"2","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\index.js":"3","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js":"4","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js":"5","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js":"6","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js":"7","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js":"8","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js":"9","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js":"10","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js":"11","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js":"12","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js":"13","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js":"14","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\showData.js":"15","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickSuspended.js":"16","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickToDos.js":"17","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js":"18","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\index.js":"19","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\newTask.js":"20","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\showOrders.js":"21"},{"size":413,"mtime":1667308791756,"results":"22","hashOfConfig":"23"},{"size":3993,"mtime":1667175322286,"results":"24","hashOfConfig":"23"},{"size":858,"mtime":1667306317407,"results":"25","hashOfConfig":"23"},{"size":1058,"mtime":1667245617073,"results":"26","hashOfConfig":"23"},{"size":5125,"mtime":1667244611816,"results":"27","hashOfConfig":"23"},{"size":8808,"mtime":1663267676170,"results":"28","hashOfConfig":"23"},{"size":9368,"mtime":1667174993246,"results":"29","hashOfConfig":"23"},{"size":3921,"mtime":1663613859482,"results":"30","hashOfConfig":"23"},{"size":16378,"mtime":1660842118128,"results":"31","hashOfConfig":"23"},{"size":2099,"mtime":1660842118121,"results":"32","hashOfConfig":"23"},{"size":22237,"mtime":1667243702792,"results":"33","hashOfConfig":"23"},{"size":2303,"mtime":1664213418121,"results":"34","hashOfConfig":"23"},{"size":2613,"mtime":1667245094742,"results":"35","hashOfConfig":"23"},{"size":6908,"mtime":1660842118113,"results":"36","hashOfConfig":"23"},{"size":17305,"mtime":1667308672704,"results":"37","hashOfConfig":"23"},{"size":638,"mtime":1655391929398,"results":"38","hashOfConfig":"23"},{"size":639,"mtime":1655391929400,"results":"39","hashOfConfig":"23"},{"size":10822,"mtime":1667172926703,"results":"40","hashOfConfig":"23"},{"size":609,"mtime":1667309976322,"results":"41","hashOfConfig":"23"},{"size":5206,"mtime":1667310327998,"results":"42","hashOfConfig":"23"},{"size":9071,"mtime":1667310455047,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qnao0",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js",["94","95","96"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\index.js",["97","98","99","100","101","102"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\index.js",["103","104"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js",["105","106","107","108"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js",["109","110","111","112","113"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport image from './Images/assignTask.gif';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport ReactToPrint from \"react-to-print\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    task: '',\r\n    deadline: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: 0,\r\n    //Auto-asignar\r\n    packages: '',\r\n    description: '',\r\n    quantity: '',\r\n    //Otros\r\n    error: true,\r\n    errors: [true, true, true, true, true, true],\r\n    selectedTask: null,\r\n    tasks: [],\r\n    title: 'Elegir Tarea',\r\n    showPrint: false\r\n};\r\n\r\nexport class AssignTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n    toPrint = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => {\r\n            aux = aux && (key === index) ? error : e;\r\n        });\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (this.state.selectedTask === prevState.selectedTask && this.state.name === prevState.name)\r\n            return;\r\n        if (!this.state.name || !this.state.selectedTask || this.state.price)\r\n            return;\r\n        Axios.post('http://localhost:3307/getPrices',\r\n            { name: this.state.name, article: this.state.selectedTask.article_id }).then((response) => {\r\n                //Se debe encontrar el mayor de los id que sean menores a selectedTask.id o el mayor, si no tiene menores\r\n                if (response.data.length === 0)\r\n                    return;\r\n                let currentId = this.state.selectedTask.id, aux = response.data[0];\r\n                response.data.map((task) => {\r\n                    if ((task.id > aux.id && task.id < currentId) || (task.id > currentId && (aux.id === 0 || aux.id > currentId)))\r\n                        aux = task;\r\n                })\r\n                this.setState({ price: aux.price });\r\n            });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[(index === -1) ? 1 : index + 1].focus();\r\n        if (event.keyCode) //Si el evento es artificial ({key = 'enter'}), no se prevendrá el evento porque no existe\r\n            event.preventDefault();\r\n    };\r\n\r\n    myForm = () => {\r\n        let defaultDeadline = new Date();\r\n        defaultDeadline.setDate(defaultDeadline.getDate() + 7);\r\n        defaultDeadline = moment(defaultDeadline).format(\"DD/MM/YYYY\")\r\n        // if(!this.state.deadline)\r\n        //     this.setState({deadline: defaultDeadline});\r\n        Axios.post('http://localhost:3307/getTasks', { state: 'toAssign' }).then((response) => {\r\n            this.setState({ tasks: response.data });\r\n        });\r\n        return (\r\n            <Form ref={this.form}>\r\n                {this.state.selectedTask ?\r\n                    <>\r\n                        <h3>Bultos: {this.state.selectedTask.packages}</h3>\r\n                        <h3>Descripción: {this.state.selectedTask.article_description}</h3>\r\n                        <h3>Cantidad: {this.state.selectedTask.quantity}</h3>\r\n                    </>\r\n                    : null}\r\n\r\n                <TaskRequest setSelectedTask={(e) => {\r\n                    this.setState({ selectedTask: e, quantity: e.quantity });\r\n                    this.updateError(0, !!e);\r\n                    this.handleEnter({ key: 'enter' });\r\n                }} tasks={this.state.tasks} handleEnter={this.handleEnter}\r\n                    title={this.state.title} setTitle={(e) => { this.setState({ title: e }) }} />\r\n\r\n                <Request toShow=\"workshopName\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ name: event });\r\n                    this.updateError(1, error);\r\n                }} />\r\n\r\n                <Request toShow=\"price\" value={this.state.price.toString()} handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ price: event.target.value });\r\n                    this.updateError(2, error);\r\n                }} />\r\n\r\n                <Request toShow=\"deadline\" value={this.state.deadline} handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    let deadline = event.target.value, currentYear = new Date().getFullYear();\r\n                    //deadline += deadline.length < 10 ? '/' + currentYear : '';\r\n                    this.setState({ deadline });\r\n                    console.log('hi');\r\n                    this.updateError(3, error);\r\n                }} />\r\n\r\n                <Request toShow=\"weight\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ weight: event.target.value });\r\n                    this.updateError(4, error);\r\n                }} />\r\n\r\n                <Request toShow=\"threads\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ threads: event.target.value });\r\n                    this.updateError(5, error);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    print = () => {\r\n        this.setState({ showPrint: true });\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n        this.setState({ showPrint: false });\r\n    }\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        this.resetState();\r\n        Axios.put('http://localhost:3307/assignTask', {\r\n            name: aux.name, task: this.state.selectedTask.id, deadline: aux.deadline, weight: aux.weight, threads: aux.threads,\r\n            price: aux.price, exitDate: moment(new Date()).format(\"DD/MM/YYYY\")\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {selectedTask, deadline, quantity, weight, threads, price} = this.state;\r\n        let description = selectedTask ? selectedTask.article_description : '';\r\n        return (\r\n            <>\r\n\r\n                {/* component to be printed */}\r\n                <div style={{ display: \"none\" }}>\r\n                    <ComponentToPrint ref={(el) => (this.toPrint = el)} data={{deadline, description, quantity, weight, threads, price}}/>\r\n                </div>\r\n                <ModalOpener buttonText='Remito' handleClose={this.resetState}\r\n                    footer={{ content: this.toPrint, show: !this.state.error }} error={this.state.error}\r\n                    cardClassName='cardWorkshopAdm' containerClassName='containerWorkshopAdm' buttonClassName='button2WorkshopAdm' imageClassName='imgWorkshopAdm' logo={image} title={'Asignar Tarea'} post={this.post} children={this.myForm()} />\r\n            {/* Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nclass ComponentToPrint extends React.Component {\r\n    render(){\r\n        const { data } = this.props;\r\n        return (\r\n            <div id=\"toPrint\">\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Fecha</th>\r\n                            <th>Descripción de artículo</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Hilos</th>\r\n                            <th>Precio por unidad</th>\r\n                            <th>Dinero</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                            <td>{data.deadline}</td>\r\n                            <td>{data.description}</td>\r\n                            <td>{data.quantity}</td>\r\n                            <td>{data.weight}</td>\r\n                            <td>{data.threads}</td>\r\n                            <td>{'$' + data.price}</td>\r\n                            <td>{'$' + data.price * data.quantity}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}",["114","115"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js",["116","117"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, RawResourceRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport './styles.css';\r\nimport addStockLogo from './Images/addStock.gif'\r\n\r\nconst initialState = {\r\n    responsible: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [{id: '', meters: '', quantity: '', weight: ''}],//Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n    materialsData: []//Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:3307/getMaterials').then(response => {\r\n            const res = response.data;\r\n            let materialsData = res.map(material => {\r\n                return {\r\n                    'id': material.id,\r\n                    'weight': (material.weight)? material.weight : 0,\r\n                    'meters': (material.meters)? material.meters : 0}\r\n            })\r\n            this.setState({ materialsData });\r\n        });\r\n    }\r\n\r\n    addMaterial(material) {\r\n        let materials = this.state.materials;\r\n        materials[materials.length - 1] = material;\r\n        this.setState({materials: [...this.state.materials, {id: '', meters: '', quantity: '', weight: ''}]})//Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        let materials = this.state.materials;\r\n        materials.splice(i, 1);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(i, material) {\r\n        let materials = this.state.materials;\r\n        materials[i] = material;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//Envia materials (exceptuando el último elemento, que está vacío) a la base de datos\r\n        let materials = this.state.materials.slice();\r\n        materials.pop();\r\n        materials.forEach(material => Axios.post('http://localhost:3307/updateMaterials', material));\r\n        this.resetState();\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsible\" onChange={(event) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID: Nombre</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.materials? null :\r\n                        this.state.materials.map((material, index) => {\r\n                            console.log('update')\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle.\r\n                        return <Row key={index} index={index} material={material} remove={i => this.removeMaterial(i)} materialsData={this.state.materialsData}\r\n                            isLast={this.state.materials.length === index + 1} onChange={(this.state.materials.length !== index + 1)?\r\n                                (material) => this.changeMaterial(index, material) :\r\n                                (material) => this.addMaterial(material)} />\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n                <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor2' imageClassName='imgVendor' logo={addStockLogo} title='Añadir stock' post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ material, index, onChange, remove, isLast, materialsData }) => {\r\n\r\n    const [input, setInput] = useState(material);\r\n    const [convertion, setConvertion] = useState({});\r\n\r\n    useEffect(() => {\r\n        let aux;\r\n        if(!input.id){\r\n            setConvertion({});\r\n            aux = {}\r\n        }\r\n        else{\r\n            materialsData.map((material) => {\r\n                if(Number(material.id) === Number(input.id)){\r\n                    setConvertion(material)\r\n                    aux = material;                    \r\n                }\r\n            });\r\n        }\r\n        // if ((input.id && !aux.weight) || (!input.id && aux.weight))\r\n        //     input.weight = '-'\r\n        // else\r\n        //     if (input.weight === '-')\r\n        //         input.weight = '';\r\n        // if ((input.id && !aux.meters) || (!input.id && aux.meters))\r\n        //         input.meters = '-'\r\n        //     else\r\n        //         if (input.meters === '-')\r\n        //             input.meters = '';\r\n        if(aux.meters === 0)\r\n            input.meters = '-';\r\n        if(aux.weight === 0)\r\n            input.weight = '-';\r\n        console.log('trying with id ' + input.id);\r\n    }, [input.id]);\r\n\r\n    const changeInput = (newInput) => {\r\n        let aux = newInput;\r\n        console.log(convertion);\r\n        if(convertion && convertion !== {}) {\r\n            if(newInput.quantity !== input.quantity && newInput.quantity){//Si cambió la cantidad...\r\n                aux.weight = newInput.quantity * convertion.weight;\r\n                aux.meters = newInput.quantity * convertion.meters;\r\n            }\r\n            if(newInput.weight !== input.weight && newInput.weight && convertion.weight){//Si cambió el peso...\r\n                aux.quantity = newInput.weight / convertion.weight;\r\n                aux.meters = aux.quantity * convertion.meters;\r\n            }\r\n            if(newInput.meters !== input.meters && newInput.meters && convertion.meters){//Si cambió la longitud\r\n                aux.quantity = newInput.meters / convertion.meters;\r\n                aux.weight = aux.quantity * convertion.weight;\r\n            }\r\n        }\r\n        if(convertion.meters === 0)\r\n            aux.meters = '-';\r\n        if(convertion.weight === 0)\r\n            aux.weight = '-';\r\n        if(isNaN(aux.meters))\r\n            aux.meters = '';\r\n        if(isNaN(aux.weight))\r\n            aux.weight = '';\r\n        console.log(aux)\r\n        onChange(aux);\r\n        setInput(aux);\r\n    }\r\n\r\n    const myRemove = () => {\r\n        console.log(input);\r\n        remove(index);\r\n    };\r\n\r\n    return (\r\n            <tr key={index}>\r\n                {/* TODO: handleEnter */}\r\n                <td><RawResourceRequest placeholder=\"\" handleEnter={()=>console.log('hi')}//TODO: No se borra cuando se elimina (porque no tiene value, sino onChange)\r\n                    onChange={(e) => {\r\n                        let aux = { ...input };\r\n                        if (e.indexOf(':') > 0)\r\n                            aux.id = e.substr(0, e.indexOf(':'));\r\n                        else\r\n                            aux.id = '';\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                <td><FormControl value={input.quantity}//Cantidad\r\n                    onChange={(e) => {\r\n                        if (isNaN(e.target.value) || e.target.value < 0)\r\n                            return;\r\n                        let aux = { ...input };\r\n                        aux.quantity = e.target.value;\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                <td><FormControl value={input.weight}//Peso\r\n                    onChange={(e) => {\r\n                        if (isNaN(e.target.value) || e.target.value < 0)\r\n                            return;\r\n                        let aux = { ...input };\r\n                        aux.weight = e.target.value;\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                <td><FormControl value={input.meters}//Metros\r\n                    onChange={(e) => {\r\n                        if (isNaN(e.target.value) || e.target.value < 0)\r\n                            return;\r\n                        let aux = { ...input };\r\n                        aux.meters = e.target.value;\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                {!isLast? <td><Button onClick={myRemove}>X</Button></td> : <></>}\r\n            </tr>\r\n    );\r\n}",["118","119"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js",["120"],"import React, { Component, useState, useEffect } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Form from 'react-bootstrap/Form';\r\nimport image from './Images/deliverTask.gif';\r\nimport moment from 'moment';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalPrototype } from '../modal';\r\n\r\nconst initialState = {\r\n    error: true,\r\n    errors: [true, true],\r\n    showObsModal: false,\r\n    task: '',\r\n    name: '',\r\n    quantity: '',\r\n    money: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: '',\r\n    faulty: '',\r\n    completed: false,\r\n    calification: '',\r\n    observation: '',\r\n    paid: false,\r\n    workshopAccount: ''\r\n}\r\n\r\nexport class DeliverTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) =>\r\n            aux = aux && (key === index) ? error : e\r\n        );\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n    };\r\n\r\n    myForm = () => {\r\n        return (\r\n            <Form id='toPrint' ref={this.form} onSubmit={e => e.preventDefault()}>\r\n                <Request toShow=\"workshopName\" handleEnter={this.handleEnter} onChange={(value, error) => {\r\n                    this.setState({ name: value });\r\n                    this.updateError(0, error);\r\n                }} />\r\n                <Input name={this.state.name} onChange={(data, price, faulty, task, completed, paid, workshopAccount, usedAccount) => {\r\n                    this.setState({\r\n                        task, quantity: data.quantity, money: Number(data.money) + Number(usedAccount), weight: data.weight,\r\n                        threads: data.threads, completed, price, faulty, paid, workshopAccount\r\n                    });\r\n                    this.updateError(1, false);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    post = () => {\r\n        let { completed, task, money, weight, name, quantity, price, threads, paid, workshopAccount } = this.state;\r\n        if (!completed)\r\n            this.resetState();\r\n        Axios.post('http://localhost:3307/getTasks', { id: task }).then((response) => {\r\n            Axios.put('http://localhost:3307/payWorkshop',\r\n                { name: response.data[0].name, money: money - quantity * price })\r\n        })\r\n        Axios.post('http://localhost:3307/newPart',\r\n            {\r\n                name, task, date: moment(new Date()).format('DD/MM/YYYY'), quantity, threads, paid,\r\n                weight: Number(weight).toFixed(1), money: Number(money).toFixed(1)\r\n            }).then(() => {\r\n                if (completed)\r\n                    this.setState({ showObsModal: true });\r\n            });\r\n        Axios.put('http://localhost:3307/setAccount', { money: workshopAccount, name })//Actualizar el dinero que posee a cuenta el taller\r\n    }\r\n\r\n    completelyReturned = () => {\r\n        Axios.put('http://localhost:3307/printObs',\r\n            {\r\n                id: this.state.task, observations: this.state.observation, calification: this.state.calification,\r\n                faulty: this.state.faulty\r\n            });\r\n    }\r\n\r\n    print = () => {\r\n        if (this.state.error) {\r\n            alert('Error. No se puede imprimir una boleta inválida.');\r\n            return;\r\n        }\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n    }\r\n\r\n    sendObs = () => {\r\n        this.completelyReturned();\r\n        this.resetState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ModalOpener buttonText=\"Recibir tarea\" children={this.myForm()} logo={image} cardClassName='cardWorkshopAdm' containerClassName='containerWorkshopAdm' buttonClassName='button3WorkshopAdm' imageClassName='imgWorkshopAdm'\r\n                    footer={{ label: 'Imprimir', func: this.print, show: !!document.getElementById(\"taskTable\") }}\r\n                    title=\"Ingreso de tarea\" post={this.post} error={this.state.error} handleClose={this.resetState} />\r\n                {/*Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm*/}\r\n\r\n                <ModalPrototype title=\"Calificar\" show={this.state.showObsModal} post={this.sendObs} handleClose={(this.sendObs)}>\r\n                    <>\r\n                        <Request toShow=\"observation\" onChange={(e) => this.setState({ observation: e.target.value })} />\r\n                        <Request toShow=\"calification\" onChange={(e) => this.setState({ calification: e.target.value })} />\r\n                    </>\r\n                </ModalPrototype>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Input = ({ onChange, name }) => {\r\n\r\n    const [title, setTitle] = useState('Elegir tarea'); //Título del selectBox. Primero va a ser 'Elegir tarea' pero luego va a mostrar la tarea elegida\r\n    const [tasks, setTasks] = useState([]);//Todas las tareas que no se le pagaron por completo al taller\r\n    const [parts, setParts] = useState([]);//Todas las entregas parciales de la tarea elegida\r\n    const [input, setInput] = useState({ quantity: 0, weight: 0, money: 0, threads: 0 });//Lo ingresado por el usuario en la tabla\r\n    const [selectedTask, setSelectedTask] = useState('');//La tarea elegida\r\n    const [refund, setRefund] = useState(false);//¿Está cargando una devolución?\r\n    const [completed, setCompleted] = useState(false);//¿El taller entregó el total de la mercadería?\r\n    //const [actualAccount, setActualAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [account, setAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [quantityBackUp, setQuantityBackUp] = useState('');//Una variable auxiliar para recordar la cantidad, de esta forma podremos saber cuándo cambia\r\n\r\n    useEffect(() => {\r\n        if (name === '')\r\n            return;\r\n        Axios.post('http://localhost:3307/getUnpaidTasks', { name }).then((response) => {\r\n            if (response.data.length === 0)\r\n                return;\r\n            setTasks(response.data);\r\n        });\r\n        console.log('update tasks');\r\n    }, [name]);\r\n\r\n    useEffect(() => {//Cuando selectedTask cambia...\r\n        setInput({ quantity: 0, weight: 0, money: 0, threads: 0 });//Resetear los valores de Input (porque el usuario no ingresó nada)\r\n        let moneyPaid = input.money;\r\n        Axios.post('http://localhost:3307/getParts', { task: selectedTask.id }).then(response => {\r\n            setParts(response.data)//Recuperar partes desde la BD y asignarselas a parts\r\n            response.data.map(part => moneyPaid += part.money);//Sumar a moneyPaid todo lo pagado en cada parte\r\n            if (name)//Si se sabe el nombre del taller...\r\n                Axios.post('http://localhost:3307/getAccount', { name }).then(response => {//Recuperar de la BD la cuenta corriente del taller\r\n                    setAccount(response.data[0].money);\r\n                });\r\n        });\r\n    }, [selectedTask]);\r\n\r\n    useEffect(() => {\r\n        let delivered = input.quantity;\r\n        let moneyPaid = isNaN(input.money) ? 0 : input.money;\r\n        parts.map(part => moneyPaid = Number(moneyPaid) + Number(part.money));//Sumar a moneyPaid todo lo pagado en cada parte\r\n        parts.map(part => delivered += part.quantity);//Sumar a delivered todas las cantidades entregadas en cada parte\r\n        if (quantityBackUp !== input.quantity) {//Si se modificó la cantidad\r\n            input.money = input.quantity * selectedTask.price - account;//Le recomienda al usuario pagar todo lo que debe pagar (lo entregado en esta parte * el precio acordado - la cuenta corriente de esta parte)\r\n            input.money = input.money < 0 ? 0 : input.money;//No se le puede recomendar pagar un número negativo\r\n            setQuantityBackUp(input.quantity);//Volver a actualizar la cantidad\r\n        }\r\n        onChange(input, selectedTask.price, selectedTask.quantity - delivered, selectedTask.id,//Se envían los cambios\r\n            delivered === selectedTask.quantity || completed, selectedTask.quantity * selectedTask.price <= moneyPaid, input.quantity * selectedTask.price - moneyPaid - account, account);//TODO: Revisar fórmula para leftover (workshopAccount)\r\n        //onChange(data, price, faulty, task, completed, paid, workshopAccount, usedAccount)//objeto con todo lo ingresado, precio, artículos fallados, id de tarea, si se entregaron todos los artículos, si se pagó la totalidad de la tarea, lo que le quedará de cuenta corriente al taller luego de la parte y la cantidad de dinero utilizado de la cuenta corriente\r\n    }, [input, completed, refund]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const inputField = (property, total) => {//Función que devuelve un inputbox para ingresar datos al objeto input. propery\r\n        //property es la propiedad de input que se quiere modificar con el inputbox y total es el objeto que contiene todos los totales\r\n        return (\r\n            <FormControl value={input[property]}//Asignar al inputbox la variable input[property], es decir que cada vez que el inputbox se modifica, la variable también y vice versa\r\n                onChange={(e) => {//Cuando cambia el inputbox...\r\n                    let value = e.target.value;\r\n                    if (isNaN(value) || (total[property] < value && property !== 'money'))//Si el valor es inválido...\r\n                        return;//Cancelar\r\n                    let aux = { ...input };\r\n                    aux[property] = (value[value.length - 1] === '.') ? value : Number(value);\r\n                    aux[property] = (refund) ?//Si se está haciendo una devolución de mercadería o se contó mal la mercadería en una parte anterior\r\n                        -Math.abs(aux[property]) ://Poner en negativo lo ingresado (así se suma y no se resta al total)\r\n                        (aux[property] < 0) ? 0 : aux[property];//Si la propiedad es negativa, convertir en 0\r\n                    if (property === 'quantity' || property === 'threads')//Si la propiedad es cantidad o hilos...\r\n                        aux[property] = Math.round(aux[property]);//No puede ser decimal\r\n                    setInput({ ...aux });\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const getTable = () => {\r\n\r\n        let total = {\r\n            quantity: selectedTask.quantity,\r\n            weight: selectedTask.weight,\r\n            money: selectedTask.quantity * selectedTask.price,\r\n            threads: selectedTask.threads\r\n        };\r\n        return (\r\n            <>\r\n                {parts.map((part, index) => {\r\n                    total = {\r\n                        quantity: total.quantity - part.quantity,\r\n                        weight: total.weight - part.weight,\r\n                        money: total.money - part.money,\r\n                        threads: total.threads - part.threads,\r\n                    };\r\n                    return (\r\n                        <tr key={index}>{/*Muestra el medio*/}\r\n                            <td>{part.date}</td>\r\n                            <td>{part.quantity}</td>\r\n                            <td>{total.quantity}</td>\r\n                            <td>{Number(part.weight).toFixed(1)}</td>\r\n                            <td>{Number(total.weight).toFixed(1)}</td>\r\n                            <td>{part.threads}</td>\r\n                            <td>{total.threads}</td>\r\n                            <td>{'$' + Number(part.money).toFixed(1)}</td>\r\n                            <td>{ }</td>\r\n                            <td>{'$' + Number(total.money).toFixed(1)}</td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                <tr>{/*Muestra la última fila*/}\r\n                    <td>{moment(new Date()).format('DD/MM/YYYY')}</td>\r\n                    <td>{inputField('quantity', total)}</td>\r\n                    <td>{total.quantity - input.quantity}</td>\r\n                    <td>{inputField('weight', total)}</td>\r\n                    <td>{(total.weight - input.weight).toFixed(1)}</td>\r\n                    <td>{inputField('threads', total)}</td>\r\n                    <td>{total.threads - input.threads}</td>\r\n                    <td>{inputField('money', total)}</td>\r\n                    <td>{'$' + account}</td>\r\n                    <td>{'$' + (total.money - input.money - account).toFixed(1)}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getExceeded = () => {//Devuelve true si se excedió la fecha de entrega\r\n        if (!selectedTask.deadline)\r\n            return;\r\n        let today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        var dateParts = selectedTask.deadline.split('/');\r\n        var deadline = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        return today > deadline;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ 'justifyContent': 'space-between', 'display': 'flex', 'alignItems': 'baseline' }}>\r\n                <TaskRequest setSelectedTask={setSelectedTask} tasks={tasks} title={title} setTitle={setTitle} />\r\n                <h4 style={{ 'color': getExceeded() ? 'red' : 'green' }}>\r\n                    {(selectedTask === '') ? null : selectedTask.deadline}\r\n                </h4>\r\n            </div>\r\n            {title === 'Elegir tarea' ? null :\r\n                <>\r\n                    <Form.Check onChange={() => {\r\n                        setRefund(!refund);\r\n                        input.money = -input.money;\r\n                        input.quantity = -input.quantity;\r\n                        input.threads = -input.threads;\r\n                        input.weight = -input.weight;\r\n                    }} label=\"Devolución o corrección\" />\r\n                    <Form.Check onChange={() => setCompleted(!completed)} label=\"Tarea cerrada\" />\r\n                    <Table striped bordered id=\"taskTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Fecha</th>\r\n                                <th>Cantidad entregada por el taller</th>\r\n                                <th>Cantidad total de la tarea</th>\r\n                                <th>Peso entregado por el taller</th>\r\n                                <th>Peso total</th>\r\n                                <th>Hilos devueltos</th>\r\n                                <th>Hilos totales</th>\r\n                                <th>Dinero entregado</th>\r\n                                <th>Dinero a cuenta</th>\r\n                                <th>Dinero total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                                <td>{selectedTask.exitDate}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.quantity}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.weight}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.threads}</td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td>{'$' + selectedTask.price * selectedTask.quantity}</td>\r\n                            </tr>\r\n                            {getTable()}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js",["121"],"import React from 'react';\r\nimport { ModalWork } from './modals';\r\nimport { ModalArt } from './modals';\r\nimport { ModalController } from '../../modal';\r\nimport PropTypes from 'prop-types';\r\nimport image from '../Images/registrationDrop.gif'\r\n\r\nexport class ArtWorkButton extends ModalController {\r\n\r\n    state = {\r\n        ...this.state,//Hereda los estados de ModalController (showModal: false)\r\n        modify: 'reg'\r\n    }\r\n\r\n    showModal = e => {//Cuando se presione el botón se ejecuta\r\n        this.setState({ showModal: true, modify: e })\r\n        //modify toma el valor pasado en el botón y se muestra el modal\r\n    }\r\n\r\n    callModal = () => {\r\n        if (this.props.article)\r\n            return (\r\n                <ModalArt handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n            );\r\n        return (\r\n            <ModalWork handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='card2WorkshopAdm'>\r\n                <p className='pWorkshopAdm'>{this.props.article ? 'Artículo' : 'Actualizar datos de taller'}</p>\r\n                <img id='imagen_diferente' src={image}/>\r\n                <div className='containerWorkshopAdm'>\r\n                    <button className='button4WorkshopAdm' onClick={() => this.showModal('reg')}>\r\n                        Alta\r\n                    </button>\r\n                    <button className='button5WorkshopAdm' onClick={() => this.showModal('drop')}>\r\n                        Baja\r\n                    </button>\r\n                    <button className='button6WorkshopAdm' onClick={() => this.showModal('update')}>\r\n                        Modificar\r\n                    </button>\r\n                </div>\r\n\r\n                {this.callModal()}\r\n                {/*Llama al Modal encargado de los Artículos*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nArtWorkButton.propTypes = {\r\n    article: PropTypes.bool.isRequired //Especifica si se debe hacer un botón sobre artículos o talleres\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js",["122","123","124","125","126"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\showData.js",["127","128","129","130","131","132","133","134","135","136","137"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickSuspended.js",["138","139","140","141"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickToDos.js",["142","143","144","145"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js",["146","147","148","149","150","151","152","153","154"],"<<<<<<< Updated upstream\r\nimport React, { Component } from 'react';\r\nexport class ViewQuery extends Component {\r\n    render(){\r\n        return (<h1>Hello</h1>)\r\n    }\r\n}\r\n=======\r\nimport React, {Component} from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport viewQueryLogo from './Images/viewQuery.gif';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst initialState = {\r\n    filterInputs: [undefined, undefined, undefined, undefined, undefined, undefined, undefined], /*La cantidad de filtros es estática.*/\r\n    table: [],              /*La tabla de datos sin filtrar. Actualmente, se muestra la tabla completa, pero se puede mejorar el sistema para que se realice la primera consulta una vez se haya ingresado un dato a uno de los filtros.*/\r\n    filteredTable: []      /*La tabla de datos filtrada.*/\r\n};\r\n\r\nexport class ViewQuery extends Component{\r\n\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    setData = () => {\r\n        Axios.get(/*Hacerle un localhost a la tabla de datos cuando la termine Michat ->*/'*/get').then(response => {\r\n            const table = []; \r\n            if (response.data){\r\n                table = response.data.map(row => Object.values(row));\r\n                this.setState({table, filteredTable: table});\r\n            }\r\n        });\r\n    };\r\n\r\n    filter(filterType, i) { {/*Crea la fila de los filtros y modifica el array filterInputs*/}\r\n        switch(filterType) {\r\n            case \"number\":\r\n                return <td>\r\n                    <input type='number' onChange={(e) => {\r\n                        let aux = this.state.filterInputs;\r\n                        if(aux[i] === '')\r\n                            aux[i] = ' ';\r\n                        let firstChar = aux[i][0];\r\n                        aux[i] = firstChar + e.target.value;\r\n                        this.setState({filterInputs: aux});\r\n                        this.updateTable(filterType);\r\n                    }}></input>\r\n                    <select onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.updateTable(filterType);\r\n                    }}>\r\n                        <option value='>'>Mayor</option>\r\n                        <option value='<'>Menor</option>\r\n                        <option value='='>Igual</option>\r\n                    </select>\r\n                </td>\r\n            case 'string':\r\n                return <td>\r\n                    <input type='text' onChange={(e) => {\r\n                        let aux = this.state.filterInputs;\r\n                        aux[i] = e.target.value;\r\n                        this.setState({filterInputs: aux});\r\n                        this.updateTable();\r\n                    }}></input>\r\n                </td>\r\n        }\r\n    }\r\n\r\n    updateTable = (filterType) => {                                      /*Actualiza la tabla mostrada con el input de los filtros*/\r\n        const {table, filterInputs} = this.state;\r\n        let filteredTable = table.slice().filter(row => row.every((cell, j) => {\r\n            let filterInput = filterInputs[j];\r\n            let operator = filterInput[0];\r\n            switch(filterType) {\r\n                case 'string':\r\n                    let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                    return cellString.toLowerCase().includes(filterInput)\r\n                case 'number':\r\n                    let number = filterInput.slice(1, filterInput.length);\r\n                    if(filterInput === '')\r\n                        return true;                            /*Si no hay números a los que comparar, se devolverá true*/\r\n\r\n                    number = Number(number);\r\n                    switch(operator){\r\n                        case ' ':\r\n                            return true;                        /*Si no hay operador, no se sabe como comparar, por lo que devuelve true */\r\n                        case '>':\r\n                            return number < cell;               /*Si el numero es mayor o igual a la celda, devuelve false*/\r\n                        case '<':\r\n                            return number > cell;               /*Si el numero es mayor o igual a la celda, devuelve false*/\r\n                        case '=':\r\n                            return number === cell;              /**Si el numero  es diferente a la celda, devuelve false*/\r\n                    }\r\n                    break;\r\n            }\r\n        }));\r\n        if (this.state.filteredTable !== filteredTable)    /*Si la tabla de this.state.filteredTable (que es la tabla mostrada actualmente) es diferente a filteredTable (que es la actualización de la tabla), se actualizará el estado de filteredTable.*/\r\n            this.setState({filteredTable});                /*Si las dos tablas son iguales, no hay necesidad de actualizar filteredTable.*/\r\n    }\r\n\r\n    myQueries() {\r\n        return (\r\n            <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th> {/*Título del Diseño*/}\r\n                        <th>Nombre del Cliente</th> {/*Título del Diseño*/}\r\n                        <th>ID Artículo</th> {/*Título del Diseño*/}\r\n                        <th>Descripción del Artículo</th> {/*Título del Diseño*/}\r\n                        <th>Cantidad</th> {/*Título del Diseño*/}\r\n                        <th>Colores</th> {/*Título del Diseño*/}\r\n                        <th>Fecha de Entrada</th> {/*Título del Diseño*/}\r\n                    </tr>\r\n                </thead>\r\n                <tr>\r\n                    {this.filter('number', 0)}\r\n                    {this.filter('string', 1)}\r\n                    {this.filter('number', 2)}\r\n                    {this.filter('string', 3)}\r\n                    {this.filter('number', 4)}\r\n                    {this.filter('string', 5)}\r\n                    {this.filter('string', 6)}\r\n                </tr>\r\n                {this.state.table.map(row => {  {/*La cantidad de rows es variable, dependiendo de la cantidad de registros que haya en la tabla*/}\r\n                    <tr>\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                    </tr>\r\n                })}\r\n            </Table>\r\n            \r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Visualizar Pedidos' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor3' imageClassName='imgVendor' logo={viewQueryLogo} title={'Visualizar Pedidos'} post={this.post()} children={this.myQueries()} />\r\n        );\r\n    }\r\n    \r\n\r\n    post() {\r\n        // Este post existe para no sacar el isRequired del prop \"post\" de modalOpener en caso de que sea necesario.\r\n        return function() {};\r\n    }\r\n}\r\n\r\n\r\n{/* <Table striped bordered>\r\n<thead>\r\n    <tr>\r\n        {titles.map((title, i) => this.header(title, i))}\r\n    </tr>\r\n</thead>\r\n<tbody>\r\n    <tr>\r\n    {this.state.filters.map((filter, i) => {\r\n        switch (filter) {\r\n            case 'input':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    aux[i] = e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/></td>\r\n            case 'number':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = ' ';\r\n                    let firstChar = aux[i][0];\r\n                    aux[i] = firstChar + e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/>\r\n                \r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                </DropdownButton></td>\r\n            case 'date':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = ' ';\r\n                    let firstChar = aux[i][0];\r\n                    aux[i] = firstChar + e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/>\r\n                \r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                </DropdownButton></td>\r\n            default:\r\n                if(!filter[0])\r\n                    return <td key={i}></td>;\r\n                return <td key={i}>\r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    aux[i] = e;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    {filter.map((element, index) => \r\n                    <Dropdown.Item key={index} eventKey={element}>{element}</Dropdown.Item>)}\r\n                </DropdownButton></td>        \r\n        }\r\n    })}\r\n    </tr>\r\n    {filteredTable.map((row, i) => {\r\n        return (\r\n            <tr key={i}>\r\n                {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n            </tr>\r\n        );\r\n    })}\r\n</tbody>\r\n</Table> */}\r\n>>>>>>> Stashed changes\r\n",["155","156"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\index.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\newTask.js",["157","158"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\showOrders.js",["159","160","161","162","163","164","165","166","167","168","169"],{"ruleId":"170","severity":1,"message":"171","line":3,"column":8,"nodeType":"172","messageId":"173","endLine":3,"endColumn":13},{"ruleId":"170","severity":1,"message":"174","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":14},{"ruleId":"170","severity":1,"message":"175","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":20},{"ruleId":"170","severity":1,"message":"176","line":6,"column":22,"nodeType":"172","messageId":"173","endLine":6,"endColumn":28},{"ruleId":"170","severity":1,"message":"177","line":7,"column":5,"nodeType":"172","messageId":"173","endLine":7,"endColumn":11},{"ruleId":"170","severity":1,"message":"178","line":8,"column":5,"nodeType":"172","messageId":"173","endLine":8,"endColumn":10},{"ruleId":"170","severity":1,"message":"179","line":9,"column":5,"nodeType":"172","messageId":"173","endLine":9,"endColumn":9},{"ruleId":"180","severity":1,"message":"181","line":59,"column":17,"nodeType":"182","endLine":59,"endColumn":41},{"ruleId":"183","severity":1,"message":"184","line":61,"column":21,"nodeType":"182","endLine":61,"endColumn":60},{"ruleId":"170","severity":1,"message":"185","line":1,"column":28,"nodeType":"172","messageId":"173","endLine":1,"endColumn":37},{"ruleId":"170","severity":1,"message":"186","line":5,"column":9,"nodeType":"172","messageId":"173","endLine":5,"endColumn":18},{"ruleId":"170","severity":1,"message":"187","line":3,"column":19,"nodeType":"172","messageId":"173","endLine":3,"endColumn":30},{"ruleId":"170","severity":1,"message":"188","line":3,"column":32,"nodeType":"172","messageId":"173","endLine":3,"endColumn":50},{"ruleId":"170","severity":1,"message":"189","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":13},{"ruleId":"170","severity":1,"message":"190","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":13},{"ruleId":"170","severity":1,"message":"191","line":10,"column":8,"nodeType":"172","messageId":"173","endLine":10,"endColumn":14},{"ruleId":"170","severity":1,"message":"192","line":11,"column":8,"nodeType":"172","messageId":"173","endLine":11,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":48,"column":29,"nodeType":"195","messageId":"196","endLine":48,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":65,"column":42,"nodeType":"195","messageId":"196","endLine":65,"endColumn":44},{"ruleId":"170","severity":1,"message":"197","line":121,"column":56,"nodeType":"172","messageId":"173","endLine":121,"endColumn":67},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"193","severity":1,"message":"194","line":118,"column":42,"nodeType":"195","messageId":"196","endLine":118,"endColumn":44},{"ruleId":"202","severity":1,"message":"203","line":140,"column":8,"nodeType":"204","endLine":140,"endColumn":18,"suggestions":"205"},{"ruleId":"198","replacedBy":"206"},{"ruleId":"200","replacedBy":"207"},{"ruleId":"202","severity":1,"message":"208","line":176,"column":8,"nodeType":"204","endLine":176,"endColumn":22,"suggestions":"209"},{"ruleId":"183","severity":1,"message":"184","line":34,"column":17,"nodeType":"182","endLine":34,"endColumn":57},{"ruleId":"170","severity":1,"message":"210","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":15},{"ruleId":"170","severity":1,"message":"211","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":22},{"ruleId":"170","severity":1,"message":"212","line":12,"column":10,"nodeType":"172","messageId":"173","endLine":12,"endColumn":18},{"ruleId":"193","severity":1,"message":"194","line":89,"column":29,"nodeType":"195","messageId":"196","endLine":89,"endColumn":31},{"ruleId":"170","severity":1,"message":"213","line":571,"column":12,"nodeType":"172","messageId":"173","endLine":571,"endColumn":17},{"ruleId":"170","severity":1,"message":"191","line":9,"column":8,"nodeType":"172","messageId":"173","endLine":9,"endColumn":14},{"ruleId":"170","severity":1,"message":"214","line":10,"column":8,"nodeType":"172","messageId":"173","endLine":10,"endColumn":19},{"ruleId":"193","severity":1,"message":"194","line":47,"column":61,"nodeType":"195","messageId":"196","endLine":47,"endColumn":63},{"ruleId":"215","severity":1,"message":"216","line":49,"column":17,"nodeType":"217","messageId":"218","endLine":122,"endColumn":18},{"ruleId":"193","severity":1,"message":"194","line":139,"column":28,"nodeType":"195","messageId":"196","endLine":139,"endColumn":30},{"ruleId":"193","severity":1,"message":"194","line":190,"column":28,"nodeType":"195","messageId":"196","endLine":190,"endColumn":30},{"ruleId":"193","severity":1,"message":"194","line":192,"column":31,"nodeType":"195","messageId":"196","endLine":192,"endColumn":33},{"ruleId":"215","severity":1,"message":"216","line":195,"column":17,"nodeType":"217","messageId":"218","endLine":253,"endColumn":18},{"ruleId":"215","severity":1,"message":"216","line":213,"column":25,"nodeType":"217","messageId":"218","endLine":226,"endColumn":26},{"ruleId":"215","severity":1,"message":"216","line":237,"column":25,"nodeType":"217","messageId":"218","endLine":250,"endColumn":26},{"ruleId":"170","severity":1,"message":"219","line":265,"column":39,"nodeType":"172","messageId":"173","endLine":265,"endColumn":44},{"ruleId":"170","severity":1,"message":"220","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":17},{"ruleId":"170","severity":1,"message":"187","line":3,"column":19,"nodeType":"172","messageId":"173","endLine":3,"endColumn":30},{"ruleId":"170","severity":1,"message":"190","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"221","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":12},{"ruleId":"170","severity":1,"message":"220","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":17},{"ruleId":"170","severity":1,"message":"187","line":3,"column":19,"nodeType":"172","messageId":"173","endLine":3,"endColumn":30},{"ruleId":"170","severity":1,"message":"190","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"221","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":12},{"ruleId":"222","severity":1,"message":"223","line":25,"column":17,"nodeType":"172","messageId":"224","endLine":25,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":31,"column":29,"nodeType":"227","messageId":"228","endLine":31,"endColumn":95},{"ruleId":"215","severity":1,"message":"216","line":32,"column":9,"nodeType":"217","messageId":"218","endLine":67,"endColumn":10},{"ruleId":"193","severity":1,"message":"229","line":72,"column":77,"nodeType":"195","messageId":"230","endLine":72,"endColumn":79},{"ruleId":"215","severity":1,"message":"216","line":75,"column":13,"nodeType":"217","messageId":"218","endLine":96,"endColumn":14},{"ruleId":"215","severity":1,"message":"216","line":85,"column":21,"nodeType":"217","messageId":"218","endLine":94,"endColumn":22},{"ruleId":"193","severity":1,"message":"194","line":125,"column":43,"nodeType":"195","messageId":"196","endLine":125,"endColumn":45},{"ruleId":"225","severity":1,"message":"226","line":125,"column":49,"nodeType":"227","messageId":"228","endLine":125,"endColumn":148},{"ruleId":"225","severity":1,"message":"231","line":153,"column":1,"nodeType":"227","messageId":"232","endLine":242,"endColumn":13},{"ruleId":"198","replacedBy":"233"},{"ruleId":"200","replacedBy":"234"},{"ruleId":"170","severity":1,"message":"235","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"193","severity":1,"message":"194","line":41,"column":29,"nodeType":"195","messageId":"196","endLine":41,"endColumn":31},{"ruleId":"170","severity":1,"message":"220","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":17},{"ruleId":"170","severity":1,"message":"187","line":3,"column":19,"nodeType":"172","messageId":"173","endLine":3,"endColumn":30},{"ruleId":"170","severity":1,"message":"191","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":14},{"ruleId":"170","severity":1,"message":"221","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":12},{"ruleId":"193","severity":1,"message":"194","line":53,"column":28,"nodeType":"195","messageId":"196","endLine":53,"endColumn":30},{"ruleId":"193","severity":1,"message":"194","line":55,"column":31,"nodeType":"195","messageId":"196","endLine":55,"endColumn":33},{"ruleId":"215","severity":1,"message":"216","line":58,"column":17,"nodeType":"217","messageId":"218","endLine":90,"endColumn":18},{"ruleId":"215","severity":1,"message":"216","line":75,"column":25,"nodeType":"217","messageId":"218","endLine":88,"endColumn":26},{"ruleId":"170","severity":1,"message":"219","line":102,"column":39,"nodeType":"172","messageId":"173","endLine":102,"endColumn":44},{"ruleId":"193","severity":1,"message":"236","line":113,"column":61,"nodeType":"195","messageId":"230","endLine":113,"endColumn":63},{"ruleId":"215","severity":1,"message":"216","line":114,"column":29,"nodeType":"217","messageId":"218","endLine":146,"endColumn":30},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'Vendor' is defined but never used.","'WorkshopsAdm' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useEffect' is defined but never used.","'ViewQuery' is defined but never used.","'TaskRequest' is defined but never used.","'RawResourceRequest' is defined but never used.","'Table' is defined but never used.","'Axios' is defined but never used.","'Button' is defined but never used.","'ReactToPrint' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'currentYear' is assigned a value but never used.","no-native-reassign",["237"],"no-negated-in-lhs",["238"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'input' and 'materialsData'. Either include them or remove the dependency array.","ArrayExpression",["239"],["237"],["238"],"React Hook useEffect has missing dependencies: 'input.money' and 'name'. Either include them or remove the dependency array.",["240"],"'Popover' is defined but never used.","'OverlayTrigger' is defined but never used.","'ModalArt' is defined but never used.","'shown' is assigned a value but never used.","'ButtonGroup' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'table' is assigned a value but never used.","'Request' is defined but never used.","'Form' is defined but never used.","no-const-assign","'table' is constant.","const","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.every() expects a value to be returned at the end of arrow function.","expectedAtEnd","Block is redundant.","redundantBlock",["237"],["238"],"'Component' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","no-global-assign","no-unsafe-negation",{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},"Update the dependencies array to be: [input, input.id, materialsData]",{"range":"245","text":"246"},"Update the dependencies array to be: [input.money, name, selectedTask]",{"range":"247","text":"248"},[5961,5971],"[input, input.id, materialsData]",[7813,7827],"[input.money, name, selectedTask]"]