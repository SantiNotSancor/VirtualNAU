[{"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\index.js":"1","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Login\\index.js":"2","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\index.js":"3","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js":"4","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\showData.js":"5","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\newQuery.js":"6","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js":"7","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\addStock.js":"8","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js":"9","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js":"10","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js":"11","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\modalOpener.js":"12","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\textInputs.js":"13","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\modal.js":"14","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js":"15","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Production\\index.js":"16","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\demsar.js":"17","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js":"18","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Production\\showOrders.js":"19","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Production\\newTask.js":"20"},{"size":465,"mtime":1668113285465,"results":"21","hashOfConfig":"22"},{"size":3993,"mtime":1668111570810,"results":"23","hashOfConfig":"22"},{"size":858,"mtime":1668111570982,"results":"24","hashOfConfig":"22"},{"size":1050,"mtime":1668111570986,"results":"25","hashOfConfig":"22"},{"size":17305,"mtime":1668111571008,"results":"26","hashOfConfig":"22"},{"size":5125,"mtime":1668111570983,"results":"27","hashOfConfig":"22"},{"size":3921,"mtime":1668111570987,"results":"28","hashOfConfig":"22"},{"size":9368,"mtime":1668111570982,"results":"29","hashOfConfig":"22"},{"size":16378,"mtime":1668108035012,"results":"30","hashOfConfig":"22"},{"size":8808,"mtime":1668108034932,"results":"31","hashOfConfig":"22"},{"size":2099,"mtime":1668108034859,"results":"32","hashOfConfig":"22"},{"size":2303,"mtime":1668111571007,"results":"33","hashOfConfig":"22"},{"size":22237,"mtime":1668111571014,"results":"34","hashOfConfig":"22"},{"size":2613,"mtime":1668111571006,"results":"35","hashOfConfig":"22"},{"size":6908,"mtime":1668108034858,"results":"36","hashOfConfig":"22"},{"size":609,"mtime":1668111570811,"results":"37","hashOfConfig":"22"},{"size":2606,"mtime":1668113394270,"results":"38","hashOfConfig":"22"},{"size":10822,"mtime":1668111570984,"results":"39","hashOfConfig":"22"},{"size":9071,"mtime":1668111570837,"results":"40","hashOfConfig":"22"},{"size":5206,"mtime":1668111570836,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"ca867v",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"49"},"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\index.js",["91","92","93","94"],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Login\\index.js",["95","96","97","98","99","100"],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\index.js",["101","102"],"import React, { Component, useEffect } from 'react';\r\nimport {AddStock} from './addStock';\r\nimport {NewQuery} from './newQuery';\r\n// import {TickSuspended} from './tickSuspended';\r\n// import {TickToDos} from './tickToDos';\r\n// import './styles.css';\r\n\r\nexport default class Vendor extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <style>{'body {background-color: #20154D; background-Image: url(http://localhost:3000/waveVendor.png); background-repeat: no-repeat; background-size: contain;'}</style>\r\n        <h2 className='indexVendorh2'>¿Qué desea hacer?</h2>\r\n        <div><NewQuery/></div>\r\n        <div><AddStock/></div>\r\n        {/* <div><ViewQuery/></div> */}\r\n        {/* <TickSuspended />\r\n        <TickToDo /> */}\r\n      </>\r\n    );\r\n  }\r\n}",["103","104"],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js",[],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\showData.js",["105","106","107","108","109","110","111","112","113","114","115"],"import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalOpener } from './modalOpener';\r\nimport viewQueryLogo from './Vendor/Images/viewQuery.gif';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nconst initialState = {\r\n    data: '', //El nombre de la BD de la que sacamos los datos\r\n    table: [],//La tabla de datos sin filtrar\r\n    filteredTable: [],//La tabla a mostrar\r\n    titles: [],//Los atributos de la BD\r\n    headers: [],//Los títulos que se mostrarán en la tabla\r\n    input: '',//Ingreso de Inputbox para filtrar la tabla\r\n    filters: [],//Lista que muestra el tipo de filtro\r\n    filterInputs: [] //Lista que contiene lo ingresado por el usuario en cada filtro\r\n};\r\n\r\nexport class ModalShowData extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Ver datos' handleClose={this.resetState}\r\n            cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor3' imageClassName='imgVendor' logo={viewQueryLogo} title={'Visualizar Datos'} children={<ShowData />} />\r\n        );\r\n    }\r\n}\r\n\r\nexport class ShowData extends Component {\r\n\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    setData = e => {//Consigue los datos de la base de datos, en base a e, que le especifica qué datos buscar   \r\n        console.log('hi');\r\n        Axios.get('http://localhost:3307/get' + e.charAt(0).toUpperCase() + e.slice(1)).then(response => {\r\n            const res = response.data, table = [], titles = [];\r\n            if (res)\r\n                res.map(row => table.push(Object.values(row)));\r\n            Object.getOwnPropertyNames(res[0]).map(property => {\r\n                let header;\r\n                switch (property) {\r\n                    case 'date':\r\n                        header = 'Fecha';\r\n                        break;\r\n                    case 'id':\r\n                        header = 'Código';\r\n                        break;\r\n                    case 'description':\r\n                        header = 'Descripción';\r\n                        break;\r\n                    case 'name':\r\n                        header = 'Nombre';\r\n                        break;\r\n                    case 'contact':\r\n                        header = 'Contacto';\r\n                        break;\r\n                    case 'money':\r\n                        header = (this.state.data === 'Workshop') ? 'Cuenta corriente' : 'Saldo';\r\n                        break;\r\n                    case 'article_id':\r\n                        header = 'Código de artículo';\r\n                        break;\r\n                    case 'article_description':\r\n                        header = 'Descripción de artículo';\r\n                        break;\r\n                    case 'quantity':\r\n                        header = 'Cantidad';\r\n                        break;\r\n                    case 'packages':\r\n                        header = 'Bultos';\r\n                        break;\r\n                    case 'cutDate':\r\n                        header = 'Fecha de corte';\r\n                        break;\r\n                    case 'fabrics':\r\n                        header = 'Telas';\r\n                        break;\r\n                    case 'colors':\r\n                        header = 'Colores';\r\n                        break;\r\n                    case 'responsible':\r\n                        header = 'responsible/s';\r\n                        break;\r\n                    case 'generalFeatures':\r\n                        header = 'Detalles';\r\n                        break;\r\n                    case 'state':\r\n                        header = 'Estado';\r\n                        break;\r\n                    case 'exitDate':\r\n                        header = 'Fecha de salida';\r\n                        break;\r\n                    case 'deadline':\r\n                        header = 'Fecha esperada';\r\n                        break;\r\n                    case 'weight':\r\n                        header = 'Peso';\r\n                        break;\r\n                    case 'price':\r\n                        header = 'Precio unitario';\r\n                        break;\r\n                    case 'threads':\r\n                        header = 'Hilos entregados';\r\n                        break;\r\n                    case 'calification':\r\n                        header = 'Calificación';\r\n                        break;\r\n                    case 'observations':\r\n                        header = 'Observaciones';\r\n                        break;\r\n                    case 'faulty':\r\n                        header = 'Fallados';\r\n                        break;\r\n                }\r\n                titles.push(header);\r\n            });\r\n            console.log(table);\r\n            console.log(titles);\r\n            this.setState({ titles, table, filteredTable: table, data: e });\r\n            this.setFilters(titles);\r\n        });\r\n    }\r\n\r\n    header = (name, index) => {//Devuelve un HTML tipo header que diga name\r\n        return (<th key={index}>{name}</th>);\r\n    }\r\n    \r\n    setFilters = (titles) => {//Crea los filtros en base a los títulos\r\n        let filters = [];\r\n        let filterInputs = [];\r\n        titles.map((title) => {//TODO: ¿Hecho?\r\n            switch(title){\r\n                case 'Descripción':\r\n                case 'Nombre':\r\n                case 'Contacto':\r\n                case 'Código de artículo':\r\n                case 'Descripción de artículo':\r\n                case 'Telas':\r\n                case 'Colores':\r\n                case 'responsible/s':\r\n                case 'Detalles':\r\n                case 'Código':\r\n                case 'Observaciones':\r\n                    filters.push('input');\r\n                    break;\r\n                case 'Saldo':\r\n                case 'Cantidad':\r\n                case 'Bultos':\r\n                case 'Precio unitario':\r\n                case 'Peso':\r\n                case 'Hilos entregados':\r\n                case 'Calificación':\r\n                case 'Fallados':\r\n                    filters.push('number');\r\n                    break;\r\n                case 'Fecha':\r\n                case 'Fecha de corte':\r\n                case 'Fecha de salida':\r\n                case 'Fecha esperada':\r\n                    filters.push('date');\r\n                    break;\r\n                case 'Estado':\r\n                    filters.push(['Todos', 'Asignado', 'No Asignado', 'Devuelto']);\r\n                    break;\r\n                case 'Pago':\r\n                    filters.push(['Todos', 'Pago', 'No Pago']);\r\n                    break;\r\n                default:\r\n                    filters.push('');\r\n                    break;\r\n                }\r\n            filterInputs.push('');\r\n            })\r\n        this.setState({filters, filterInputs});\r\n    }\r\n\r\n    compareTable = () => {//Le asigna a filteredTable una versión filtrada de table \r\n        //TODO: table se actualiza a filteredTable ¿Hecho?\r\n        \r\n        const {table, filterInputs, filters} = this.state;\r\n        let filteredTable = table.slice(), toErase = [];\r\n        table.map((row, i) => {\r\n            let erase = false;\r\n            row.map((cell, j) => {\r\n                let filterInput = filterInputs[j];\r\n                let operator = filterInput[0];\r\n                switch(filters[j]){\r\n                    case 'input':\r\n                        let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                        if(!cellString.toLowerCase().includes(filterInput))\r\n                            erase = true;\r\n                        break;\r\n                    case 'number':\r\n                        let number = filterInput.slice(1, filterInput.length);\r\n                        if(filterInput === ''){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        if(isNaN(number) || (operator !== ' ' && operator !== '<' && operator !== '>' && operator !== '=')){\r\n                            erase = true;\r\n                            break;\r\n                        }\r\n                        \r\n                        number = Number(number);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = number >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = number <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = number !== cell;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case 'date':\r\n                        if(!(((filterInput.length === 10 && filterInput[5] === '/') || filterInput.length === 5) && filterInput[2] === '/')){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        let dateParts = filterInput.slice(1, filterInput.length).split('/');\r\n                        let date = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        dateParts = cell.split('/');\r\n                        cell = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = date >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = date <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = date !== cell;\r\n                                break;\r\n                        }\r\n                        erase = false;\r\n                        break;\r\n                }\r\n            })\r\n            if(erase)\r\n                toErase.push(i);\r\n        })\r\n        toErase = toErase.reverse();\r\n        toErase.map((element) => filteredTable.splice(element, 1));\r\n        if(this.state.filteredTable !== filteredTable)\r\n            this.setState({filteredTable});\r\n    }\r\n\r\n    render() {\r\n        const {filteredTable, titles, table} = this.state, data = { 'articles': 'Artículos', 'workshops': 'Talleres', 'payments': 'Pagos', 'tasks': 'Tareas'};\r\n        let title = 'Elegir datos a mostrar', dropdownList = [];\r\n        for (const key in data)\r\n            dropdownList.push(key);\r\n        return (\r\n            <>\r\n                <DropdownButton title={title} onSelect={e => {\r\n                    this.setData(e);\r\n                    title = data.e;\r\n                }}>\r\n                    {dropdownList.map((e, index) => <Dropdown.Item key={index} eventKey={e}>{data[e]}</Dropdown.Item>)}\r\n                </DropdownButton>\r\n                {(titles && filteredTable) ?\r\n                    <Table striped bordered>\r\n                        <thead>\r\n                            <tr>\r\n                                {titles.map((title, i) => this.header(title, i))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                            {this.state.filters.map((filter, i) => {\r\n                                switch (filter) {\r\n                                    case 'input':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            aux[i] = e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/></td>\r\n                                    case 'number':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                                        </DropdownButton></td>\r\n                                    case 'date':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                                        </DropdownButton></td>\r\n                                    default:\r\n                                        if(!filter[0])\r\n                                            return <td key={i}></td>;\r\n                                        return <td key={i}>\r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            aux[i] = e;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            {filter.map((element, index) => \r\n                                            <Dropdown.Item key={index} eventKey={element}>{element}</Dropdown.Item>)}\r\n                                        </DropdownButton></td>        \r\n                                }\r\n                            })}\r\n                            </tr>\r\n                            {filteredTable.map((row, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                    : null}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\newQuery.js",["116","117","118","119"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport newQueryLogo from './Images/newQuery.gif';\r\n\r\nconst initialState = {\r\n    customerName : '',                                                              //Añade cliente  \r\n    observation : '',                                                           //Añade observaciones\r\n    query : [{id:'', description:'', quantity:'', colour:'', toDeliver:''}]     //Lista de objetos pedido\r\n}\r\n\r\nexport class NewQuery extends Component {\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (this.state.customerName === prevState.customerName)\r\n            return;\r\n        if (!this.state.customerName)\r\n            return;\r\n        Axios.get('http://localhost:3307/getCustomer', )\r\n    }\r\n\r\n    myForm = () => {\r\n        return(\r\n            <>\r\n                <Request toShow=\"customerName\" onChange={(e) => {\r\n                    this.setState({customerName: e.target.value});\r\n                }}/>\r\n                <Request toShow=\"observation\" onChange={(e) => {\r\n                    this.setState({observation: e.target.value});\r\n                }}/>\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Color</th>\r\n                            <th>Entregar</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.query.map ((order, index) => {\r\n                            return (!order ? null :\r\n                            <tr>\r\n                                <td><FormControl value={order.id}\r\n                                    onChange={(e) => {\r\n                                        if(isNaN(e.target.event));\r\n                                            return;\r\n                                        let aux = this.state.query;\r\n                                        aux[index].id = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                    />\r\n                                </td>\r\n                                <td><FormControl value={order.description}\r\n                                    onChange={(e) => {\r\n                                        let aux = this.state.query;\r\n                                        aux[index].description = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                    />\r\n                                </td>\r\n                                <td><FormControl value={order.quantity}\r\n                                    onChange={(e) => {\r\n                                        let aux = this.state.query;\r\n                                        aux[index].quantity = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                />\r\n                                </td>\r\n                                <td><FormControl value={order.colour}\r\n                                    onChange={(e) => {\r\n                                        let aux = this.state.query;\r\n                                        aux[index].colour = e.target.event;\r\n                                        this.setState({query: aux});\r\n                                    }}\r\n                                />\r\n                                </td>\r\n                                <td>\r\n                                    <Form.Check onChange={() => {\r\n                                       let aux = this.state.query;\r\n                                        aux[index].toDeliver = !this.state.query;\r\n                                        this.setState({query: aux})\r\n                                    }}/>\r\n                                </td>\r\n                            </tr>);\r\n                            //TODO: la creacion de nuevas filas\r\n                        }\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // post = () => {      TODO: el post de los datos al tocar el boton\r\n    //     return(\r\n\r\n    //     );\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Nuevo pedido' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor1' imageClassName='imgVendor' logo={newQueryLogo} title={'Nuevo pedido'} post={this.post} children={this.myForm()} />\r\n            \r\n        );\r\n    }\r\n}","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js",[],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\addStock.js",["120","121"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport image from './Images/addStock.gif';\r\n\r\nconst initialState = {\r\n    responsible: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [{id: '', quantity: ''}]\r\n    //Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    addMaterial() {\r\n        this.setState({materials: [...this.state.materials, { id: '', quantity: '' }]})\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        let materials = this.state.materials;\r\n        materials.splice(i, 1);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(index, e, property) {\r\n        let materials = this.state.materials;\r\n        materials[index][property] = e.target.value;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//TODO: Enviar a la base de datos\r\n        console.log('hi');\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsible\" onChange={(event) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                }} />\r\n                <table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Nombre</th>\r\n                            <th>Descripción</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.materials[0]? ()=> null :\r\n                        this.state.materials.map((material, index) =>\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle. En caso de eliminarse una fila, aparecerá la cantidad como -1\r\n                        <Row onRemove={this.removeMaterial(index)} onChange={(e, property) => {\r\n                            this.changeMaterial(index, e, property);\r\n                            this.addMaterial();\r\n                        }} />)}\r\n                    </tbody>\r\n                </table>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor2' imageClassName='imgVendor' logo={image} title='Añadir stock' post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ onChange, onRemove }) => {\r\n\r\n    const [input, setInput] = useState({ id: '', name: '', description: '', quantity: '', weight: '', meters: '' });\r\n\r\n    // useEffect(() => {\r\n    //     onChange(input.id, 'id');\r\n    //     onChange(input.id, 'quantity');\r\n    // }, [input]);\r\n    //TODO:\r\n    return (\r\n        <tr><td>Hello</td></tr>\r\n        // <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n        //     <td><input type=\"text\" value={input.id}//ID\r\n        //         onChange={(e) => {\r\n        //             let aux = { ...input };\r\n        //             aux.id = e.target.value;\r\n        //             setInput({ ...aux });\r\n        //         }} />\r\n        //     </td>\r\n        //     <td><input type=\"text\" value={input.name}//Nombre\r\n        //         onChange={(e) => {\r\n        //             let aux = { ...input };\r\n        //             aux.name = e.target.value;\r\n        //             setInput({ ...aux });\r\n        //         }} /></td>\r\n        //     <td><input type=\"text\" value={input.description}//Descripción\r\n        //         onChange={(e) => {\r\n        //             let aux = { ...input };\r\n        //             aux.description = e.target.value;\r\n        //             setInput({ ...aux });\r\n        //         }} /></td>\r\n        //     <td><input type=\"number\" value={input.quantity}//Cantidad\r\n        //         onChange={(e) => {\r\n        //             if (isNaN(e.target.value) || e.target.value < 0)\r\n        //                 return;\r\n        //             let aux = { ...input };\r\n        //             aux.quantity = e.target.value;\r\n        //             setInput({ ...aux });\r\n        //         }} /></td>\r\n        //     <td><input type=\"number\" value={input.weight}//Peso\r\n        //         onChange={(e) => {\r\n        //             let aux = { ...input };\r\n        //             aux.weight = e.target.value;\r\n        //             setInput({ ...aux });\r\n        //         }} /></td>\r\n        //     <td><input type=\"number\" value={input.meters}//Metros\r\n        //         onChange={(e) => {\r\n        //             let aux = { ...input };\r\n        //             aux.meters = e.target.value;\r\n        //             setInput({ ...aux });\r\n        //         }} /></td>\r\n        //     <td><button onClick={onRemove}>X</button></td>\r\n        // </tr>\r\n    );\r\n}","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js",["122"],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js",["123","124","125","126","127"],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js",["128"],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\modalOpener.js",[],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\textInputs.js",["129","130","131","132","133"],"import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport { ModalArt, ModalWork } from './WorkshopsAdm/RegistrationDrop/modals'\r\n// import './textInputs.css';\r\n\r\nexport const Request = ({ onChange, toShow, label, value, handleEnter }) => {//Pedirá un dato con un input tipo text\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    let placeholder, auxLabel = label, checked = (input) => input !== '';\r\n\r\n    switch (toShow) {\r\n        //GENERAL\r\n        case 'observation':\r\n            label = 'Observaciones';\r\n            placeholder = 'Ingrese observaciones si las tiene';\r\n            checked = (input) => true;\r\n            break;\r\n\r\n        //TALLERES\r\n        case 'workshopName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'price':\r\n            label = 'Precio por unidad';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        case 'regName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getWorkshopNames');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        case 'regArticle':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código del artículo';\r\n            checked = async (input) => {\r\n                if (input === '' || isNaN(input))\r\n                    return false;\r\n                let response = await Axios.post('http://localhost:3307/getDescriptionWhere', { id: input });\r\n                return response.data.length === 0;\r\n            };\r\n            break;\r\n        case 'weight':\r\n            label = 'Peso de la tarea';\r\n            placeholder = 'Ingrese el peso entregado';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'deadline':\r\n            label = 'Fecha esperada';\r\n            placeholder = 'Ingrese la fecha esperada (DD/MM/AAAA)';\r\n            checked = (input) => {\r\n                let error = false;\r\n                let aux = input.split('/');\r\n                aux.map((e) => {\r\n                    if (isNaN(e))\r\n                        error = true;\r\n                })\r\n                return ((input.length === 10 && input[5] === '/') || input.length === 5) && input[2] === '/' && !error;\r\n            }\r\n            break;\r\n        case 'calification':\r\n            label = 'Calificación';\r\n            placeholder = 'Ingrese la calificación del 1 al 10';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) <= 10 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'packages':\r\n            label = 'Bultos';\r\n            placeholder = 'Ingrese la cantidad de bultos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'fabrics':\r\n            label = 'Telas';\r\n            placeholder = 'Ingrese las telas';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'responsible':\r\n            label = 'Responsables';\r\n            placeholder = 'Ingrese las personas responsables';\r\n            break;\r\n        case 'generalFeatures':\r\n            label = 'Características generales';\r\n            placeholder = 'Ingrese las características generales';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'colors':\r\n            label = 'Colores';\r\n            placeholder = 'Ingrese los colores';\r\n            break;\r\n        case 'threads':\r\n            label = 'Hilos';\r\n            placeholder = 'Ingrese la cantidad de hilos';\r\n            break;\r\n            \r\n        //VENDEDOR\r\n        case 'customerName':\r\n            label = 'Nombre del cliente';\r\n            placeholder = 'Ingrese el nombre del/la cliente';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getCustomerName');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        default:\r\n            console.error(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n\r\n    label = (auxLabel) ? auxLabel : label;\r\n    placeholder += '…';\r\n    return (\r\n        (toShow === 'workshopName') ? <NameRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n            ((toShow === 'article') ? <ArticleRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n                <Form.Group>\r\n                    <Form.Label>{label}</Form.Label>\r\n                    <InputGroup>\r\n                        {(toShow === 'money' || toShow === 'price') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                        <FormControl type=\"text\" placeholder={placeholder} value={value} onKeyDown={handleEnter} onChange={(e) => {\r\n                            let res;\r\n                            if (checked[Symbol.toStringTag] !== 'AsyncFunction') {\r\n                                res = checked(e.target.value);\r\n                                setError(!res);\r\n                                onChange(e, error);\r\n                            }\r\n                            else\r\n                                checked(e.target.value).then(result => {\r\n                                    setError(!result);\r\n                                    onChange(e, error);\r\n                                });\r\n                        }} />\r\n                        {(toShow === 'weight') ? <InputGroup.Text>kg</InputGroup.Text> : <></>}\r\n                    </InputGroup>\r\n                    {error ? <em>El valor ingresado no es válido</em> : <></>}\r\n                </Form.Group>)\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    handleEnter: PropTypes.func\r\n}\r\nexport class RawResourceRequest extends Component {\r\n    static propTypes = {\r\n        onChange: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n\r\n            \r\n            showModal: false,\r\n            suggestions: [],\r\n            inicialized: false\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {//TODO: MICHAT Obtener una lista con el formato id: nombre (descripción) de todas las materias primas\r\n        if(this.inicialized)\r\n            return\r\n        // Axios.get('http://localhost:3307/getArticle').then((response) => {\r\n        //     setArticle(response.data.map(article => article.id + ': ' + article.description));\r\n        // })\r\n        this.setState({suggestions: ['15: Cierre (Marca SanCor)', '4: Pasador (Amarillo)', '6: Cable (De cobre)']});//Porivisional para probar las funcionalidades\r\n        this.setState({inicialized: true});\r\n    }\r\n\r\n    updateList = () => {//TODO: MICHAT Obtener una lista con el formato id: nombre (descripción) de todas las materias primas\r\n        if(this.inicialized)\r\n            return\r\n        // Axios.get('http://localhost:3307/getArticle').then((response) => {\r\n        //     setArticle(response.data.map(article => article.id + ': ' + article.description));\r\n        // })\r\n        this.setState({suggestions: ['15: Cierre (Marca SanCor)', '4: Pasador (Amarillo)', '6: Cable (De cobre)']});//Porivisional para probar las funcionalidades\r\n        this.setState({inicialized: true});\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.state;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.state.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.state.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nconst ArticleRequest = ({ placeholder, onChange, handleEnter }) => {\r\n    const [articles, setArticles] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n\r\n    const getList = () => {\r\n        if(inicialized)\r\n            return;\r\n        Axios.get('http://localhost:3307/getArticles').then((response) => {\r\n            setArticles(response.data.map(article => article.id + ': ' + article.description));\r\n        });\r\n        setInicialized(false);\r\n    }\r\n\r\n    useEffect(getList);\r\n\r\n    const myOnChange = (event, error) => {\r\n        if (event.indexOf(':') > 0)\r\n            event = event.substr(0, event.indexOf(':'));\r\n        onChange(event, error);\r\n    }\r\n\r\n    return (\r\n        <Autocomplete suggestions={articles} onChange={myOnChange} handleEnter={handleEnter}\r\n            placeholder={placeholder} updateList={getList} />\r\n    );\r\n}\r\nArticleRequest.propTypes = {\r\n    placeholder: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    handleEnter: PropTypes.func\r\n}\r\n\r\nconst NameRequest = ({ label, placeholder, onChange, handleEnter }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n    \r\n    const getList = () => {\r\n        if(inicialized)\r\n        return;\r\n        Axios.get('http://localhost:3307/getWorkshopNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n        setInicialized(false);\r\n    }\r\n    \r\n    useEffect(getList);\r\n     \r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })} handleEnter={handleEnter}\r\n                onChange={onChange} placeholder={placeholder} updateList={getList} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = ArticleRequest.propTypes;\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        updateList: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.props.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.props.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        placeholder={this.props.placeholder}\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.props.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nexport const TaskRequest = ({ setSelectedTask, tasks, title, setTitle, handleEnter }) => {\r\n    \r\n    const [shown, setShown] = useState(false);\r\n    \r\n    if (!tasks)\r\n        return null;\r\n\r\n    return (\r\n        <DropdownButton title={title} onToggle={setShown} onSelect={(e) => {\r\n            setTitle('T' + tasks[e].id + ': ' + tasks[e].article_id + ' (' + tasks[e].article_description + ') x' + tasks[e].quantity + (tasks[e].price ? ' a $' + tasks[e].price : ''));\r\n            setSelectedTask(tasks[e]);\r\n        }} >\r\n            {tasks.map((task, index) =>\r\n                <Dropdown.Item key={task.id} eventKey={index}>\r\n                    {task.id + ': ' + task.article_id + ' (' + task.article_description + ') x' + task.quantity + (task.price ? ' a $' + task.price : '')}\r\n                </Dropdown.Item>)\r\n            }\r\n        </DropdownButton>\r\n    );\r\n}\r\n\r\n// const ArticleRequest = ({ label, placeholder, onChange }) => {\r\n\r\n//     const [id, setId] = useState('');\r\n//     const [description, setDescription] = useState('');\r\n//     const [error, setError] = useState(false);\r\n//     const [show, setShow] = useState(false);\r\n\r\n//     const getDescription = (userInput) => {\r\n//         Axios.post('http://localhost:3307/getDescriptionWhere', { id: userInput }).then((response) => {\r\n//             setError(response.data.length === 0);\r\n//             if (response.data.length !== 0)\r\n//                 setDescription(response.data[0].description);\r\n//             else\r\n//                 setDescription('');\r\n//         });\r\n//     }\r\n\r\n//     const autoComplete = () => {\r\n//         {/* TODO: Que muestre un autocomplete (como el de talleres) que recupere el art. por su desc.\r\n//             Puede ser literalmente el mismo, que cada una de las opciones sea con el formato: \"art: desc\"\r\n//             De esta forma, al buscar la desc, ya dice el artículo. Lo ideal searía que luego lo ingrese auto\r\n//             máticamente*/}\r\n//         return;\r\n//     };\r\n\r\n//     const popover = (\r\n//         <Popover>\r\n//             <Popover.Header as=\"h3\">Descripción de artículo</Popover.Header>\r\n//             <Popover.Body>\r\n//                 {error ?\r\n//                     <>\r\n//                         <em>No existe este código de artículo</em>\r\n//                         <Button onClick={() => {\r\n//                             setId('');\r\n//                             setShow(true);\r\n//                         }}>Registrarlo</Button>\r\n//                         <p>Buscarlo</p>\r\n//                         {autoComplete()}\r\n//                     </>\r\n//                     : description}\r\n//             </Popover.Body>\r\n//         </Popover>\r\n//     );\r\n\r\n//     if (!show)\r\n//         return (\r\n//             <Form.Group className=\"mb-3\">\r\n//                 <Form.Label>{label}</Form.Label>\r\n//                 <InputGroup>\r\n//                     <OverlayTrigger show={id !== ''} placement=\"right\" overlay={popover}>\r\n//                         <FormControl type=\"text\" placeholder={placeholder} onChange={(e) => {\r\n//                             onChange(e);\r\n//                             setId(e.target.value)\r\n//                             getDescription(e.target.value);\r\n//                         }} />\r\n//                     </OverlayTrigger>\r\n//                 </InputGroup>\r\n//             </Form.Group>);\r\n//     return (<ModalArt handleClose={() => setShow(false)} show={show} registration={true} />);\r\n// }","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\modal.js",[],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js",[],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Production\\index.js",[],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\demsar.js",[],"C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js",["134","135","136","137","138","139","140","141","142"],"import React, {Component} from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport viewQueryLogo from './Images/viewQuery.gif';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst initialState = {\r\n    filterInputs: [undefined, undefined, undefined, undefined, undefined, undefined, undefined], /*La cantidad de filtros es estática.*/\r\n    table: [],              /*La tabla de datos sin filtrar. Actualmente, se muestra la tabla completa, pero se puede mejorar el sistema para que se realice la primera consulta una vez se haya ingresado un dato a uno de los filtros.*/\r\n    filteredTable: []      /*La tabla de datos filtrada.*/\r\n};\r\n\r\nexport class ViewQuery extends Component{\r\n\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    setData = () => {\r\n        Axios.get(/*Hacerle un localhost a la tabla de datos cuando la termine Michat ->*/'*/get').then(response => {\r\n            const table = []; \r\n            if (response.data){\r\n                table = response.data.map(row => Object.values(row));\r\n                this.setState({table, filteredTable: table});\r\n            }\r\n        });\r\n    };\r\n\r\n    filter(filterType, i) { {/*Crea la fila de los filtros y modifica el array filterInputs*/}\r\n        switch(filterType) {\r\n            case \"number\":\r\n                return <td>\r\n                    <input type='number' onChange={(e) => {\r\n                        let aux = this.state.filterInputs;\r\n                        if(aux[i] === '')\r\n                            aux[i] = ' ';\r\n                        let firstChar = aux[i][0];\r\n                        aux[i] = firstChar + e.target.value;\r\n                        this.setState({filterInputs: aux});\r\n                        this.updateTable(filterType);\r\n                    }}></input>\r\n                    <select onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.updateTable(filterType);\r\n                    }}>\r\n                        <option value='>'>Mayor</option>\r\n                        <option value='<'>Menor</option>\r\n                        <option value='='>Igual</option>\r\n                    </select>\r\n                </td>\r\n            case 'string':\r\n                return <td>\r\n                    <input type='text' onChange={(e) => {\r\n                        let aux = this.state.filterInputs;\r\n                        aux[i] = e.target.value;\r\n                        this.setState({filterInputs: aux});\r\n                        this.updateTable();\r\n                    }}></input>\r\n                </td>\r\n        }\r\n    }\r\n\r\n    updateTable = (filterType) => {                                      /*Actualiza la tabla mostrada con el input de los filtros*/\r\n        const {table, filterInputs} = this.state;\r\n        let filteredTable = table.slice().filter(row => row.every((cell, j) => {\r\n            let filterInput = filterInputs[j];\r\n            let operator = filterInput[0];\r\n            switch(filterType) {\r\n                case 'string':\r\n                    let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                    return cellString.toLowerCase().includes(filterInput)\r\n                case 'number':\r\n                    let number = filterInput.slice(1, filterInput.length);\r\n                    if(filterInput === '')\r\n                        return true;                            /*Si no hay números a los que comparar, se devolverá true*/\r\n\r\n                    number = Number(number);\r\n                    switch(operator){\r\n                        case ' ':\r\n                            return true;                        /*Si no hay operador, no se sabe como comparar, por lo que devuelve true */\r\n                        case '>':\r\n                            return number < cell;               /*Si el numero es mayor o igual a la celda, devuelve false*/\r\n                        case '<':\r\n                            return number > cell;               /*Si el numero es mayor o igual a la celda, devuelve false*/\r\n                        case '=':\r\n                            return number === cell;              /**Si el numero  es diferente a la celda, devuelve false*/\r\n                    }\r\n                    break;\r\n            }\r\n        }));\r\n        if (this.state.filteredTable !== filteredTable)    /*Si la tabla de this.state.filteredTable (que es la tabla mostrada actualmente) es diferente a filteredTable (que es la actualización de la tabla), se actualizará el estado de filteredTable.*/\r\n            this.setState({filteredTable});                /*Si las dos tablas son iguales, no hay necesidad de actualizar filteredTable.*/\r\n    }\r\n\r\n    myQueries() {\r\n        return (\r\n            <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th> {/*Título del Diseño*/}\r\n                        <th>Nombre del Cliente</th> {/*Título del Diseño*/}\r\n                        <th>ID Artículo</th> {/*Título del Diseño*/}\r\n                        <th>Descripción del Artículo</th> {/*Título del Diseño*/}\r\n                        <th>Cantidad</th> {/*Título del Diseño*/}\r\n                        <th>Colores</th> {/*Título del Diseño*/}\r\n                        <th>Fecha de Entrada</th> {/*Título del Diseño*/}\r\n                    </tr>\r\n                </thead>\r\n                <tr>\r\n                    {this.filter('number', 0)}\r\n                    {this.filter('string', 1)}\r\n                    {this.filter('number', 2)}\r\n                    {this.filter('string', 3)}\r\n                    {this.filter('number', 4)}\r\n                    {this.filter('string', 5)}\r\n                    {this.filter('string', 6)}\r\n                </tr>\r\n                {this.state.table.map(row => {  {/*La cantidad de rows es variable, dependiendo de la cantidad de registros que haya en la tabla*/}\r\n                    <tr>\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                    </tr>\r\n                })}\r\n            </Table>\r\n            \r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Visualizar Pedidos' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor3' imageClassName='imgVendor' logo={viewQueryLogo} title={'Visualizar Pedidos'} post={this.post()} children={this.myQueries()} />\r\n        );\r\n    }\r\n    \r\n\r\n    post() {\r\n        // Este post existe para no sacar el isRequired del prop \"post\" de modalOpener en caso de que sea necesario.\r\n        return function() {};\r\n    }\r\n}\r\n\r\n\r\n{/* <Table striped bordered>\r\n<thead>\r\n    <tr>\r\n        {titles.map((title, i) => this.header(title, i))}\r\n    </tr>\r\n</thead>\r\n<tbody>\r\n    <tr>\r\n    {this.state.filters.map((filter, i) => {\r\n        switch (filter) {\r\n            case 'input':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    aux[i] = e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/></td>\r\n            case 'number':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = ' ';\r\n                    let firstChar = aux[i][0];\r\n                    aux[i] = firstChar + e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/>\r\n                \r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                </DropdownButton></td>\r\n            case 'date':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = ' ';\r\n                    let firstChar = aux[i][0];\r\n                    aux[i] = firstChar + e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/>\r\n                \r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                </DropdownButton></td>\r\n            default:\r\n                if(!filter[0])\r\n                    return <td key={i}></td>;\r\n                return <td key={i}>\r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    aux[i] = e;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    {filter.map((element, index) => \r\n                    <Dropdown.Item key={index} eventKey={element}>{element}</Dropdown.Item>)}\r\n                </DropdownButton></td>        \r\n        }\r\n    })}\r\n    </tr>\r\n    {filteredTable.map((row, i) => {\r\n        return (\r\n            <tr key={i}>\r\n                {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n            </tr>\r\n        );\r\n    })}\r\n</tbody>\r\n</Table> */}","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Production\\showOrders.js",["143","144","145","146","147","148","149","150","151","152","153"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { NewTask } from './newTask';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalController, ModalPrototype } from '../modal';\r\nimport image from './media/button2Production.gif';\r\n\r\nconst initialStateOrders = {\r\n    table: [],//La tabla de datos sin filtrar\r\n    filteredTable: [],//La tabla a mostrar\r\n    titles: ['Número', 'Artículo', 'Descripción', 'Cantidad', 'Colores', 'Telas'],//Los atributos de la BD\r\n    filters: ['input', 'input', 'input', 'number', 'input', 'input'],//Lista que muestra el tipo de filtro\r\n    filterInputs: ['', '', '', '', '', ''] //Lista que contiene lo ingresado por el usuario en cada filtro\r\n};\r\n\r\nexport class ShowOrders extends Component {\r\n    \r\n    state = initialStateOrders;\r\n\r\n    resetState = () => {\r\n        this.setState(initialStateOrders);\r\n    }\r\n\r\n    componentDidMount = () => {//Consigue los datos de la base de datos de las órdenes de corte\r\n        Axios.get('http://localhost:3307/getCutOrders').then(response => {\r\n            const res = response.data, table = [];\r\n            if (res)\r\n                res.forEach(row => table.push(Object.values(row)));\r\n            this.setState({ table, filteredTable: table});\r\n            console.log(table, res);\r\n        });\r\n        // let table = [[1, 2024, 'Riñonera con tacha', '30', 'Rojo, celeste y negro', 'Frizelina'],\r\n        //              [2, 2034, 'Riñonera de cinturón', '55', 'Rojo y negro', 'Gamuza']];\r\n        //this.setState({table, filteredTable: table});\r\n    }\r\n\r\n    header = (name, index) => {//Devuelve un HTML tipo header que diga name\r\n        return (<th key={index}>{name}</th>);\r\n    }\r\n\r\n    compareTable = () => {//Le asigna a filteredTable una versión filtrada de table \r\n        //TODO: table se actualiza a filteredTable ¿Hecho?\r\n        \r\n        const {table, filterInputs, filters} = this.state;\r\n        let filteredTable = table.slice(), toErase = [];\r\n        table.map((row, i) => {\r\n            let erase = false;\r\n            row.map((cell, j) => {\r\n                let filterInput = filterInputs[j];\r\n                let operator = filterInput[0];\r\n                switch(filters[j]){\r\n                    case 'input':\r\n                        let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                        if(!cellString.toLowerCase().includes(filterInput))\r\n                            erase = true;\r\n                        break;\r\n                    case 'number':\r\n                        let number = filterInput.slice(1, filterInput.length);\r\n                        if(filterInput === ''){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        if(isNaN(number) || (operator !== ' ' && operator !== '<' && operator !== '>' && operator !== '=')){\r\n                            erase = true;\r\n                            break;\r\n                        }\r\n                        number = Number(number);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = number >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = number <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = number !== cell;\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n            })\r\n            if(erase)\r\n                toErase.push(i);\r\n        })\r\n        toErase = toErase.reverse();\r\n        toErase.map((element) => filteredTable.splice(element, 1));\r\n        if(this.state.filteredTable !== filteredTable)\r\n            this.setState({filteredTable});\r\n    }\r\n\r\n    myForm = () => {\r\n        const {filteredTable, titles, table} = this.state;\r\n        return (\r\n            <>\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            {titles.map((title, i) => this.header(title, i))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                        {this.state.filters.map((filter, i) => {\r\n                            switch (filter) {\r\n                                case 'input':\r\n                                    return <td key={i}><FormControl onChange={(e) => {\r\n                                        let aux = this.state.filterInputs;\r\n                                        aux[i] = e.target.value;\r\n                                        this.setState({filterInputs: aux});\r\n                                        this.compareTable();\r\n                                    }}/></td>\r\n                                case 'number':\r\n                                    return <td key={i}><FormControl onChange={(e) => {\r\n                                        let aux = this.state.filterInputs;\r\n                                        if(aux[i] === '')\r\n                                            aux[i] = ' ';\r\n                                        let firstChar = aux[i][0];\r\n                                        aux[i] = firstChar + e.target.value;\r\n                                        this.setState({filterInputs: aux});\r\n                                        this.compareTable();\r\n                                    }}/>\r\n                                    \r\n                                    <DropdownButton onSelect={(e) => {\r\n                                        let aux = this.state.filterInputs;\r\n                                        if(aux[i] === '')\r\n                                            aux[i] = e;\r\n                                        else\r\n                                            aux[i] = e + aux[i].substring(1);\r\n                                        this.setState({filterInputs: aux});\r\n                                        this.compareTable();\r\n                                    }}>\r\n                                        <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                                        <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                                        <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                                    </DropdownButton></td>       \r\n                            }\r\n                        })}\r\n                        </tr>\r\n                        {filteredTable.map((row, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n                                    <NewTask />\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Ver órdenes' children={this.myForm()} error={this.state.error} \r\n            cardClassName='cardProduction' containerClassName='containerProduction' buttonClassName='button2Production' imageClassName='imgProduction' logo={image} title={'Ver órdenes de corte'} post={()=>{}} handleClose={this.resetState} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport class NewTasks extends ModalController {\r\n    myForm = () => {\r\n        \r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <>\r\n                {/* <button className={this.props.buttonClassName} onClick={this.showModal}>Hereda la función desde ModalController\r\n                    Armar\r\n                </button> */}\r\n                <NewTask />\r\n                <button onClick={() => alert('Se ha creado una tarea nueva')}>\r\n                    Armar\r\n                </button>\r\n                <ModalPrototype show={this.state.showModal} handleClose={() => {\r\n                    this.hideModal();\r\n                    if(this.props.handleClose)\r\n                        this.props.handleClose();\r\n                }} footer={this.props.footer}\r\n                children={this.myForm()} title={this.props.title} post={() => {\r\n                    if (!this.props.error) {\r\n                        this.props.post();\r\n                        this.hideModal();\r\n                    }\r\n                    else\r\n                        alert('Error');\r\n                }} />\r\n            </>\r\n        )\r\n    }\r\n}","C:\\Users\\Admin\\GitHub\\VirtualNAU\\client\\src\\Production\\newTask.js",["154","155"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request } from '../textInputs';\r\n//import image from './Images/newTask.gif';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport moment from 'moment';\r\nimport { ModalController } from '../modal';\r\nimport image from './media/button1Production.gif'\r\n\r\nconst initialState = {\r\n    task: '',\r\n    error: true,\r\n    errors: [true, true, true, true, true, true, true],\r\n    article: '',\r\n    quantity: '',\r\n    packages: '',\r\n    cutDate: '',\r\n    fabrics: '',\r\n    colors: '',\r\n    responsible: '',\r\n    generalFeatures: '',\r\n}\r\n\r\nexport class NewTask extends ModalController {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        let task = this.state.task;\r\n        this.setState(initialState);\r\n        this.setState({ task });\r\n    };\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => {\r\n            aux = aux && (key === index) ? error : e;\r\n        });\r\n        this.setState({ error: aux });\r\n    };\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if(form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n        event.preventDefault();\r\n    };\r\n\r\n    myForm = () => {\r\n        Axios.get('http://localhost:3307/getTaskCount').then(response => {\r\n            let res = response.data[0].count;\r\n            let limit = 9;//TODO: Cambiar a 9999\r\n            res = (res + 1 > limit) ? 1 : res + 1;//Límite cantidad de tareas\r\n            this.setState({ task: res });\r\n        });\r\n        return (\r\n            <Form ref={this.form}>\r\n                <h3>Tarea número {this.state.task}</h3>\r\n                <Request toShow=\"article\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ article: event });\r\n                    this.updateError(0, error);\r\n                }} />\r\n\r\n                <Request toShow=\"quantityArticle\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ quantity: event.target.value });\r\n                    this.updateError(1, error);\r\n                }} />\r\n\r\n                <Request toShow=\"packages\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ packages: event.target.value });\r\n                    this.updateError(2, error);\r\n                }} />\r\n\r\n                <Request toShow=\"fabrics\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ fabrics: event.target.value });\r\n                    this.updateError(3, error);\r\n                }} />\r\n\r\n                <Request toShow=\"colors\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ colors: event.target.value });\r\n                    this.updateError(4, error);\r\n                }} />\r\n\r\n                <Request toShow=\"responsible\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                    this.updateError(5, error);\r\n                }} />\r\n\r\n                <Request toShow=\"generalFeatures\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ generalFeatures: event.target.value });\r\n                    this.updateError(6, error);\r\n                }} />\r\n            </Form>\r\n        );\r\n    };\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        this.resetState();\r\n        Axios.post('http://localhost:3307/getDescriptionWhere', { id: aux.article }).then((response) => {\r\n            let description = response.data[0].description;\r\n            Axios.delete(`http://localhost:3307/deleteTask/${aux.task}`).then(() => {\r\n                Axios.post('http://localhost:3307/updateTaskCount', { task: aux.task });\r\n                Axios.post('http://localhost:3307/newTask',\r\n                    {\r\n                        id: aux.task, article: aux.article, description, quantity: aux.quantity, packages: aux.packages,\r\n                        cutDate: moment(new Date()).format(\"DD/MM/YYYY\"), fabrics: aux.fabrics, colors: aux.colors,\r\n                        responsible: aux.responsible, generalFeatures: aux.generalFeatures\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Crear tarea' children={this.myForm()} error={this.state.error}\r\n            cardClassName='cardProduction' containerClassName='containerProduction' buttonClassName='button1Production' imageClassName='imgProduction' logo={image} title={'Creación de tarea'} post={this.post} handleClose={this.resetState} />\r\n            //Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm\r\n        );\r\n    };\r\n}",{"ruleId":"156","severity":1,"message":"157","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":13},{"ruleId":"156","severity":1,"message":"160","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":14},{"ruleId":"156","severity":1,"message":"161","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":20},{"ruleId":"156","severity":1,"message":"162","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":18},{"ruleId":"156","severity":1,"message":"163","line":6,"column":22,"nodeType":"158","messageId":"159","endLine":6,"endColumn":28},{"ruleId":"156","severity":1,"message":"164","line":7,"column":5,"nodeType":"158","messageId":"159","endLine":7,"endColumn":11},{"ruleId":"156","severity":1,"message":"165","line":8,"column":5,"nodeType":"158","messageId":"159","endLine":8,"endColumn":10},{"ruleId":"156","severity":1,"message":"166","line":9,"column":5,"nodeType":"158","messageId":"159","endLine":9,"endColumn":9},{"ruleId":"167","severity":1,"message":"168","line":59,"column":17,"nodeType":"169","endLine":59,"endColumn":41},{"ruleId":"170","severity":1,"message":"171","line":61,"column":21,"nodeType":"169","endLine":61,"endColumn":60},{"ruleId":"156","severity":1,"message":"172","line":1,"column":28,"nodeType":"158","messageId":"159","endLine":1,"endColumn":37},{"ruleId":"156","severity":1,"message":"173","line":5,"column":9,"nodeType":"158","messageId":"159","endLine":5,"endColumn":18},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"156","severity":1,"message":"178","line":9,"column":8,"nodeType":"158","messageId":"159","endLine":9,"endColumn":14},{"ruleId":"156","severity":1,"message":"179","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":19},{"ruleId":"180","severity":1,"message":"181","line":47,"column":61,"nodeType":"182","messageId":"183","endLine":47,"endColumn":63},{"ruleId":"184","severity":1,"message":"185","line":49,"column":17,"nodeType":"186","messageId":"187","endLine":122,"endColumn":18},{"ruleId":"180","severity":1,"message":"181","line":139,"column":28,"nodeType":"182","messageId":"183","endLine":139,"endColumn":30},{"ruleId":"180","severity":1,"message":"181","line":190,"column":28,"nodeType":"182","messageId":"183","endLine":190,"endColumn":30},{"ruleId":"180","severity":1,"message":"181","line":192,"column":31,"nodeType":"182","messageId":"183","endLine":192,"endColumn":33},{"ruleId":"184","severity":1,"message":"185","line":195,"column":17,"nodeType":"186","messageId":"187","endLine":253,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":213,"column":25,"nodeType":"186","messageId":"187","endLine":226,"endColumn":26},{"ruleId":"184","severity":1,"message":"185","line":237,"column":25,"nodeType":"186","messageId":"187","endLine":250,"endColumn":26},{"ruleId":"156","severity":1,"message":"188","line":265,"column":39,"nodeType":"158","messageId":"159","endLine":265,"endColumn":44},{"ruleId":"156","severity":1,"message":"189","line":3,"column":19,"nodeType":"158","messageId":"159","endLine":3,"endColumn":30},{"ruleId":"156","severity":1,"message":"190","line":3,"column":32,"nodeType":"158","messageId":"159","endLine":3,"endColumn":50},{"ruleId":"156","severity":1,"message":"191","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":13},{"ruleId":"156","severity":1,"message":"192","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":13},{"ruleId":"180","severity":1,"message":"181","line":118,"column":42,"nodeType":"182","messageId":"183","endLine":118,"endColumn":44},{"ruleId":"193","severity":1,"message":"194","line":140,"column":8,"nodeType":"195","endLine":140,"endColumn":18,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":176,"column":8,"nodeType":"195","endLine":176,"endColumn":22,"suggestions":"198"},{"ruleId":"156","severity":1,"message":"178","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":14},{"ruleId":"156","severity":1,"message":"199","line":11,"column":8,"nodeType":"158","messageId":"159","endLine":11,"endColumn":20},{"ruleId":"180","severity":1,"message":"181","line":48,"column":29,"nodeType":"182","messageId":"183","endLine":48,"endColumn":31},{"ruleId":"180","severity":1,"message":"181","line":65,"column":42,"nodeType":"182","messageId":"183","endLine":65,"endColumn":44},{"ruleId":"156","severity":1,"message":"200","line":121,"column":56,"nodeType":"158","messageId":"159","endLine":121,"endColumn":67},{"ruleId":"170","severity":1,"message":"171","line":34,"column":17,"nodeType":"169","endLine":34,"endColumn":57},{"ruleId":"156","severity":1,"message":"201","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":15},{"ruleId":"156","severity":1,"message":"202","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":22},{"ruleId":"156","severity":1,"message":"203","line":12,"column":10,"nodeType":"158","messageId":"159","endLine":12,"endColumn":18},{"ruleId":"180","severity":1,"message":"181","line":89,"column":29,"nodeType":"182","messageId":"183","endLine":89,"endColumn":31},{"ruleId":"156","severity":1,"message":"204","line":571,"column":12,"nodeType":"158","messageId":"159","endLine":571,"endColumn":17},{"ruleId":"205","severity":1,"message":"206","line":25,"column":17,"nodeType":"158","messageId":"207","endLine":25,"endColumn":22},{"ruleId":"208","severity":1,"message":"209","line":31,"column":29,"nodeType":"210","messageId":"211","endLine":31,"endColumn":95},{"ruleId":"184","severity":1,"message":"185","line":32,"column":9,"nodeType":"186","messageId":"187","endLine":67,"endColumn":10},{"ruleId":"180","severity":1,"message":"212","line":72,"column":77,"nodeType":"182","messageId":"213","endLine":72,"endColumn":79},{"ruleId":"184","severity":1,"message":"185","line":75,"column":13,"nodeType":"186","messageId":"187","endLine":96,"endColumn":14},{"ruleId":"184","severity":1,"message":"185","line":85,"column":21,"nodeType":"186","messageId":"187","endLine":94,"endColumn":22},{"ruleId":"180","severity":1,"message":"181","line":125,"column":43,"nodeType":"182","messageId":"183","endLine":125,"endColumn":45},{"ruleId":"208","severity":1,"message":"209","line":125,"column":49,"nodeType":"210","messageId":"211","endLine":125,"endColumn":148},{"ruleId":"208","severity":1,"message":"214","line":153,"column":1,"nodeType":"210","messageId":"215","endLine":242,"endColumn":13},{"ruleId":"156","severity":1,"message":"216","line":3,"column":10,"nodeType":"158","messageId":"159","endLine":3,"endColumn":17},{"ruleId":"156","severity":1,"message":"189","line":3,"column":19,"nodeType":"158","messageId":"159","endLine":3,"endColumn":30},{"ruleId":"156","severity":1,"message":"178","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":14},{"ruleId":"156","severity":1,"message":"217","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":12},{"ruleId":"180","severity":1,"message":"181","line":53,"column":28,"nodeType":"182","messageId":"183","endLine":53,"endColumn":30},{"ruleId":"180","severity":1,"message":"181","line":55,"column":31,"nodeType":"182","messageId":"183","endLine":55,"endColumn":33},{"ruleId":"184","severity":1,"message":"185","line":58,"column":17,"nodeType":"186","messageId":"187","endLine":90,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":75,"column":25,"nodeType":"186","messageId":"187","endLine":88,"endColumn":26},{"ruleId":"156","severity":1,"message":"188","line":102,"column":39,"nodeType":"158","messageId":"159","endLine":102,"endColumn":44},{"ruleId":"180","severity":1,"message":"218","line":113,"column":61,"nodeType":"182","messageId":"213","endLine":113,"endColumn":63},{"ruleId":"184","severity":1,"message":"185","line":114,"column":29,"nodeType":"186","messageId":"187","endLine":146,"endColumn":30},{"ruleId":"156","severity":1,"message":"219","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":26},{"ruleId":"180","severity":1,"message":"181","line":41,"column":29,"nodeType":"182","messageId":"183","endLine":41,"endColumn":31},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'Vendor' is defined but never used.","'WorkshopsAdm' is defined but never used.","'Production' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useEffect' is defined but never used.","'ViewQuery' is defined but never used.","no-native-reassign",["220"],"no-negated-in-lhs",["221"],"'Button' is defined but never used.","'ButtonGroup' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'table' is assigned a value but never used.","'TaskRequest' is defined but never used.","'RawResourceRequest' is defined but never used.","'Table' is defined but never used.","'Axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'input' and 'materialsData'. Either include them or remove the dependency array.","ArrayExpression",["222"],"React Hook useEffect has missing dependencies: 'input.money' and 'name'. Either include them or remove the dependency array.",["223"],"'ReactToPrint' is defined but never used.","'currentYear' is assigned a value but never used.","'Popover' is defined but never used.","'OverlayTrigger' is defined but never used.","'ModalArt' is defined but never used.","'shown' is assigned a value but never used.","no-const-assign","'table' is constant.","const","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.every() expects a value to be returned at the end of arrow function.","expectedAtEnd","Block is redundant.","redundantBlock","'Request' is defined but never used.","'Form' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [input, input.id, materialsData]",{"range":"228","text":"229"},"Update the dependencies array to be: [input.money, name, selectedTask]",{"range":"230","text":"231"},[5961,5971],"[input, input.id, materialsData]",[7813,7827],"[input.money, name, selectedTask]"]