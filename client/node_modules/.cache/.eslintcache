[{"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\index.js":"1","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\index.js":"2","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\deliverTask.js":"3","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\newTask.js":"4","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\navegation.js":"5","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\RegistrationDrop\\registrationDrop.js":"6","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\modalOpener.js":"7","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\modal.js":"8","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\RegistrationDrop\\modals.js":"9","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\modifyData.js":"10","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\textInputs.js":"11","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\asignTask.js":"12","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\tables.js":"13","C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\showData.js":"14","D:\\Users\\PC\\VirtualNAU\\client\\src\\index.js":"15","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\index.js":"16","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\deliverTask.js":"17","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\newTask.js":"18","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\modifyData.js":"19","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\asignTask.js":"20","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\showData.js":"21","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\RegistrationDrop\\registrationDrop.js":"22","D:\\Users\\PC\\VirtualNAU\\client\\src\\modal.js":"23","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\modalOpener.js":"24","D:\\Users\\PC\\VirtualNAU\\client\\src\\textInputs.js":"25","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\RegistrationDrop\\modals.js":"26"},{"size":206,"mtime":1646908013527,"results":"27","hashOfConfig":"28"},{"size":922,"mtime":1650815198458,"results":"29","hashOfConfig":"28"},{"size":12822,"mtime":1650815126183,"results":"30","hashOfConfig":"28"},{"size":5085,"mtime":1650731231735,"results":"31","hashOfConfig":"28"},{"size":979,"mtime":1644125118156,"results":"32","hashOfConfig":"28"},{"size":2067,"mtime":1643895659625,"results":"33","hashOfConfig":"28"},{"size":2068,"mtime":1649072832153,"results":"34","hashOfConfig":"28"},{"size":2333,"mtime":1650813873719,"results":"35","hashOfConfig":"28"},{"size":4965,"mtime":1648550757344,"results":"36","hashOfConfig":"28"},{"size":4444,"mtime":1648550816755,"results":"37","hashOfConfig":"28"},{"size":17940,"mtime":1650730842033,"results":"38","hashOfConfig":"28"},{"size":5765,"mtime":1650731389168,"results":"39","hashOfConfig":"28"},{"size":0,"mtime":1650815186912,"results":"40","hashOfConfig":"28"},{"size":2082,"mtime":1650831065350,"results":"41","hashOfConfig":"28"},{"size":206,"mtime":1646908013527,"results":"42","hashOfConfig":"43"},{"size":890,"mtime":1651234888340,"results":"44","hashOfConfig":"43"},{"size":12822,"mtime":1650815126183,"results":"45","hashOfConfig":"43"},{"size":5085,"mtime":1650731231735,"results":"46","hashOfConfig":"43"},{"size":4444,"mtime":1648550816755,"results":"47","hashOfConfig":"43"},{"size":5765,"mtime":1650731389168,"results":"48","hashOfConfig":"43"},{"size":4938,"mtime":1651510846601,"results":"49","hashOfConfig":"43"},{"size":2067,"mtime":1643895659625,"results":"50","hashOfConfig":"43"},{"size":2333,"mtime":1650813873719,"results":"51","hashOfConfig":"43"},{"size":2068,"mtime":1649072832153,"results":"52","hashOfConfig":"43"},{"size":17940,"mtime":1650730842033,"results":"53","hashOfConfig":"43"},{"size":4965,"mtime":1648550757344,"results":"54","hashOfConfig":"43"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pgvg48",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"ce3qgk",{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"89"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"89"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\index.js",[],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\index.js",[],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\deliverTask.js",["115"],"import React, { Component, useState, useEffect } from 'react';\r\nimport { ModalOpener } from './modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Form from 'react-bootstrap/Form';\r\nimport image from './Images/DeliverTask.svg';\r\nimport moment from 'moment';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalPrototype } from '../modal';\r\n\r\nconst initialState = {\r\n    error: true,\r\n    errors: [true, true],\r\n    showObsModal: false,\r\n    task: '',\r\n    name: '',\r\n    quantity: '',\r\n    money: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: '',\r\n    faulty: '',\r\n    completed: false,\r\n    calification: '',\r\n    observation: ''\r\n}\r\n\r\nexport class DeliverTaskButton extends Component {\r\n\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => \r\n            aux = aux && (key === index) ? error : e\r\n        );\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n    };\r\n\r\n    myForm = () => {\r\n        return (\r\n            <Form id='toPrint' ref={this.form} onSubmit={e => e.preventDefault()}>\r\n                <Request toShow='name' handleEnter={this.handleEnter} onChange={(value, error) => {\r\n                    this.setState({ name: value });\r\n                    this.updateError(0, error);\r\n                }} />\r\n                <Input name={this.state.name} onChange={(data, price, faulty, task, completed) => {\r\n                    this.setState({\r\n                        task, quantity: data.quantity, money: data.money, weight: data.weight,\r\n                        threads: data.threads, completed, price, faulty\r\n                    });\r\n                    this.updateError(1, false);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        if (!aux.completed)\r\n            this.resetState();\r\n        Axios.post('http://localhost:3001/getTasks', { id: aux.task }).then((response) => {\r\n            Axios.put('http://localhost:3001/payWorkshop',\r\n                { name: response.data[0].name, money: aux.money - aux.quantity * aux.price })\r\n        });\r\n        Axios.post('http://localhost:3001/newPart',\r\n            {\r\n                name: aux.name, task: aux.task, date: moment(new Date()).format('DD/MM/YYYY'), quantity: aux.quantity,\r\n                weight: Number(aux.weight).toFixed(1), money: Number(aux.money).toFixed(1), threads: aux.threads\r\n            }).then(() => {\r\n                if (aux.completed)\r\n                    this.setState({ showObsModal: true });\r\n            });\r\n    }\r\n\r\n    completelyReturned = () => {\r\n        console.log(this.state);\r\n        Axios.put('http://localhost:3001/printObs',\r\n            {\r\n                id: this.state.task, observations: this.state.observation, calification: this.state.calification,\r\n                faulty: this.state.faulty\r\n            });\r\n    }\r\n\r\n    print = () => {\r\n        if (this.state.error) {\r\n            alert('Error. No se puede imprimir una boleta inválida.');\r\n            return;\r\n        }\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n    }\r\n\r\n    sendObs = () => {\r\n        this.completelyReturned();\r\n        this.resetState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ModalOpener buttonText=\"Recibir tarea\" children={this.myForm()} logo={image} className=\"title\"\r\n                    footer={{ label: 'Imprimir', func: this.print, show: !!document.getElementById(\"taskTable\") }}\r\n                    title=\"Ingreso de tarea\" post={this.post} error={this.state.error} />\r\n                {/*Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm*/}\r\n\r\n                <ModalPrototype title=\"Calificar\" show={this.state.showObsModal} post={this.sendObs} handleClose={this.sendObs}>\r\n                    <>\r\n                        <Request toShow=\"observation\" onChange={(e) => this.setState({ observation: e.target.value })} />\r\n                        <Request toShow=\"calification\" onChange={(e) => this.setState({ calification: e.target.value })} />\r\n                    </>\r\n                </ModalPrototype>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Input = ({ onChange, name }) => {\r\n\r\n    const [title, setTitle] = useState('Elegir tarea');\r\n    const [tasks, setTasks] = useState([]);\r\n    const [parts, setParts] = useState([]);\r\n    const [input, setInput] = useState({ quantity: 0, weight: 0, money: 0, threads: 0 });\r\n    const [selectedTask, setSelectedTask] = useState('');\r\n    const [refund, setRefund] = useState(false);\r\n    const [completed, setCompleted] = useState(false);\r\n    const [account, setAccount] = useState('');\r\n    const [quantityBackUp, setQuantityBackUp] = useState('');\r\n\r\n    useEffect(() => {\r\n        setInput({ quantity: 0, weight: 0, money: 0, threads: 0 });\r\n        Axios.post('http://localhost:3001/getParts', { task: selectedTask.id }).then(response => setParts(response.data));\r\n        if (name)\r\n            Axios.post('http://localhost:3001/getAccount', { name }).then(response => setAccount(response.data[0].money));\r\n    }, [selectedTask]);\r\n\r\n    useEffect(() => {\r\n        let delivered = input.quantity;\r\n        let totalMoney = selectedTask.quantity * selectedTask.price - account;\r\n        parts.map(part => delivered += part.quantity);\r\n\r\n        if (quantityBackUp !== input.quantity) {\r\n            input.money = input.quantity * selectedTask.price;\r\n            if (input.money > totalMoney)\r\n                input.money = totalMoney;\r\n            setQuantityBackUp(input.quantity);\r\n        }\r\n        onChange(input, selectedTask.price, selectedTask.quantity - delivered, selectedTask.id, (delivered === selectedTask.quantity || completed));\r\n    }, [input, completed, refund]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const inputField = (property, total) => {\r\n        return (\r\n            <FormControl value={input[property]}\r\n                onChange={(e) => {\r\n                    if (isNaN(e.target.value) || (total[property] < e.target.value && property !== 'money'))\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux[property] = e.target.value;\r\n                    aux[property] = (refund) ?\r\n                        -Math.abs(aux[property]) :\r\n                        (aux[property] < 0) ? 0 : aux[property];\r\n                    if (property === 'quantity' || property === 'threads')\r\n                        aux[property] = Math.round(aux[property]);\r\n                    setInput({ ...aux });\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const getTable = () => {\r\n\r\n        let total = {\r\n            quantity: selectedTask.quantity,\r\n            weight: selectedTask.weight,\r\n            money: selectedTask.quantity * selectedTask.price - account,\r\n            threads: selectedTask.threads\r\n        };\r\n        return (\r\n            <>\r\n                {parts.map((part, index) => {\r\n                    total = {\r\n                        quantity: total.quantity - part.quantity,\r\n                        weight: total.weight - part.weight,\r\n                        money: total.money - part.money,\r\n                        threads: total.threads - part.threads,\r\n                    };\r\n                    return (\r\n                        <tr key={index}>{/*Muestra el medio*/}\r\n                            <td>{part.date}</td>\r\n                            <td>{part.quantity}</td>\r\n                            <td>{total.quantity}</td>\r\n                            <td>{Number(part.weight).toFixed(1)}</td>\r\n                            <td>{Number(total.weight).toFixed(1)}</td>\r\n                            <td>{part.threads}</td>\r\n                            <td>{total.threads}</td>\r\n                            <td>{'$' + Number(part.money).toFixed(1)}</td>\r\n                            <td>{'$' + Number(total.money).toFixed(1)}</td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                <tr>{/*Muestra la última fila*/}\r\n                    <td>{moment(new Date()).format('DD/MM/YYYY')}</td>\r\n                    <td>{inputField('quantity', total)}</td>\r\n                    <td>{total.quantity - input.quantity}</td>\r\n                    <td>{inputField('weight', total)}</td>\r\n                    <td>{(total.weight - input.weight).toFixed(1)}</td>\r\n                    <td>{inputField('threads', total)}</td>\r\n                    <td>{total.threads - input.threads}</td>\r\n                    <td>{inputField('money', total)}</td>\r\n                    <td>{'$' + (total.money - input.money).toFixed(1)}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getExceeded = () => {//Devuelve true si se excedió la fecha de entrega\r\n        if (!selectedTask.deadline)\r\n            return;\r\n        let today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        var dateParts = selectedTask.deadline.split('/');\r\n        var deadline = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        return today > deadline;\r\n    }\r\n\r\n    if (name !== '') {\r\n        Axios.post('http://localhost:3001/getTasks', { name, state: 'asigned' }).then((response) => {\r\n            if (response.data.length === 0)\r\n                return;\r\n            setTasks(response.data);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ 'justifyContent': 'space-between', 'display': 'flex', 'alignItems': 'baseline' }}>\r\n                <TaskRequest setSelectedTask={setSelectedTask} tasks={tasks} title={title} setTitle={setTitle} />\r\n                <h4 style={{ 'color': getExceeded() ? 'red' : 'green' }}>\r\n                    {(selectedTask === '') ? null : selectedTask.deadline}\r\n                </h4>\r\n            </div>\r\n            {title === 'Elegir tarea' ? <></> :\r\n                <>\r\n                    <Form.Check onChange={() => {\r\n                        setRefund(!refund);\r\n                        input.money = -input.money;\r\n                        input.quantity = -input.quantity;\r\n                        input.threads = -input.threads;\r\n                        input.weight = -input.weight;\r\n                    }} label=\"Devolución o corrección\" />\r\n                    <Form.Check onChange={() => setCompleted(!completed)} label=\"Tarea cerrada\" />\r\n                    <Table striped bordered id=\"taskTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Fecha</th>\r\n                                <th>Cantidad entregada por el taller</th>\r\n                                <th>Cantidad total de la tarea</th>\r\n                                <th>Peso entregado por el taller</th>\r\n                                <th>Peso total</th>\r\n                                <th>Hilos devueltos</th>\r\n                                <th>Hilos totales</th>\r\n                                <th>Dinero entregado</th>\r\n                                <th>Dinero total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                                <td>{selectedTask.exitDate}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.quantity}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.weight}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.threads}</td>\r\n                                <td>{'$' + account + ' (A CTA)'}</td>\r\n                                <td>{'$' + selectedTask.price * selectedTask.quantity}</td>\r\n                            </tr>\r\n                            {getTable()}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}",["116","117"],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\newTask.js",["118"],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\navegation.js",[],["119","120"],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\RegistrationDrop\\registrationDrop.js",[],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\modalOpener.js",[],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\modal.js",[],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\RegistrationDrop\\modals.js",[],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\modifyData.js",[],["121","122"],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\textInputs.js",["123","124","125","126","127"],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\asignTask.js",["128","129"],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\tables.js",[],"C:\\Users\\PC\\OneDrive\\Escritorio\\fabrica\\client\\src\\Menu\\showData.js",["130","131"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\index.js",[],["132","133"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\index.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\deliverTask.js",["134"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\newTask.js",["135"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from './modalOpener';\r\nimport { Request } from '../textInputs';\r\nimport image from './Images/NewTask.svg';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport moment from 'moment';\r\n\r\nconst initialState = {\r\n    task: '',\r\n    error: true,\r\n    errors: [true, true, true, true, true, true, true],\r\n    article: '',\r\n    quantity: '',\r\n    packages: '',\r\n    cutDate: '',\r\n    fabrics: '',\r\n    colors: '',\r\n    responsable: '',\r\n    generalFeatures: '',\r\n}\r\n\r\nexport class NewTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        let task = this.state.task;\r\n        this.setState(initialState);\r\n        this.setState({ task });\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => {\r\n            aux = aux && (key === index) ? error : e;\r\n        });\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if(form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n        event.preventDefault();\r\n    };\r\n\r\n    myForm = () => {\r\n        Axios.get('http://localhost:3001/getTaskCount').then(response => {\r\n            let res = response.data[0].count;\r\n            let limit = 9;//TODO: Cambiar a 999\r\n            res = (res + 1 > limit) ? 1 : res + 1;//Límite cantidad de tareas\r\n            this.setState({ task: res });\r\n        });\r\n        return (\r\n            <Form ref={this.form}>\r\n                <h3>Tarea número {this.state.task}</h3>\r\n                <Request toShow=\"article\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    console.log('onChange');\r\n                    this.setState({ article: event });\r\n                    this.updateError(0, error);\r\n                }} />\r\n\r\n                <Request toShow=\"quantityArticle\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ quantity: event.target.value });\r\n                    this.updateError(1, error);\r\n                }} />\r\n\r\n                <Request toShow=\"packages\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ packages: event.target.value });\r\n                    this.updateError(2, error);\r\n                }} />\r\n\r\n                <Request toShow=\"fabrics\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ fabrics: event.target.value });\r\n                    this.updateError(3, error);\r\n                }} />\r\n\r\n                <Request toShow=\"colors\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ colors: event.target.value });\r\n                    this.updateError(4, error);\r\n                }} />\r\n\r\n                <Request toShow=\"responsable\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ responsable: event.target.value });\r\n                    this.updateError(5, error);\r\n                }} />\r\n\r\n                <Request toShow=\"generalFeatures\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ generalFeatures: event.target.value });\r\n                    this.updateError(6, error);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        console.log(aux);\r\n        console.log(this.state);\r\n        this.resetState();\r\n        Axios.post('http://localhost:3001/getDescriptionWhere', { id: aux.article }).then((response) => {\r\n            let description = response.data[0].description;\r\n            Axios.delete(`http://localhost:3001/deleteTask/${aux.task}`).then(() => {\r\n                Axios.post('http://localhost:3001/updateTaskCount', { task: aux.task });\r\n                Axios.post('http://localhost:3001/newTask',\r\n                    {\r\n                        id: aux.task, article: aux.article, description, quantity: aux.quantity, packages: aux.packages,\r\n                        cutDate: moment(new Date()).format(\"DD/MM/YYYY\"), fabrics: aux.fabrics, colors: aux.colors,\r\n                        responsable: aux.responsable, generalFeatures: aux.generalFeatures\r\n                    });\r\n            });\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Nueva tarea' children={this.myForm()} error={this.state.error} className={'title'}\r\n                logo={image} title={'Creación de tarea'} post={this.post} handleClose={this.resetState} />\r\n            //Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm\r\n        );\r\n    }\r\n}","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\modifyData.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\asignTask.js",["136","137"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from './modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport image from './Images/AsignTask.svg';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport moment from 'moment';\r\n\r\nconst initialState = {\r\n    name: '',\r\n    task: '',\r\n    deadline: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: 0,\r\n    //Auto-asignar\r\n    packages: '',\r\n    description: '',\r\n    quantity: '',\r\n    //Otros\r\n    error: true,\r\n    errors: [true, true, true, true, true, true],\r\n    selectedTask: null,\r\n    tasks: [],\r\n    title: 'Elegir Tarea'\r\n};\r\n\r\nexport class AsignTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => {\r\n            aux = aux && (key === index) ? error : e;\r\n        });\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.selectedTask === prevState.selectedTask && this.state.name === prevState.name)\r\n            return;\r\n        if (!this.state.name || !this.state.selectedTask)\r\n            return;\r\n        Axios.post('http://localhost:3001/getPrices',\r\n            { name: this.state.name, article: this.state.selectedTask.article_id }).then((response) => {\r\n                //Se debe encontrar el mayor de los id que sean menores a selectedTask.id o el mayor, si no tiene menores\r\n                if (response.data.length === 0)\r\n                    return;\r\n                let currentId = this.state.selectedTask.id, aux = response.data[0];\r\n                console.log(aux);\r\n                response.data.map((task) => {\r\n                    if ((task.id > aux.id && task.id < currentId) || (task.id > currentId && (aux.id === 0 || aux.id > currentId)))\r\n                        aux = task;\r\n                })\r\n                console.log(aux);\r\n                this.setState({ price: aux.price });\r\n            });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[(index === -1)? 1 : index + 1].focus();\r\n        if (event.keyCode) //Si el evento es artificial ({key = 'enter'}), no se prevendrá el evento porque no existe\r\n            event.preventDefault();\r\n    };\r\n\r\n    myForm = () => {\r\n        Axios.post('http://localhost:3001/getTasks', { state: 'toAsign' }).then((response) => {\r\n            this.setState({ tasks: response.data });\r\n        });\r\n        return (\r\n            <Form ref={this.form}>\r\n                {this.state.selectedTask ?\r\n                    <>\r\n                        <h3>Bultos: {this.state.selectedTask.packages}</h3>\r\n                        <h3>Descripción: {this.state.selectedTask.article_description}</h3>\r\n                        <h3>Cantidad: {this.state.selectedTask.quantity}</h3>\r\n                    </>\r\n                    : null}\r\n\r\n                <TaskRequest setSelectedTask={(e) => {\r\n                    this.setState({ selectedTask: e });\r\n                    this.updateError(0, !!e);\r\n                    console.log('año');\r\n                    this.handleEnter({ key: 'enter' });\r\n                }} tasks={this.state.tasks} handleEnter={this.handleEnter}\r\n                    title={this.state.title} setTitle={(e) => { this.setState({ title: e }) }} />\r\n\r\n                <Request toShow=\"name\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ name: event });\r\n                    this.updateError(1, error);\r\n                }} />\r\n\r\n                <Request toShow=\"price\" value={this.state.price} handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ price: event.target.value });\r\n                    this.updateError(2, error);\r\n                }} />\r\n\r\n                <Request toShow=\"deadline\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ deadline: event.target.value });\r\n                    this.updateError(3, error);\r\n                }} />\r\n\r\n                <Request toShow=\"weight\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ weight: event.target.value });\r\n                    this.updateError(4, error);\r\n                }} />\r\n\r\n                <Request toShow=\"threads\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ threads: event.target.value });\r\n                    this.updateError(5, error);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        this.resetState();\r\n        Axios.put('http://localhost:3001/asignTask', {\r\n            name: aux.name, task: this.state.selectedTask.id, deadline: aux.deadline, weight: aux.weight, threads: aux.threads,\r\n            price: aux.price, exitDate: moment(new Date()).format(\"DD/MM/YYYY\")\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Remito' handleClose={this.resetState}\r\n                className={'title'} logo={image} title={'Asignar Tarea'} post={this.post} children={this.myForm()} />\r\n            //Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm\r\n        );\r\n    }\r\n}","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\showData.js",["138","139","140"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\RegistrationDrop\\registrationDrop.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\modal.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\modalOpener.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\textInputs.js",["141","142","143","144","145"],"import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport { ModalArt, ModalWork } from './Menu/RegistrationDrop/modals'\r\nimport './autocomplete.css';\r\n\r\nexport const Request = ({ onChange, toShow, label, value, handleEnter }) => {//Pedirá un dato con un input tipo text\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    let placeholder, auxLabel = label, checked = (input) => input !== '';\r\n\r\n    switch (toShow) {\r\n        case 'name':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'price':\r\n            label = 'Precio por unidad';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        case 'regName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3001/getNames');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        case 'regArticle':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código del artículo';\r\n            checked = async (input) => {\r\n                if (input === '' || isNaN(input))\r\n                    return false;\r\n                let response = await Axios.post('http://localhost:3001/getDescriptionWhere', { id: input });\r\n                return response.data.length === 0;\r\n            };\r\n            break;\r\n        case 'weight':\r\n            label = 'Peso de la tarea';\r\n            placeholder = 'Ingrese el peso entregado';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'deadline':\r\n            label = 'Fecha esperada';\r\n            placeholder = 'Ingrese la fecha esperada (DD/MM/AAAA)';\r\n            checked = (input) => {\r\n                let error = false;\r\n                let aux = input.split('/');\r\n                aux.map((e) => {\r\n                    if (isNaN(e))\r\n                        error = true;\r\n                })\r\n                return input.length === 10 && input[2] === '/' && input[5] === '/' && !error;\r\n            }\r\n            break;\r\n        case 'observation':\r\n            label = 'Observación/es';\r\n            placeholder = 'Ingrese observaciones sobre la tarea si las tiene';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'calification':\r\n            label = 'Calificación';\r\n            placeholder = 'Ingrese la calificación del 1 al 10';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) <= 10 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'packages':\r\n            label = 'Bultos';\r\n            placeholder = 'Ingrese la cantidad de bultos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'fabrics':\r\n            label = 'Telas';\r\n            placeholder = 'Ingrese las telas';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'responsable':\r\n            label = 'Responsables';\r\n            placeholder = 'Ingrese las personas responsables';\r\n            break;\r\n        case 'generalFeatures':\r\n            label = 'Características generales';\r\n            placeholder = 'Ingrese las características generales';\r\n            break;\r\n        case 'colors':\r\n            label = 'Colores';\r\n            placeholder = 'Ingrese los colores';\r\n            break;\r\n        case 'threads':\r\n            label = 'Hilos';\r\n            placeholder = 'Ingrese la cantidad de hilos';\r\n            break;\r\n        default:\r\n            console.error(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n\r\n    label = (auxLabel) ? auxLabel : label;\r\n    placeholder += '…';\r\n    return (\r\n        (toShow === 'name') ? <NameRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n            ((toShow === 'article') ? <ArticleRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n                <Form.Group>\r\n                    <Form.Label>{label}</Form.Label>\r\n                    <InputGroup>\r\n                        {(toShow === 'money' || toShow === 'price') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                        <FormControl type=\"text\" placeholder={placeholder} value={value} onKeyDown={handleEnter} onChange={(e) => {\r\n                            let res;\r\n                            if (checked[Symbol.toStringTag] !== 'AsyncFunction') {\r\n                                res = checked(e.target.value);\r\n                                setError(!res);\r\n                                //if(res || value)\r\n                                onChange(e, error);\r\n                            }\r\n                            else\r\n                                checked(e.target.value).then(result => {\r\n                                    setError(!result);\r\n                                    //if(result)\r\n                                    onChange(e, error);\r\n                                });\r\n                        }} />\r\n                        {(toShow === 'weight') ? <InputGroup.Text>kg</InputGroup.Text> : <></>}\r\n                    </InputGroup>\r\n                    {error ? <em>El valor ingresado no es válido</em> : <></>}\r\n                </Form.Group>)\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    defValue: PropTypes.string,\r\n    handleEnter: PropTypes.func\r\n}\r\n\r\nconst ArticleRequest = ({ placeholder, onChange, handleEnter }) => {\r\n    const [articles, setArticles] = useState([]);\r\n\r\n    const getList = () => {\r\n        Axios.get('http://localhost:3001/getArticles').then((response) => {\r\n            setArticles(response.data.map(article => article.id + ': ' + article.description));\r\n        })\r\n    }\r\n    const myOnChange = (event, error) => {\r\n        if (event.indexOf(':') > 0)\r\n            event = event.substr(0, event.indexOf(':'));\r\n        console.log(event);\r\n        onChange(event, error);\r\n    }\r\n\r\n    getList();\r\n    return (\r\n        <Autocomplete suggestions={articles} onChange={myOnChange} handleEnter={handleEnter}\r\n            placeholder={placeholder} updateList={getList} />\r\n    );\r\n}\r\nArticleRequest.propTypes = {\r\n    placeholder: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    handleEnter: PropTypes.func\r\n}\r\n\r\nconst NameRequest = ({ label, placeholder, onChange, handleEnter }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getList();\r\n    }, []);\r\n    const getList = () => {\r\n        Axios.get('http://localhost:3001/getNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n    }\r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })} handleEnter={handleEnter}\r\n                onChange={onChange} placeholder={placeholder} updateList={getList} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = ArticleRequest.propTypes;\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        updateList: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.props.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            console.log(showSuggestions);\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.props.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                //TODO: Puede ser que no exista el artículo (Dice taller)\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>El taller ingresado no existe</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        placeholder={this.props.placeholder}\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.props.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nexport const TaskRequest = ({ setSelectedTask, tasks, title, setTitle, handleEnter }) => {\r\n    \r\n    const [shown, setShown] = useState(false);\r\n    \r\n    if (!tasks)\r\n        return null;\r\n\r\n    return (\r\n        <DropdownButton title={title} onToggle={setShown} onSelect={(e) => {\r\n            setTitle('T' + tasks[e].id + ': ' + tasks[e].article_id + ' (' + tasks[e].article_description + ') x' + tasks[e].quantity + (tasks[e].price ? ' a $' + tasks[e].price : ''));\r\n            setSelectedTask(tasks[e]);\r\n        }} >\r\n            {tasks.map((task, index) =>\r\n                <Dropdown.Item key={task.id} eventKey={index}>\r\n                    {task.id + ': ' + task.article_id + ' (' + task.article_description + ') x' + task.quantity + (task.price ? ' a $' + task.price : '')}\r\n                </Dropdown.Item>)\r\n            }\r\n        </DropdownButton>\r\n    );\r\n}\r\n\r\n// const ArticleRequest = ({ label, placeholder, onChange }) => {\r\n\r\n//     const [id, setId] = useState('');\r\n//     const [description, setDescription] = useState('');\r\n//     const [error, setError] = useState(false);\r\n//     const [show, setShow] = useState(false);\r\n\r\n//     const getDescription = (userInput) => {\r\n//         Axios.post('http://localhost:3001/getDescriptionWhere', { id: userInput }).then((response) => {\r\n//             setError(response.data.length === 0);\r\n//             if (response.data.length !== 0)\r\n//                 setDescription(response.data[0].description);\r\n//             else\r\n//                 setDescription('');\r\n//         });\r\n//     }\r\n\r\n//     const autoComplete = () => {\r\n//         {/* TODO: Que muestre un autocomplete (como el de talleres) que recupere el art. por su desc.\r\n//             Puede ser literalmente el mismo, que cada una de las opciones sea con el formato: \"art: desc\"\r\n//             De esta forma, al buscar la desc, ya dice el artículo. Lo ideal searía que luego lo ingrese auto\r\n//             máticamente*/}\r\n//         return;\r\n//     };\r\n\r\n//     const popover = (\r\n//         <Popover>\r\n//             <Popover.Header as=\"h3\">Descripción de artículo</Popover.Header>\r\n//             <Popover.Body>\r\n//                 {error ?\r\n//                     <>\r\n//                         <em>No existe este código de artículo</em>\r\n//                         <Button onClick={() => {\r\n//                             setId('');\r\n//                             setShow(true);\r\n//                         }}>Registrarlo</Button>\r\n//                         <p>Buscarlo</p>\r\n//                         {autoComplete()}\r\n//                     </>\r\n//                     : description}\r\n//             </Popover.Body>\r\n//         </Popover>\r\n//     );\r\n\r\n//     if (!show)\r\n//         return (\r\n//             <Form.Group className=\"mb-3\">\r\n//                 <Form.Label>{label}</Form.Label>\r\n//                 <InputGroup>\r\n//                     <OverlayTrigger show={id !== ''} placement=\"right\" overlay={popover}>\r\n//                         <FormControl type=\"text\" placeholder={placeholder} onChange={(e) => {\r\n//                             onChange(e);\r\n//                             setId(e.target.value)\r\n//                             getDescription(e.target.value);\r\n//                         }} />\r\n//                     </OverlayTrigger>\r\n//                 </InputGroup>\r\n//             </Form.Group>);\r\n//     return (<ModalArt handleClose={() => setShow(false)} show={show} registration={true} />);\r\n// }","D:\\Users\\PC\\VirtualNAU\\client\\src\\Menu\\RegistrationDrop\\modals.js",[],{"ruleId":"146","severity":1,"message":"147","line":157,"column":8,"nodeType":"148","endLine":157,"endColumn":22,"suggestions":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":39,"column":29,"nodeType":"156","messageId":"157","endLine":39,"endColumn":31},{"ruleId":"150","replacedBy":"158"},{"ruleId":"152","replacedBy":"159"},{"ruleId":"150","replacedBy":"160"},{"ruleId":"152","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":6,"column":8,"nodeType":"164","messageId":"165","endLine":6,"endColumn":15},{"ruleId":"162","severity":1,"message":"166","line":7,"column":8,"nodeType":"164","messageId":"165","endLine":7,"endColumn":22},{"ruleId":"162","severity":1,"message":"167","line":12,"column":10,"nodeType":"164","messageId":"165","endLine":12,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":81,"column":29,"nodeType":"156","messageId":"157","endLine":81,"endColumn":31},{"ruleId":"162","severity":1,"message":"168","line":371,"column":12,"nodeType":"164","messageId":"165","endLine":371,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":42,"column":29,"nodeType":"156","messageId":"157","endLine":42,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":60,"column":42,"nodeType":"156","messageId":"157","endLine":60,"endColumn":44},{"ruleId":"169","severity":2,"message":"170","line":36,"column":40,"nodeType":"164","messageId":"171","endLine":36,"endColumn":45},{"ruleId":"169","severity":2,"message":"170","line":38,"column":21,"nodeType":"164","messageId":"171","endLine":38,"endColumn":26},{"ruleId":"150","replacedBy":"172"},{"ruleId":"152","replacedBy":"173"},{"ruleId":"146","severity":1,"message":"147","line":157,"column":8,"nodeType":"148","endLine":157,"endColumn":22,"suggestions":"174"},{"ruleId":"154","severity":1,"message":"155","line":39,"column":29,"nodeType":"156","messageId":"157","endLine":39,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":42,"column":29,"nodeType":"156","messageId":"157","endLine":42,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":60,"column":42,"nodeType":"156","messageId":"157","endLine":60,"endColumn":44},{"ruleId":"175","severity":1,"message":"176","line":34,"column":9,"nodeType":"177","messageId":"178","endLine":105,"endColumn":10},{"ruleId":"162","severity":1,"message":"179","line":111,"column":17,"nodeType":"164","messageId":"165","endLine":111,"endColumn":22},{"ruleId":"162","severity":1,"message":"180","line":111,"column":24,"nodeType":"164","messageId":"165","endLine":111,"endColumn":28},{"ruleId":"162","severity":1,"message":"163","line":6,"column":8,"nodeType":"164","messageId":"165","endLine":6,"endColumn":15},{"ruleId":"162","severity":1,"message":"166","line":7,"column":8,"nodeType":"164","messageId":"165","endLine":7,"endColumn":22},{"ruleId":"162","severity":1,"message":"167","line":12,"column":10,"nodeType":"164","messageId":"165","endLine":12,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":81,"column":29,"nodeType":"156","messageId":"157","endLine":81,"endColumn":31},{"ruleId":"162","severity":1,"message":"168","line":371,"column":12,"nodeType":"164","messageId":"165","endLine":371,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["181"],"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["182"],["183"],["182"],["183"],"no-unused-vars","'Popover' is defined but never used.","Identifier","unusedVar","'OverlayTrigger' is defined but never used.","'ModalArt' is defined but never used.","'shown' is assigned a value but never used.","no-undef","'title' is not defined.","undef",["182"],["183"],["184"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'table' is assigned a value but never used.","'data' is assigned a value but never used.",{"desc":"185","fix":"186"},"no-global-assign","no-unsafe-negation",{"desc":"185","fix":"187"},"Update the dependencies array to be: [name, selectedTask]",{"range":"188","text":"189"},{"range":"190","text":"189"},[5947,5961],"[name, selectedTask]",[5947,5961]]