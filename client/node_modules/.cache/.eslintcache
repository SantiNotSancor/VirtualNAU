[{"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js":"1","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\indexVendor.js":"2","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\loginIndex.js":"3","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js":"4","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js":"5","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js":"6","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js":"7","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js":"8","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js":"9","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js":"10","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js":"11","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js":"12","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js":"13","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\indexWorkshopAdm.js":"14"},{"size":368,"mtime":1659976253534,"results":"15","hashOfConfig":"16"},{"size":793,"mtime":1659541534561,"results":"17","hashOfConfig":"16"},{"size":4743,"mtime":1659541522541,"results":"18","hashOfConfig":"16"},{"size":3177,"mtime":1659978043585,"results":"19","hashOfConfig":"16"},{"size":5183,"mtime":1659973142478,"results":"20","hashOfConfig":"16"},{"size":16378,"mtime":1659973142494,"results":"21","hashOfConfig":"16"},{"size":8808,"mtime":1659973142485,"results":"22","hashOfConfig":"16"},{"size":9342,"mtime":1659973142461,"results":"23","hashOfConfig":"16"},{"size":2099,"mtime":1659541534593,"results":"24","hashOfConfig":"16"},{"size":2303,"mtime":1659973142504,"results":"25","hashOfConfig":"16"},{"size":2362,"mtime":1659541522541,"results":"26","hashOfConfig":"16"},{"size":25426,"mtime":1659541534874,"results":"27","hashOfConfig":"16"},{"size":6908,"mtime":1659541534593,"results":"28","hashOfConfig":"16"},{"size":1064,"mtime":1659979273944,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qnao0",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js",["62","63"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\indexVendor.js",["64"],"import React, { Component, useEffect } from 'react';\r\nimport {AddStock} from './addStock';\r\nimport {NewQuery} from './newQuery';\r\n// import {TickSuspended} from './tickSuspended';\r\n// import {TickToDos} from './tickToDos';\r\nimport './indexVendor.css';\r\n\r\nexport default class Vendor extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <style>{'body {background-color: #20154D; background-Image: url(http://localhost:3000/static/media/wave2.7146032980f03c6a0d0e.png); background-repeat: no-repeat;'}</style>\r\n        <h2 className='indexVendorh2'>¿Qué desea hacer?</h2>\r\n        <div><NewQuery /></div>\r\n        <div><AddStock /></div>\r\n        {/* <div className='card'><ViewQuery /></div> */}\r\n        {/*<TickSuspended />\r\n        <TickToDo /> */}\r\n      </>\r\n    );\r\n  }\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\loginIndex.js",["65","66","67","68","69","70","71","72","73","74"],"import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n//import './loginIndex.css';\r\nimport logo from './images/nau.png';\r\nimport { \r\n    BrowserRouter as Router,\r\n    Routes,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Vendor from '../Vendor/indexVendor';\r\n\r\nconst initialState = {\r\n    password: \"\",\r\n    actualPassword: \"\",\r\n    user: \"\",\r\n    error: false\r\n};\r\n\r\nexport default class Login extends Component {\r\n    state = initialState;\r\n\r\n    componentDidUpdate(prevState){\r\n        if(prevState.password !== this.state.password || prevState.actualPassword !== this.state.actualPassword)\r\n            this.setState({ error: this.state.password !== this.state.actualPassword });\r\n    }\r\n\r\n    submit = () => {\r\n        console.log('Correcto');\r\n\r\n        //window.open(this.state.user,'_self');\r\n        // TODO: Debe existir una página para cada usuario que se llame vendor, production, workshops, expedition o manager\r\n    };\r\n\r\n    path(){\r\n        if (this.state.error)\r\n            return;\r\n        return '/' + this.state.user;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <style>body:{'background-color: #20154D; background-image: url(\"./images/wave.png\"); background-repeat: no-repeat; background-position: 2px 280px; width: 100%; height: 700px; font-family: \"SalmaAlfasans\", sans-serif;'}</style>\r\n                <img className=\"logo\" src={logo}/>\r\n                <h1></h1>\r\n                <div className=\"divLogin\">\r\n                    <h1 className=\"h1Login\">Iniciar sesión</h1>\r\n                    <h2 className=\"h2Login\">Seleccione tipo de usuario</h2>\r\n                    <select className=\"selectLogin\" name=\"Tipo de Usuario\" id=\"usuario\"\r\n                        onChange={(user) => {\r\n                            console.log(user.target.value)\r\n                            Axios.post('http://localhost:3307/getPassword', { user: user.target.value }).then((response) =>\r\n                                this.setState({ actualPassword: response.data[0].password, user: user.target.value }));\r\n                        }}>\r\n                        <option value=\"vendor\">Vendedor</option>\r\n                        <option value=\"production\">Producción</option>\r\n                        <option value=\"workshops\">Administración de talleres</option>\r\n                        <option value=\"expedition\">Expedición</option>\r\n                        <option value=\"manager\">Gerencia</option>\r\n                    </select>\r\n                    <input className=\"inputLogin\" type=\"password\" placeholder=\"Contraseña\" onChange={(e) => this.setState({ password: e.target.value })}></input>\r\n                    {this.state.error ? <p className=\"pLogin\">Contraseña incorrecta. Vuelva a intentarlo.</p> : null}\r\n                    <br/>\r\n                    <br/>\r\n                    {/* <Router>\r\n                        <Link to={this.path()}> */}\r\n                            <button className=\"buttonLogin\" onClick={\r\n                            (e) => {\r\n                                e.preventDefault();\r\n                                const error = this.state.password !== this.state.actualPassword;\r\n                                this.setState({ error });\r\n                                if (!error)\r\n                                    this.submit();\r\n                            }\r\n                        }>\r\n                                Ingresar\r\n                            </button>\r\n                        {/* </Link>\r\n                        <Routes>\r\n                            <Route path=\"/vendor\" element={<Vendor />} />\r\n                        </Routes>\r\n                    </Router> */}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        // return (\r\n        // <Router>\r\n        //     <div>\r\n        //     <nav>\r\n        //         <ul>\r\n        //         <li>\r\n        //             <Link to=\"/vendor\"><button>Home</button></Link>\r\n        //         </li>\r\n        //         <li>\r\n        //             <Link to=\"/about\">About</Link>\r\n        //         </li>\r\n        //         <li>\r\n        //             <Link to=\"/users\">Users</Link>\r\n        //         </li>\r\n        //         </ul>\r\n        //     </nav>\r\n        //     <Routes>\r\n        //         <Route path=\"/about\" element={<About />} />\r\n        //         <Route path=\"/users\" element={<Users/>} />\r\n        //         <Route path=\"/vendor\" element={<Vendor/>} />\r\n        //     </Routes>\r\n        //     </div>\r\n        // </Router>\r\n        // );\r\n    }\r\n  }\r\n  \r\n  function Home() {\r\n    return <p>Home</p>;\r\n  }\r\n  \r\n  function About() {\r\n    return <p>About</p>;\r\n  }\r\n  \r\n  function Users() {\r\n    return <p>Users</p>;\r\n  }","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js",["75","76"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js",["77"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js",["78","79","80","81","82"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js",["83","84","85"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js",["86"],"import React from 'react';\r\nimport { ModalWork } from './modals';\r\nimport { ModalArt } from './modals';\r\nimport { ModalController } from '../../modal';\r\nimport PropTypes from 'prop-types';\r\nimport image from '../Images/registrationDrop.gif'\r\n\r\nexport class ArtWorkButton extends ModalController {\r\n\r\n    state = {\r\n        ...this.state,//Hereda los estados de ModalController (showModal: false)\r\n        modify: 'reg'\r\n    }\r\n\r\n    showModal = e => {//Cuando se presione el botón se ejecuta\r\n        this.setState({ showModal: true, modify: e })\r\n        //modify toma el valor pasado en el botón y se muestra el modal\r\n    }\r\n\r\n    callModal = () => {\r\n        if (this.props.article)\r\n            return (\r\n                <ModalArt handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n            );\r\n        return (\r\n            <ModalWork handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='card2WorkshopAdm'>\r\n                <p className='pWorkshopAdm'>{this.props.article ? 'Artículo' : 'Actualizar datos de taller'}</p>\r\n                <img id='imagen_diferente' src={image}/>\r\n                <div className='containerWorkshopAdm'>\r\n                    <button className='button4WorkshopAdm' onClick={() => this.showModal('reg')}>\r\n                        Alta\r\n                    </button>\r\n                    <button className='button5WorkshopAdm' onClick={() => this.showModal('drop')}>\r\n                        Baja\r\n                    </button>\r\n                    <button className='button6WorkshopAdm' onClick={() => this.showModal('update')}>\r\n                        Modificar\r\n                    </button>\r\n                </div>\r\n\r\n                {this.callModal()}\r\n                {/*Llama al Modal encargado de los Artículos*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nArtWorkButton.propTypes = {\r\n    article: PropTypes.bool.isRequired //Especifica si se debe hacer un botón sobre artículos o talleres\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js",["87","88","89","90","91"],"import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport { ModalArt, ModalWork } from './WorkshopsAdm/RegistrationDrop/modals'\r\nimport './textInputs.css';\r\n\r\nexport const Request = ({ onChange, toShow, label, value, handleEnter }) => {//Pedirá un dato con un input tipo text\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    let placeholder, auxLabel = label, checked = (input) => input !== '';\r\n\r\n    switch (toShow) {\r\n        //GENERAL\r\n        case 'observation':\r\n            label = 'Observaciones';\r\n            placeholder = 'Ingrese observaciones si las tiene';\r\n            checked = (input) => true;\r\n            break;\r\n\r\n        //TALLERES\r\n        case 'workshopName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'price':\r\n            label = 'Precio por unidad';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        case 'regName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getWorkshopNames');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        case 'regArticle':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código del artículo';\r\n            checked = async (input) => {\r\n                if (input === '' || isNaN(input))\r\n                    return false;\r\n                let response = await Axios.post('http://localhost:3307/getDescriptionWhere', { id: input });\r\n                return response.data.length === 0;\r\n            };\r\n            break;\r\n        case 'weight':\r\n            label = 'Peso de la tarea';\r\n            placeholder = 'Ingrese el peso entregado';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'deadline':\r\n            label = 'Fecha esperada';\r\n            placeholder = 'Ingrese la fecha esperada (DD/MM/AAAA)';\r\n            checked = (input) => {\r\n                let error = false;\r\n                let aux = input.split('/');\r\n                aux.map((e) => {\r\n                    if (isNaN(e))\r\n                        error = true;\r\n                })\r\n                return ((input.length === 10 && input[5] === '/') || input.length === 5) && input[2] === '/' && !error;\r\n            }\r\n            break;\r\n        case 'calification':\r\n            label = 'Calificación';\r\n            placeholder = 'Ingrese la calificación del 1 al 10';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) <= 10 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'packages':\r\n            label = 'Bultos';\r\n            placeholder = 'Ingrese la cantidad de bultos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'fabrics':\r\n            label = 'Telas';\r\n            placeholder = 'Ingrese las telas';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'responsible':\r\n            label = 'Responsables';\r\n            placeholder = 'Ingrese las personas responsables';\r\n            break;\r\n        case 'generalFeatures':\r\n            label = 'Características generales';\r\n            placeholder = 'Ingrese las características generales';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'colors':\r\n            label = 'Colores';\r\n            placeholder = 'Ingrese los colores';\r\n            break;\r\n        case 'threads':\r\n            label = 'Hilos';\r\n            placeholder = 'Ingrese la cantidad de hilos';\r\n            break;\r\n            \r\n        //VENDEDOR\r\n        case 'customerName':\r\n            label = 'Nombre del cliente';\r\n            placeholder = 'Ingrese el nombre del/la cliente';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getCustomerName');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        default:\r\n            console.error(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n\r\n    label = (auxLabel) ? auxLabel : label;\r\n    placeholder += '…';\r\n    return (\r\n        (toShow === 'workshopName') ? <NameRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n            ((toShow === 'article') ? <ArticleRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n                <Form.Group>\r\n                    <Form.Label>{label}</Form.Label>\r\n                    <InputGroup>\r\n                        {(toShow === 'money' || toShow === 'price') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                        <FormControl type=\"text\" placeholder={placeholder} value={value} onKeyDown={handleEnter} onChange={(e) => {\r\n                            let res;\r\n                            if (checked[Symbol.toStringTag] !== 'AsyncFunction') {\r\n                                res = checked(e.target.value);\r\n                                setError(!res);\r\n                                onChange(e, error);\r\n                            }\r\n                            else\r\n                                checked(e.target.value).then(result => {\r\n                                    setError(!result);\r\n                                    onChange(e, error);\r\n                                });\r\n                        }} />\r\n                        {(toShow === 'weight') ? <InputGroup.Text>kg</InputGroup.Text> : <></>}\r\n                    </InputGroup>\r\n                    {error ? <em>El valor ingresado no es válido</em> : <></>}\r\n                </Form.Group>)\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    handleEnter: PropTypes.func\r\n}\r\nexport class RawResourceRequest extends Component {\r\n    static propTypes = {\r\n        onChange: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n\r\n            \r\n            showModal: false,\r\n            suggestions: [],\r\n            inicialized: false\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {//TODO: MICHAT Obtener una lista con el formato id: nombre (descripción) de todas las materias primas\r\n        if(this.inicialized)\r\n            return\r\n        // Axios.get('http://localhost:3307/getArticle').then((response) => {\r\n        //     setArticle(response.data.map(article => article.id + ': ' + article.description));\r\n        // })\r\n        this.setState({suggestions: ['15: Cierre (Marca SanCor)', '4: Pasador (Amarillo)', '6: Cable (De cobre)']});//Porivisional para probar las funcionalidades\r\n        this.setState({inicialized: true});\r\n    }\r\n\r\n    updateList = () => {//TODO: MICHAT Obtener una lista con el formato id: nombre (descripción) de todas las materias primas\r\n        if(this.inicialized)\r\n            return\r\n        // Axios.get('http://localhost:3307/getArticle').then((response) => {\r\n        //     setArticle(response.data.map(article => article.id + ': ' + article.description));\r\n        // })\r\n        this.setState({suggestions: ['15: Cierre (Marca SanCor)', '4: Pasador (Amarillo)', '6: Cable (De cobre)']});//Porivisional para probar las funcionalidades\r\n        this.setState({inicialized: true});\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.state;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.state.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.state.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nconst ArticleRequest = ({ placeholder, onChange, handleEnter }) => {\r\n    const [articles, setArticles] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n\r\n    const getList = () => {\r\n        if(inicialized)\r\n            return;\r\n        Axios.get('http://localhost:3307/getArticles').then((response) => {\r\n            setArticles(response.data.map(article => article.id + ': ' + article.description));\r\n        });\r\n        setInicialized(false);\r\n    }\r\n\r\n    useEffect(getList);\r\n\r\n    const myOnChange = (event, error) => {\r\n        if (event.indexOf(':') > 0)\r\n            event = event.substr(0, event.indexOf(':'));\r\n        onChange(event, error);\r\n    }\r\n\r\n    return (\r\n        <Autocomplete suggestions={articles} onChange={myOnChange} handleEnter={handleEnter}\r\n            placeholder={placeholder} updateList={getList} />\r\n    );\r\n}\r\nArticleRequest.propTypes = {\r\n    placeholder: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    handleEnter: PropTypes.func\r\n}\r\n\r\nconst NameRequest = ({ label, placeholder, onChange, handleEnter }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n    \r\n    const getList = () => {\r\n        if(inicialized)\r\n        return;\r\n        Axios.get('http://localhost:3307/getWorkshopNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n        setInicialized(false);\r\n    }\r\n    \r\n    useEffect(getList);\r\n     \r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })} handleEnter={handleEnter}\r\n                onChange={onChange} placeholder={placeholder} updateList={getList} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = ArticleRequest.propTypes;\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        updateList: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.props.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.props.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        placeholder={this.props.placeholder}\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.props.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nexport const TaskRequest = ({ setSelectedTask, tasks, title, setTitle, handleEnter }) => {\r\n    \r\n    const [shown, setShown] = useState(false);\r\n    \r\n    if (!tasks)\r\n        return null;\r\n\r\n    return (\r\n        <DropdownButton title={title} onToggle={setShown} onSelect={(e) => {\r\n            setTitle('T' + tasks[e].id + ': ' + tasks[e].article_id + ' (' + tasks[e].article_description + ') x' + tasks[e].quantity + (tasks[e].price ? ' a $' + tasks[e].price : ''));\r\n            setSelectedTask(tasks[e]);\r\n        }} >\r\n            {tasks.map((task, index) =>\r\n                <Dropdown.Item key={task.id} eventKey={index}>\r\n                    {task.id + ': ' + task.article_id + ' (' + task.article_description + ') x' + task.quantity + (task.price ? ' a $' + task.price : '')}\r\n                </Dropdown.Item>)\r\n            }\r\n        </DropdownButton>\r\n    );\r\n}\r\n\r\n// const ArticleRequest = ({ label, placeholder, onChange }) => {\r\n\r\n//     const [id, setId] = useState('');\r\n//     const [description, setDescription] = useState('');\r\n//     const [error, setError] = useState(false);\r\n//     const [show, setShow] = useState(false);\r\n\r\n//     const getDescription = (userInput) => {\r\n//         Axios.post('http://localhost:3307/getDescriptionWhere', { id: userInput }).then((response) => {\r\n//             setError(response.data.length === 0);\r\n//             if (response.data.length !== 0)\r\n//                 setDescription(response.data[0].description);\r\n//             else\r\n//                 setDescription('');\r\n//         });\r\n//     }\r\n\r\n//     const autoComplete = () => {\r\n//         {/* TODO: Que muestre un autocomplete (como el de talleres) que recupere el art. por su desc.\r\n//             Puede ser literalmente el mismo, que cada una de las opciones sea con el formato: \"art: desc\"\r\n//             De esta forma, al buscar la desc, ya dice el artículo. Lo ideal searía que luego lo ingrese auto\r\n//             máticamente*/}\r\n//         return;\r\n//     };\r\n\r\n//     const popover = (\r\n//         <Popover>\r\n//             <Popover.Header as=\"h3\">Descripción de artículo</Popover.Header>\r\n//             <Popover.Body>\r\n//                 {error ?\r\n//                     <>\r\n//                         <em>No existe este código de artículo</em>\r\n//                         <Button onClick={() => {\r\n//                             setId('');\r\n//                             setShow(true);\r\n//                         }}>Registrarlo</Button>\r\n//                         <p>Buscarlo</p>\r\n//                         {autoComplete()}\r\n//                     </>\r\n//                     : description}\r\n//             </Popover.Body>\r\n//         </Popover>\r\n//     );\r\n\r\n//     if (!show)\r\n//         return (\r\n//             <Form.Group className=\"mb-3\">\r\n//                 <Form.Label>{label}</Form.Label>\r\n//                 <InputGroup>\r\n//                     <OverlayTrigger show={id !== ''} placement=\"right\" overlay={popover}>\r\n//                         <FormControl type=\"text\" placeholder={placeholder} onChange={(e) => {\r\n//                             onChange(e);\r\n//                             setId(e.target.value)\r\n//                             getDescription(e.target.value);\r\n//                         }} />\r\n//                     </OverlayTrigger>\r\n//                 </InputGroup>\r\n//             </Form.Group>);\r\n//     return (<ModalArt handleClose={() => setShow(false)} show={show} registration={true} />);\r\n// }","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\indexWorkshopAdm.js",[],{"ruleId":"92","severity":1,"message":"93","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":13},{"ruleId":"92","severity":1,"message":"96","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":14},{"ruleId":"92","severity":1,"message":"97","line":1,"column":28,"nodeType":"94","messageId":"95","endLine":1,"endColumn":37},{"ruleId":"92","severity":1,"message":"98","line":6,"column":22,"nodeType":"94","messageId":"95","endLine":6,"endColumn":28},{"ruleId":"92","severity":1,"message":"99","line":7,"column":5,"nodeType":"94","messageId":"95","endLine":7,"endColumn":11},{"ruleId":"92","severity":1,"message":"100","line":8,"column":5,"nodeType":"94","messageId":"95","endLine":8,"endColumn":10},{"ruleId":"92","severity":1,"message":"101","line":9,"column":5,"nodeType":"94","messageId":"95","endLine":9,"endColumn":9},{"ruleId":"92","severity":1,"message":"96","line":11,"column":8,"nodeType":"94","messageId":"95","endLine":11,"endColumn":14},{"ruleId":"102","severity":1,"message":"103","line":45,"column":17,"nodeType":"104","endLine":45,"endColumn":51},{"ruleId":"105","severity":1,"message":"106","line":46,"column":17,"nodeType":"104","endLine":46,"endColumn":21},{"ruleId":"92","severity":1,"message":"107","line":115,"column":12,"nodeType":"94","messageId":"95","endLine":115,"endColumn":16},{"ruleId":"92","severity":1,"message":"108","line":119,"column":12,"nodeType":"94","messageId":"95","endLine":119,"endColumn":17},{"ruleId":"92","severity":1,"message":"109","line":123,"column":12,"nodeType":"94","messageId":"95","endLine":123,"endColumn":17},{"ruleId":"92","severity":1,"message":"110","line":3,"column":19,"nodeType":"94","messageId":"95","endLine":3,"endColumn":30},{"ruleId":"111","severity":1,"message":"112","line":58,"column":41,"nodeType":"113","messageId":"114","endLine":60,"endColumn":69},{"ruleId":"115","severity":1,"message":"116","line":176,"column":8,"nodeType":"117","endLine":176,"endColumn":22,"suggestions":"118"},{"ruleId":"92","severity":1,"message":"119","line":10,"column":8,"nodeType":"94","messageId":"95","endLine":10,"endColumn":14},{"ruleId":"92","severity":1,"message":"120","line":11,"column":8,"nodeType":"94","messageId":"95","endLine":11,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":48,"column":29,"nodeType":"123","messageId":"124","endLine":48,"endColumn":31},{"ruleId":"121","severity":1,"message":"122","line":65,"column":42,"nodeType":"123","messageId":"124","endLine":65,"endColumn":44},{"ruleId":"92","severity":1,"message":"125","line":121,"column":56,"nodeType":"94","messageId":"95","endLine":121,"endColumn":67},{"ruleId":"92","severity":1,"message":"126","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":13},{"ruleId":"121","severity":1,"message":"122","line":115,"column":42,"nodeType":"123","messageId":"124","endLine":115,"endColumn":44},{"ruleId":"115","severity":1,"message":"127","line":137,"column":8,"nodeType":"117","endLine":137,"endColumn":18,"suggestions":"128"},{"ruleId":"102","severity":1,"message":"103","line":34,"column":17,"nodeType":"104","endLine":34,"endColumn":57},{"ruleId":"92","severity":1,"message":"129","line":6,"column":8,"nodeType":"94","messageId":"95","endLine":6,"endColumn":15},{"ruleId":"92","severity":1,"message":"130","line":7,"column":8,"nodeType":"94","messageId":"95","endLine":7,"endColumn":22},{"ruleId":"92","severity":1,"message":"131","line":12,"column":10,"nodeType":"94","messageId":"95","endLine":12,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":89,"column":29,"nodeType":"123","messageId":"124","endLine":89,"endColumn":31},{"ruleId":"92","severity":1,"message":"132","line":575,"column":12,"nodeType":"94","messageId":"95","endLine":575,"endColumn":17},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'Vendor' is defined but never used.","'useEffect' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'Home' is defined but never used.","'About' is defined but never used.","'Users' is defined but never used.","'TaskRequest' is defined but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'input.money' and 'name'. Either include them or remove the dependency array.","ArrayExpression",["133"],"'Button' is defined but never used.","'ReactToPrint' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'currentYear' is assigned a value but never used.","'Axios' is defined but never used.","React Hook useEffect has missing dependencies: 'input' and 'materialsData'. Either include them or remove the dependency array.",["134"],"'Popover' is defined but never used.","'OverlayTrigger' is defined but never used.","'ModalArt' is defined but never used.","'shown' is assigned a value but never used.",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [input.money, name, selectedTask]",{"range":"139","text":"140"},"Update the dependencies array to be: [input, input.id, materialsData]",{"range":"141","text":"142"},[7813,7827],"[input.money, name, selectedTask]",[5932,5942],"[input, input.id, materialsData]"]