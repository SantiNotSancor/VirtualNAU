[{"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js":"1","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\index.js":"2","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\index.js":"3","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js":"4","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js":"5","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js":"6","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js":"7","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js":"8","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js":"9","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js":"10","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js":"11","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js":"12","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js":"13","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js":"14","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\showData.js":"15","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickSuspended.js":"16","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickToDos.js":"17","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js":"18","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\index.js":"19","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\newTask.js":"20","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\showOrders.js":"21"},{"size":413,"mtime":1667174604561,"results":"22","hashOfConfig":"23"},{"size":3479,"mtime":1667174604549,"results":"24","hashOfConfig":"23"},{"size":942,"mtime":1667174604557,"results":"25","hashOfConfig":"23"},{"size":1058,"mtime":1667174604559,"results":"26","hashOfConfig":"23"},{"size":5804,"mtime":1665658614147,"results":"27","hashOfConfig":"23"},{"size":8808,"mtime":1663267676170,"results":"28","hashOfConfig":"23"},{"size":9368,"mtime":1667174604556,"results":"29","hashOfConfig":"23"},{"size":3921,"mtime":1663613859482,"results":"30","hashOfConfig":"23"},{"size":16378,"mtime":1660842118128,"results":"31","hashOfConfig":"23"},{"size":2099,"mtime":1660842118121,"results":"32","hashOfConfig":"23"},{"size":22365,"mtime":1667174604565,"results":"33","hashOfConfig":"23"},{"size":2303,"mtime":1664213418121,"results":"34","hashOfConfig":"23"},{"size":2504,"mtime":1667174604562,"results":"35","hashOfConfig":"23"},{"size":6908,"mtime":1660842118113,"results":"36","hashOfConfig":"23"},{"size":17033,"mtime":1667174604563,"results":"37","hashOfConfig":"23"},{"size":638,"mtime":1655391929398,"results":"38","hashOfConfig":"23"},{"size":639,"mtime":1655391929400,"results":"39","hashOfConfig":"23"},{"size":10822,"mtime":1667172926703,"results":"40","hashOfConfig":"23"},{"size":609,"mtime":1667174604552,"results":"41","hashOfConfig":"23"},{"size":5212,"mtime":1667174604553,"results":"42","hashOfConfig":"23"},{"size":8955,"mtime":1667174604554,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"1qnao0",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\index.js",["100","101","102"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Login from './Login/index';\r\nimport Vendor from './Vendor/index';\r\nimport WorkshopsAdm from './WorkshopsAdm/index';\r\nimport Production from './Production/index';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(\r\n  <Login />,  \r\n  //<Vendor />,\r\n  //<WorkshopsAdm />,\r\n  //<Production />,\r\n  document.getElementById('root')\r\n);","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Login\\index.js",["103","104","105"],"import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n//import './index.css';\r\nimport logo from './images/nau.png';\r\nimport Vendor from '../Vendor';\r\n\r\n// import { \r\n//     BrowserRouter as Router,\r\n//     Routes,\r\n//     Route,\r\n//     Link\r\n// } from \"react-router-dom\";\r\n// import './styles.css'\r\n// import Vendor from '../Vendor';\r\n\r\nconst initialState = {\r\n    password: \"\",\r\n    user: \"\",\r\n    validations: [],\r\n    error: false\r\n};\r\n\r\nexport default class Login extends Component {\r\n    state = initialState;\r\n\r\n    componentDidMount(){\r\n        Axios.post('http://localhost:3307/getPasswords').then((response) => {\r\n            let aux = response.data.reduce((accumulator, element) => {\r\n                accumulator[element.name] = element.password;\r\n                return accumulator;\r\n            }, {});\r\n            console.log(aux);\r\n            this.setState({ validations: aux});\r\n        });\r\n    }\r\n\r\n    submit = () => {\r\n        let error = this.state.validations[this.state.user] === this.state.password;\r\n        this.setState({ error });\r\n        \r\n        if (error) //Enviar a otra pestaña\r\n            console.log('Correcto');\r\n\r\n        //window.open(this.state.user,'_self');\r\n        // TODO: Debe existir una página para cada usuario que se llame vendor, production, workshops, expedition o manager\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <style>{'body {background-color: #20154D; background-image: url(\"http://localhost:3000/images/wave.png\"); background-repeat: no-repeat; background-position: 2px 280px; width: 100%; height: 700px; font-family: \"SalmaAlfasans\", sans-serif; background-size: contain;'}</style>\r\n                <img className=\"logoIndex\" src={logo}/>\r\n                <h1></h1>\r\n                <div className=\"divLogin\">\r\n                    <h1 className=\"h1Login\">Iniciar sesión</h1>\r\n                    <h2 className=\"h2Login\">Seleccione tipo de usuario</h2>\r\n                    <select className=\"selectLogin\" name=\"Tipo de Usuario\" id=\"usuario\"\r\n                        onChange={(user) => {\r\n                            console.log(user.target.value)\r\n                            \r\n                        }}>\r\n                        <option value=\"vendor\">Vendedor</option>\r\n                        <option value=\"production\">Producción</option>\r\n                        <option value=\"workshops\">Administración de talleres</option>\r\n                        <option value=\"expedition\">Expedición</option>\r\n                        <option value=\"manager\">Gerencia</option>\r\n                    </select>\r\n                    <input className=\"inputLogin\" type=\"password\" placeholder=\"Contraseña\" onChange={(e) => this.setState({ password: e.target.value })}></input>\r\n                    {this.state.error ? <p className=\"pLogin\">Contraseña incorrecta. Vuelva a intentarlo.</p> : null}\r\n                    <br/>\r\n                    <br/>\r\n                    <button className=\"buttonLogin\" onClick={\r\n                        (e) => {\r\n                            e.preventDefault();\r\n                            const error = this.state.password !== this.state.actualPassword;\r\n                            this.setState({ error });\r\n                            if (!error)\r\n                            this.submit();\r\n                        }\r\n                    }>Ingresar</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n  }","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\index.js",["106"],"import React, { Component, useEffect } from 'react';\r\nimport {AddStock} from './addStock';\r\nimport {NewQuery} from './newQuery';\r\nimport {ModalShowData} from '../showData';\r\n// import {ViewQuery} from './viewQuery.js';\r\n// import {TickSuspended} from './tickSuspended';\r\n// import {TickToDos} from './tickToDos';\r\nimport './styles.css';\r\n\r\nexport default class Vendor extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <style>{'body {background-color: #20154D; background-Image: url(http://localhost:3000/static/media/wave2.7146032980f03c6a0d0e.png); background-repeat: no-repeat; background-size: contain;'}</style>\r\n        <h2 className='indexVendorh2'>¿Qué desea hacer?</h2>\r\n        <div><NewQuery /></div>\r\n        <div><AddStock /></div>\r\n        <div><ModalShowData /></div>\r\n        {/* <div className='card'><ViewQuery /></div> */}\r\n        {/*<TickSuspended />\r\n        <TickToDo /> */}\r\n      </>\r\n    );\r\n  }\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\newQuery.js",["107","108","109"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest, RawResourceRequest } from '../textInputs';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport newQueryLogo from './Images/newQuery.gif';\r\n\r\nconst initialState = {\r\n    customerName: '',//Añade cliente  \r\n    observation: '',//Añade observaciones\r\n    items: [{ id: '', quantity: '', color: '', toDeliver: '' }]//Lista de objetos pedido\r\n}\r\n\r\nexport class NewQuery extends Component {\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    addItem(item) {\r\n        let items = this.state.items;\r\n        items[items.length - 1] = item;\r\n        this.setState({ items: [...this.state.items, { id: '', meters: '', quantity: '', weight: '' }] })//Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\r\n    }\r\n\r\n    removeItem(i) {\r\n        let items = this.state.items;\r\n        items.splice(i, 1);\r\n        this.setState({ items });\r\n    }\r\n\r\n    changeItem(i, item) {\r\n        let items = this.state.items;\r\n        items[i] = item;\r\n        this.setState({ items });\r\n    }\r\n\r\n    post() {//TODO: MICHAT Se debe enviar items (exceptuando el último elemento, que está vacío) a la base de datos\r\n        //TODO: Se deben actualizar las órdenes de corte para que se le sume o cree una nueva, agregando los productos\r\n        this.resetState();\r\n    }\r\n\r\n    myForm = () => {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                <Request toShow=\"customerName\" onChange={(e) => {\r\n                    this.setState({ customerName: e.target.value });\r\n                }} />\r\n                <Request toShow=\"observation\" onChange={(e) => {\r\n                    this.setState({ observation: e.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Artículo</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Color</th>\r\n                            <th>Entregar</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.items ? null :\r\n                            this.state.items.map((item, index) => {\r\n                                //Debería tomar la fila dada por Row y agregarsela a la lista de items que posee el componente. De estar esta\r\n                                //ya ingresada (en caso de una modificación), reemplazarle.\r\n                                return <Row key={index} index={index} item={item} remove={i => this.removeItem(i)}\r\n                                    isLast={this.state.items.length - 1 === index} onChange={(this.state.items.length - 1 !== index) ?\r\n                                        (item) => this.changeItem(index, item) :\r\n                                        (item) => this.addItem(item)} />\r\n                            })}\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Nuevo pedido' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor1' imageClassName='imgVendor' logo={newQueryLogo} title={'Nuevo pedido'} post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\nexport const Row = ({ item, index, onChange, remove, isLast }) => {\r\n    const [input, setInput] = useState(item);//Va a tener un id, cantidad, color y si se entrega o no (bool)\r\n    const [toDeliver, setCheckbox] = useState(false);//Se entrega o no (bool)\r\n    useEffect(() => { console.log(item) });\r\n\r\n    const myRemove = () => {\r\n        remove(index);\r\n    };\r\n\r\n    return (\r\n        <tr key={index}>\r\n            {/* TODO: handleEnter */}\r\n            <td>\r\n                {/* TODO: No se borra cuando se elimina (porque no tiene value, sino onChange) */}\r\n                <Request toShow=\"article\" onChange={(event) => {\r\n                    let aux = { ...input };\r\n                    aux.id = event;\r\n                    setInput(aux);//Devuelve sólo el id (no la descripción)\r\n                    onChange(aux);\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.quantity}//Cantidad\r\n                onChange={(e) => {\r\n                    console.log(e, isNaN(e.target.value), e.target.value < 0);\r\n                    if (isNaN(e.target.value) || e.target.value < 0)\r\n                        return;\r\n                    let aux = { ...input };\r\n                    aux.quantity = e.target.value;\r\n                    setInput(aux);\r\n                    onChange(aux);\r\n                }} />\r\n            </td>\r\n            <td><FormControl value={input.color}//Peso\r\n                onChange={(e) => {\r\n                    let aux = { ...input };\r\n                    aux.color = e.target.value;\r\n                    setInput(aux);\r\n                    onChange(aux);\r\n                }} />\r\n            </td>\r\n            <td>\r\n                <Form.Check onChange={() => {\r\n                    let aux = { ...input };\r\n                    aux.toDeliver = !toDeliver;\r\n                    setCheckbox(!toDeliver);\r\n                    setInput(aux);\r\n                    onChange(aux);\r\n                }} />\r\n            </td>\r\n            {!isLast ? <td><Button onClick={myRemove}>X</Button></td> : <></>}\r\n        </tr>\r\n    );\r\n}",["110","111"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js",["112","113","114","115","116"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport image from './Images/assignTask.gif';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport ReactToPrint from \"react-to-print\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    task: '',\r\n    deadline: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: 0,\r\n    //Auto-asignar\r\n    packages: '',\r\n    description: '',\r\n    quantity: '',\r\n    //Otros\r\n    error: true,\r\n    errors: [true, true, true, true, true, true],\r\n    selectedTask: null,\r\n    tasks: [],\r\n    title: 'Elegir Tarea',\r\n    showPrint: false\r\n};\r\n\r\nexport class AssignTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n    toPrint = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => {\r\n            aux = aux && (key === index) ? error : e;\r\n        });\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (this.state.selectedTask === prevState.selectedTask && this.state.name === prevState.name)\r\n            return;\r\n        if (!this.state.name || !this.state.selectedTask || this.state.price)\r\n            return;\r\n        Axios.post('http://localhost:3307/getPrices',\r\n            { name: this.state.name, article: this.state.selectedTask.article_id }).then((response) => {\r\n                //Se debe encontrar el mayor de los id que sean menores a selectedTask.id o el mayor, si no tiene menores\r\n                if (response.data.length === 0)\r\n                    return;\r\n                let currentId = this.state.selectedTask.id, aux = response.data[0];\r\n                response.data.map((task) => {\r\n                    if ((task.id > aux.id && task.id < currentId) || (task.id > currentId && (aux.id === 0 || aux.id > currentId)))\r\n                        aux = task;\r\n                })\r\n                this.setState({ price: aux.price });\r\n            });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[(index === -1) ? 1 : index + 1].focus();\r\n        if (event.keyCode) //Si el evento es artificial ({key = 'enter'}), no se prevendrá el evento porque no existe\r\n            event.preventDefault();\r\n    };\r\n\r\n    myForm = () => {\r\n        let defaultDeadline = new Date();\r\n        defaultDeadline.setDate(defaultDeadline.getDate() + 7);\r\n        defaultDeadline = moment(defaultDeadline).format(\"DD/MM/YYYY\")\r\n        // if(!this.state.deadline)\r\n        //     this.setState({deadline: defaultDeadline});\r\n        Axios.post('http://localhost:3307/getTasks', { state: 'toAssign' }).then((response) => {\r\n            this.setState({ tasks: response.data });\r\n        });\r\n        return (\r\n            <Form ref={this.form}>\r\n                {this.state.selectedTask ?\r\n                    <>\r\n                        <h3>Bultos: {this.state.selectedTask.packages}</h3>\r\n                        <h3>Descripción: {this.state.selectedTask.article_description}</h3>\r\n                        <h3>Cantidad: {this.state.selectedTask.quantity}</h3>\r\n                    </>\r\n                    : null}\r\n\r\n                <TaskRequest setSelectedTask={(e) => {\r\n                    this.setState({ selectedTask: e, quantity: e.quantity });\r\n                    this.updateError(0, !!e);\r\n                    this.handleEnter({ key: 'enter' });\r\n                }} tasks={this.state.tasks} handleEnter={this.handleEnter}\r\n                    title={this.state.title} setTitle={(e) => { this.setState({ title: e }) }} />\r\n\r\n                <Request toShow=\"workshopName\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ name: event });\r\n                    this.updateError(1, error);\r\n                }} />\r\n\r\n                <Request toShow=\"price\" value={this.state.price.toString()} handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ price: event.target.value });\r\n                    this.updateError(2, error);\r\n                }} />\r\n\r\n                <Request toShow=\"deadline\" value={this.state.deadline} handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    let deadline = event.target.value, currentYear = new Date().getFullYear();\r\n                    //deadline += deadline.length < 10 ? '/' + currentYear : '';\r\n                    this.setState({ deadline });\r\n                    console.log('hi');\r\n                    this.updateError(3, error);\r\n                }} />\r\n\r\n                <Request toShow=\"weight\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ weight: event.target.value });\r\n                    this.updateError(4, error);\r\n                }} />\r\n\r\n                <Request toShow=\"threads\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ threads: event.target.value });\r\n                    this.updateError(5, error);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    print = () => {\r\n        this.setState({ showPrint: true });\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n        this.setState({ showPrint: false });\r\n    }\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        this.resetState();\r\n        Axios.put('http://localhost:3307/assignTask', {\r\n            name: aux.name, task: this.state.selectedTask.id, deadline: aux.deadline, weight: aux.weight, threads: aux.threads,\r\n            price: aux.price, exitDate: moment(new Date()).format(\"DD/MM/YYYY\")\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {selectedTask, deadline, quantity, weight, threads, price} = this.state;\r\n        let description = selectedTask ? selectedTask.article_description : '';\r\n        return (\r\n            <>\r\n\r\n                {/* component to be printed */}\r\n                <div style={{ display: \"none\" }}>\r\n                    <ComponentToPrint ref={(el) => (this.toPrint = el)} data={{deadline, description, quantity, weight, threads, price}}/>\r\n                </div>\r\n                <ModalOpener buttonText='Remito' handleClose={this.resetState}\r\n                    footer={{ content: this.toPrint, show: !this.state.error }} error={this.state.error}\r\n                    cardClassName='cardWorkshopAdm' containerClassName='containerWorkshopAdm' buttonClassName='button2WorkshopAdm' imageClassName='imgWorkshopAdm' logo={image} title={'Asignar Tarea'} post={this.post} children={this.myForm()} />\r\n            {/* Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nclass ComponentToPrint extends React.Component {\r\n    render(){\r\n        const { data } = this.props;\r\n        return (\r\n            <div id=\"toPrint\">\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Fecha</th>\r\n                            <th>Descripción de artículo</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Hilos</th>\r\n                            <th>Precio por unidad</th>\r\n                            <th>Dinero</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                            <td>{data.deadline}</td>\r\n                            <td>{data.description}</td>\r\n                            <td>{data.quantity}</td>\r\n                            <td>{data.weight}</td>\r\n                            <td>{data.threads}</td>\r\n                            <td>{'$' + data.price}</td>\r\n                            <td>{'$' + data.price * data.quantity}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\addStock.js",["117","118"],"import React, { Component, useEffect, useState } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, RawResourceRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\nimport moment from 'moment';\r\nimport './styles.css';\r\nimport addStockLogo from './Images/addStock.gif'\r\n\r\nconst initialState = {\r\n    responsible: '',\r\n    date: moment(new Date()).format(\"DD/MM/YYYY\"),\r\n    materials: [{id: '', meters: '', quantity: '', weight: ''}],//Una lista que tendrá objetos de la forma {id, quantity} (descripción y nombre están guardados en una tabla)\r\n    materialsData: []//Tabla que va a contener todos los datos de toda la materia prima, para hacer las conversiones entre id, descripción y nombre y cantidad, metros y peso\r\n}\r\n\r\nexport class AddStock extends Component {\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:3307/getMaterials').then(response => {\r\n            const res = response.data;\r\n            let materialsData = res.map(material => {\r\n                return {\r\n                    'id': material.id,\r\n                    'weight': (material.weight)? material.weight : 0,\r\n                    'meters': (material.meters)? material.meters : 0}\r\n            })\r\n            this.setState({ materialsData });\r\n        });\r\n    }\r\n\r\n    addMaterial(material) {\r\n        let materials = this.state.materials;\r\n        materials[materials.length - 1] = material;\r\n        this.setState({materials: [...this.state.materials, {id: '', meters: '', quantity: '', weight: ''}]})//Agrega un objeto al final de la lista. Sus propiedades serán los parámetros\r\n    }\r\n\r\n    removeMaterial(i) {\r\n        let materials = this.state.materials;\r\n        materials.splice(i, 1);\r\n        this.setState({ materials });\r\n    }\r\n\r\n    changeMaterial(i, material) {\r\n        let materials = this.state.materials;\r\n        materials[i] = material;\r\n        this.setState({ materials });\r\n    }\r\n    \r\n    post() {//Envia materials (exceptuando el último elemento, que está vacío) a la base de datos\r\n        let materials = this.state.materials.slice();\r\n        materials.pop();\r\n        materials.forEach(material => Axios.post('http://localhost:3307/updateMaterials', material));\r\n        this.resetState();\r\n    }\r\n\r\n    myForm() {\r\n        return (\r\n            <Form onSubmit={e => e.preventDefault()}>\r\n                {/* Se hará un formulario para que el usuario complete los datos de la materia prima; fecha actual, responsable, nombre, descripción y cantidad  */}\r\n                <Request toShow=\"responsible\" onChange={(event) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                }} />\r\n                <Table striped bordered id=\"taskTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID: Nombre</th>\r\n                            <th>Cantidad</th>\r\n                            <th>Peso</th>\r\n                            <th>Metros</th>\r\n                            <th></th>{/* Botón de eliminar fila */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.materials? null :\r\n                        this.state.materials.map((material, index) => {\r\n                            console.log('update')\r\n//Debería tomar la fila dada por Row y agregarsela a la lista de materias primas que posee el componente. De estar esta\r\n//ya ingresada (en caso de una modificación), reemplazarle.\r\n                        return <Row key={index} index={index} material={material} remove={i => this.removeMaterial(i)} materialsData={this.state.materialsData}\r\n                            isLast={this.state.materials.length === index + 1} onChange={(this.state.materials.length !== index + 1)?\r\n                                (material) => this.changeMaterial(index, material) :\r\n                                (material) => this.addMaterial(material)} />\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Form>\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n                <ModalOpener buttonText='Añadir stock' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor2' imageClassName='imgVendor' logo={addStockLogo} title='Añadir stock' post={this.post} children={this.myForm()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport const Row = ({ material, index, onChange, remove, isLast, materialsData }) => {\r\n\r\n    const [input, setInput] = useState(material);\r\n    const [convertion, setConvertion] = useState({});\r\n\r\n    useEffect(() => {\r\n        let aux;\r\n        if(!input.id){\r\n            setConvertion({});\r\n            aux = {}\r\n        }\r\n        else{\r\n            materialsData.map((material) => {\r\n                if(Number(material.id) === Number(input.id)){\r\n                    setConvertion(material)\r\n                    aux = material;                    \r\n                }\r\n            });\r\n        }\r\n        // if ((input.id && !aux.weight) || (!input.id && aux.weight))\r\n        //     input.weight = '-'\r\n        // else\r\n        //     if (input.weight === '-')\r\n        //         input.weight = '';\r\n        // if ((input.id && !aux.meters) || (!input.id && aux.meters))\r\n        //         input.meters = '-'\r\n        //     else\r\n        //         if (input.meters === '-')\r\n        //             input.meters = '';\r\n        if(aux.meters === 0)\r\n            input.meters = '-';\r\n        if(aux.weight === 0)\r\n            input.weight = '-';\r\n        console.log('trying with id ' + input.id);\r\n    }, [input.id]);\r\n\r\n    const changeInput = (newInput) => {\r\n        let aux = newInput;\r\n        console.log(convertion);\r\n        if(convertion && convertion !== {}) {\r\n            if(newInput.quantity !== input.quantity && newInput.quantity){//Si cambió la cantidad...\r\n                aux.weight = newInput.quantity * convertion.weight;\r\n                aux.meters = newInput.quantity * convertion.meters;\r\n            }\r\n            if(newInput.weight !== input.weight && newInput.weight && convertion.weight){//Si cambió el peso...\r\n                aux.quantity = newInput.weight / convertion.weight;\r\n                aux.meters = aux.quantity * convertion.meters;\r\n            }\r\n            if(newInput.meters !== input.meters && newInput.meters && convertion.meters){//Si cambió la longitud\r\n                aux.quantity = newInput.meters / convertion.meters;\r\n                aux.weight = aux.quantity * convertion.weight;\r\n            }\r\n        }\r\n        if(convertion.meters === 0)\r\n            aux.meters = '-';\r\n        if(convertion.weight === 0)\r\n            aux.weight = '-';\r\n        if(isNaN(aux.meters))\r\n            aux.meters = '';\r\n        if(isNaN(aux.weight))\r\n            aux.weight = '';\r\n        console.log(aux)\r\n        onChange(aux);\r\n        setInput(aux);\r\n    }\r\n\r\n    const myRemove = () => {\r\n        console.log(input);\r\n        remove(index);\r\n    };\r\n\r\n    return (\r\n            <tr key={index}>\r\n                {/* TODO: handleEnter */}\r\n                <td><RawResourceRequest placeholder=\"\" handleEnter={()=>console.log('hi')}//TODO: No se borra cuando se elimina (porque no tiene value, sino onChange)\r\n                    onChange={(e) => {\r\n                        let aux = { ...input };\r\n                        if (e.indexOf(':') > 0)\r\n                            aux.id = e.substr(0, e.indexOf(':'));\r\n                        else\r\n                            aux.id = '';\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                <td><FormControl value={input.quantity}//Cantidad\r\n                    onChange={(e) => {\r\n                        if (isNaN(e.target.value) || e.target.value < 0)\r\n                            return;\r\n                        let aux = { ...input };\r\n                        aux.quantity = e.target.value;\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                <td><FormControl value={input.weight}//Peso\r\n                    onChange={(e) => {\r\n                        if (isNaN(e.target.value) || e.target.value < 0)\r\n                            return;\r\n                        let aux = { ...input };\r\n                        aux.weight = e.target.value;\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                <td><FormControl value={input.meters}//Metros\r\n                    onChange={(e) => {\r\n                        if (isNaN(e.target.value) || e.target.value < 0)\r\n                            return;\r\n                        let aux = { ...input };\r\n                        aux.meters = e.target.value;\r\n                        changeInput({ ...aux });\r\n                    }} />\r\n                </td>\r\n                {!isLast? <td><Button onClick={myRemove}>X</Button></td> : <></>}\r\n            </tr>\r\n    );\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js",["119"],"import React, { Component, useState, useEffect } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Form from 'react-bootstrap/Form';\r\nimport image from './Images/deliverTask.gif';\r\nimport moment from 'moment';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalPrototype } from '../modal';\r\n\r\nconst initialState = {\r\n    error: true,\r\n    errors: [true, true],\r\n    showObsModal: false,\r\n    task: '',\r\n    name: '',\r\n    quantity: '',\r\n    money: '',\r\n    weight: '',\r\n    threads: '',\r\n    price: '',\r\n    faulty: '',\r\n    completed: false,\r\n    calification: '',\r\n    observation: '',\r\n    paid: false,\r\n    workshopAccount: ''\r\n}\r\n\r\nexport class DeliverTaskButton extends Component {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) =>\r\n            aux = aux && (key === index) ? error : e\r\n        );\r\n        this.setState({ error: aux });\r\n    }\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if (form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n    };\r\n\r\n    myForm = () => {\r\n        return (\r\n            <Form id='toPrint' ref={this.form} onSubmit={e => e.preventDefault()}>\r\n                <Request toShow=\"workshopName\" handleEnter={this.handleEnter} onChange={(value, error) => {\r\n                    this.setState({ name: value });\r\n                    this.updateError(0, error);\r\n                }} />\r\n                <Input name={this.state.name} onChange={(data, price, faulty, task, completed, paid, workshopAccount, usedAccount) => {\r\n                    this.setState({\r\n                        task, quantity: data.quantity, money: Number(data.money) + Number(usedAccount), weight: data.weight,\r\n                        threads: data.threads, completed, price, faulty, paid, workshopAccount\r\n                    });\r\n                    this.updateError(1, false);\r\n                }} />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    post = () => {\r\n        let { completed, task, money, weight, name, quantity, price, threads, paid, workshopAccount } = this.state;\r\n        if (!completed)\r\n            this.resetState();\r\n        Axios.post('http://localhost:3307/getTasks', { id: task }).then((response) => {\r\n            Axios.put('http://localhost:3307/payWorkshop',\r\n                { name: response.data[0].name, money: money - quantity * price })\r\n        })\r\n        Axios.post('http://localhost:3307/newPart',\r\n            {\r\n                name, task, date: moment(new Date()).format('DD/MM/YYYY'), quantity, threads, paid,\r\n                weight: Number(weight).toFixed(1), money: Number(money).toFixed(1)\r\n            }).then(() => {\r\n                if (completed)\r\n                    this.setState({ showObsModal: true });\r\n            });\r\n        Axios.put('http://localhost:3307/setAccount', { money: workshopAccount, name })//Actualizar el dinero que posee a cuenta el taller\r\n    }\r\n\r\n    completelyReturned = () => {\r\n        Axios.put('http://localhost:3307/printObs',\r\n            {\r\n                id: this.state.task, observations: this.state.observation, calification: this.state.calification,\r\n                faulty: this.state.faulty\r\n            });\r\n    }\r\n\r\n    print = () => {\r\n        if (this.state.error) {\r\n            alert('Error. No se puede imprimir una boleta inválida.');\r\n            return;\r\n        }\r\n        var printContents = document.getElementById('toPrint').innerHTML;\r\n        var originalContents = document.body.innerHTML;\r\n        document.body.innerHTML = printContents;\r\n        window.print();\r\n        document.body.innerHTML = originalContents;\r\n    }\r\n\r\n    sendObs = () => {\r\n        this.completelyReturned();\r\n        this.resetState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ModalOpener buttonText=\"Recibir tarea\" children={this.myForm()} logo={image} cardClassName='cardWorkshopAdm' containerClassName='containerWorkshopAdm' buttonClassName='button3WorkshopAdm' imageClassName='imgWorkshopAdm'\r\n                    footer={{ label: 'Imprimir', func: this.print, show: !!document.getElementById(\"taskTable\") }}\r\n                    title=\"Ingreso de tarea\" post={this.post} error={this.state.error} handleClose={this.resetState} />\r\n                {/*Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm*/}\r\n\r\n                <ModalPrototype title=\"Calificar\" show={this.state.showObsModal} post={this.sendObs} handleClose={(this.sendObs)}>\r\n                    <>\r\n                        <Request toShow=\"observation\" onChange={(e) => this.setState({ observation: e.target.value })} />\r\n                        <Request toShow=\"calification\" onChange={(e) => this.setState({ calification: e.target.value })} />\r\n                    </>\r\n                </ModalPrototype>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Input = ({ onChange, name }) => {\r\n\r\n    const [title, setTitle] = useState('Elegir tarea'); //Título del selectBox. Primero va a ser 'Elegir tarea' pero luego va a mostrar la tarea elegida\r\n    const [tasks, setTasks] = useState([]);//Todas las tareas que no se le pagaron por completo al taller\r\n    const [parts, setParts] = useState([]);//Todas las entregas parciales de la tarea elegida\r\n    const [input, setInput] = useState({ quantity: 0, weight: 0, money: 0, threads: 0 });//Lo ingresado por el usuario en la tabla\r\n    const [selectedTask, setSelectedTask] = useState('');//La tarea elegida\r\n    const [refund, setRefund] = useState(false);//¿Está cargando una devolución?\r\n    const [completed, setCompleted] = useState(false);//¿El taller entregó el total de la mercadería?\r\n    //const [actualAccount, setActualAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [account, setAccount] = useState('');//Dinero que le fue pagado al taller anteriormente (la cuenta corriente)\r\n    const [quantityBackUp, setQuantityBackUp] = useState('');//Una variable auxiliar para recordar la cantidad, de esta forma podremos saber cuándo cambia\r\n\r\n    useEffect(() => {\r\n        if (name === '')\r\n            return;\r\n        Axios.post('http://localhost:3307/getUnpaidTasks', { name }).then((response) => {\r\n            if (response.data.length === 0)\r\n                return;\r\n            setTasks(response.data);\r\n        });\r\n        console.log('update tasks');\r\n    }, [name]);\r\n\r\n    useEffect(() => {//Cuando selectedTask cambia...\r\n        setInput({ quantity: 0, weight: 0, money: 0, threads: 0 });//Resetear los valores de Input (porque el usuario no ingresó nada)\r\n        let moneyPaid = input.money;\r\n        Axios.post('http://localhost:3307/getParts', { task: selectedTask.id }).then(response => {\r\n            setParts(response.data)//Recuperar partes desde la BD y asignarselas a parts\r\n            response.data.map(part => moneyPaid += part.money);//Sumar a moneyPaid todo lo pagado en cada parte\r\n            if (name)//Si se sabe el nombre del taller...\r\n                Axios.post('http://localhost:3307/getAccount', { name }).then(response => {//Recuperar de la BD la cuenta corriente del taller\r\n                    setAccount(response.data[0].money);\r\n                });\r\n        });\r\n    }, [selectedTask]);\r\n\r\n    useEffect(() => {\r\n        let delivered = input.quantity;\r\n        let moneyPaid = isNaN(input.money) ? 0 : input.money;\r\n        parts.map(part => moneyPaid = Number(moneyPaid) + Number(part.money));//Sumar a moneyPaid todo lo pagado en cada parte\r\n        parts.map(part => delivered += part.quantity);//Sumar a delivered todas las cantidades entregadas en cada parte\r\n        if (quantityBackUp !== input.quantity) {//Si se modificó la cantidad\r\n            input.money = input.quantity * selectedTask.price - account;//Le recomienda al usuario pagar todo lo que debe pagar (lo entregado en esta parte * el precio acordado - la cuenta corriente de esta parte)\r\n            input.money = input.money < 0 ? 0 : input.money;//No se le puede recomendar pagar un número negativo\r\n            setQuantityBackUp(input.quantity);//Volver a actualizar la cantidad\r\n        }\r\n        onChange(input, selectedTask.price, selectedTask.quantity - delivered, selectedTask.id,//Se envían los cambios\r\n            delivered === selectedTask.quantity || completed, selectedTask.quantity * selectedTask.price <= moneyPaid, input.quantity * selectedTask.price - moneyPaid - account, account);//TODO: Revisar fórmula para leftover (workshopAccount)\r\n        //onChange(data, price, faulty, task, completed, paid, workshopAccount, usedAccount)//objeto con todo lo ingresado, precio, artículos fallados, id de tarea, si se entregaron todos los artículos, si se pagó la totalidad de la tarea, lo que le quedará de cuenta corriente al taller luego de la parte y la cantidad de dinero utilizado de la cuenta corriente\r\n    }, [input, completed, refund]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const inputField = (property, total) => {//Función que devuelve un inputbox para ingresar datos al objeto input. propery\r\n        //property es la propiedad de input que se quiere modificar con el inputbox y total es el objeto que contiene todos los totales\r\n        return (\r\n            <FormControl value={input[property]}//Asignar al inputbox la variable input[property], es decir que cada vez que el inputbox se modifica, la variable también y vice versa\r\n                onChange={(e) => {//Cuando cambia el inputbox...\r\n                    let value = e.target.value;\r\n                    if (isNaN(value) || (total[property] < value && property !== 'money'))//Si el valor es inválido...\r\n                        return;//Cancelar\r\n                    let aux = { ...input };\r\n                    aux[property] = (value[value.length - 1] === '.') ? value : Number(value);\r\n                    aux[property] = (refund) ?//Si se está haciendo una devolución de mercadería o se contó mal la mercadería en una parte anterior\r\n                        -Math.abs(aux[property]) ://Poner en negativo lo ingresado (así se suma y no se resta al total)\r\n                        (aux[property] < 0) ? 0 : aux[property];//Si la propiedad es negativa, convertir en 0\r\n                    if (property === 'quantity' || property === 'threads')//Si la propiedad es cantidad o hilos...\r\n                        aux[property] = Math.round(aux[property]);//No puede ser decimal\r\n                    setInput({ ...aux });\r\n                }} />\r\n        );\r\n    }\r\n\r\n    const getTable = () => {\r\n\r\n        let total = {\r\n            quantity: selectedTask.quantity,\r\n            weight: selectedTask.weight,\r\n            money: selectedTask.quantity * selectedTask.price,\r\n            threads: selectedTask.threads\r\n        };\r\n        return (\r\n            <>\r\n                {parts.map((part, index) => {\r\n                    total = {\r\n                        quantity: total.quantity - part.quantity,\r\n                        weight: total.weight - part.weight,\r\n                        money: total.money - part.money,\r\n                        threads: total.threads - part.threads,\r\n                    };\r\n                    return (\r\n                        <tr key={index}>{/*Muestra el medio*/}\r\n                            <td>{part.date}</td>\r\n                            <td>{part.quantity}</td>\r\n                            <td>{total.quantity}</td>\r\n                            <td>{Number(part.weight).toFixed(1)}</td>\r\n                            <td>{Number(total.weight).toFixed(1)}</td>\r\n                            <td>{part.threads}</td>\r\n                            <td>{total.threads}</td>\r\n                            <td>{'$' + Number(part.money).toFixed(1)}</td>\r\n                            <td>{ }</td>\r\n                            <td>{'$' + Number(total.money).toFixed(1)}</td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                <tr>{/*Muestra la última fila*/}\r\n                    <td>{moment(new Date()).format('DD/MM/YYYY')}</td>\r\n                    <td>{inputField('quantity', total)}</td>\r\n                    <td>{total.quantity - input.quantity}</td>\r\n                    <td>{inputField('weight', total)}</td>\r\n                    <td>{(total.weight - input.weight).toFixed(1)}</td>\r\n                    <td>{inputField('threads', total)}</td>\r\n                    <td>{total.threads - input.threads}</td>\r\n                    <td>{inputField('money', total)}</td>\r\n                    <td>{'$' + account}</td>\r\n                    <td>{'$' + (total.money - input.money - account).toFixed(1)}</td>\r\n                </tr>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const getExceeded = () => {//Devuelve true si se excedió la fecha de entrega\r\n        if (!selectedTask.deadline)\r\n            return;\r\n        let today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        var dateParts = selectedTask.deadline.split('/');\r\n        var deadline = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        return today > deadline;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ 'justifyContent': 'space-between', 'display': 'flex', 'alignItems': 'baseline' }}>\r\n                <TaskRequest setSelectedTask={setSelectedTask} tasks={tasks} title={title} setTitle={setTitle} />\r\n                <h4 style={{ 'color': getExceeded() ? 'red' : 'green' }}>\r\n                    {(selectedTask === '') ? null : selectedTask.deadline}\r\n                </h4>\r\n            </div>\r\n            {title === 'Elegir tarea' ? null :\r\n                <>\r\n                    <Form.Check onChange={() => {\r\n                        setRefund(!refund);\r\n                        input.money = -input.money;\r\n                        input.quantity = -input.quantity;\r\n                        input.threads = -input.threads;\r\n                        input.weight = -input.weight;\r\n                    }} label=\"Devolución o corrección\" />\r\n                    <Form.Check onChange={() => setCompleted(!completed)} label=\"Tarea cerrada\" />\r\n                    <Table striped bordered id=\"taskTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Fecha</th>\r\n                                <th>Cantidad entregada por el taller</th>\r\n                                <th>Cantidad total de la tarea</th>\r\n                                <th>Peso entregado por el taller</th>\r\n                                <th>Peso total</th>\r\n                                <th>Hilos devueltos</th>\r\n                                <th>Hilos totales</th>\r\n                                <th>Dinero entregado</th>\r\n                                <th>Dinero a cuenta</th>\r\n                                <th>Dinero total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr style={{ 'backgroundColor': 'green' }}>{/*Muestra el primero*/}\r\n                                <td>{selectedTask.exitDate}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.quantity}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.weight}</td>\r\n                                <td></td>\r\n                                <td>{selectedTask.threads}</td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td>{'$' + selectedTask.price * selectedTask.quantity}</td>\r\n                            </tr>\r\n                            {getTable()}\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js",["120"],"import React from 'react';\r\nimport { ModalWork } from './modals';\r\nimport { ModalArt } from './modals';\r\nimport { ModalController } from '../../modal';\r\nimport PropTypes from 'prop-types';\r\nimport image from '../Images/registrationDrop.gif'\r\n\r\nexport class ArtWorkButton extends ModalController {\r\n\r\n    state = {\r\n        ...this.state,//Hereda los estados de ModalController (showModal: false)\r\n        modify: 'reg'\r\n    }\r\n\r\n    showModal = e => {//Cuando se presione el botón se ejecuta\r\n        this.setState({ showModal: true, modify: e })\r\n        //modify toma el valor pasado en el botón y se muestra el modal\r\n    }\r\n\r\n    callModal = () => {\r\n        if (this.props.article)\r\n            return (\r\n                <ModalArt handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n            );\r\n        return (\r\n            <ModalWork handleClose={this.hideModal} show={this.state.showModal} modify={this.state.modify}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='card2WorkshopAdm'>\r\n                <p className='pWorkshopAdm'>{this.props.article ? 'Artículo' : 'Actualizar datos de taller'}</p>\r\n                <img id='imagen_diferente' src={image}/>\r\n                <div className='containerWorkshopAdm'>\r\n                    <button className='button4WorkshopAdm' onClick={() => this.showModal('reg')}>\r\n                        Alta\r\n                    </button>\r\n                    <button className='button5WorkshopAdm' onClick={() => this.showModal('drop')}>\r\n                        Baja\r\n                    </button>\r\n                    <button className='button6WorkshopAdm' onClick={() => this.showModal('update')}>\r\n                        Modificar\r\n                    </button>\r\n                </div>\r\n\r\n                {this.callModal()}\r\n                {/*Llama al Modal encargado de los Artículos*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nArtWorkButton.propTypes = {\r\n    article: PropTypes.bool.isRequired //Especifica si se debe hacer un botón sobre artículos o talleres\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\textInputs.js",["121","122","123","124","125"],"import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport { ModalArt, ModalWork } from './WorkshopsAdm/RegistrationDrop/modals'\r\nimport './textInputs.css';\r\n\r\nexport const Request = ({ onChange, toShow, label, value, handleEnter }) => {//Pedirá un dato con un input tipo text\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    let placeholder, auxLabel = label, checked = (input) => input !== '';\r\n\r\n    switch (toShow) {\r\n        //GENERAL\r\n        case 'observation':\r\n            label = 'Observaciones';\r\n            placeholder = 'Ingrese observaciones si las tiene';\r\n            checked = (input) => true;\r\n            break;\r\n\r\n        //TALLERES\r\n        case 'workshopName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'price':\r\n            label = 'Precio por unidad';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        case 'regName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getWorkshopNames');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        case 'regArticle':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código del artículo';\r\n            checked = async (input) => {\r\n                if (input === '' || isNaN(input))\r\n                    return false;\r\n                let response = await Axios.post('http://localhost:3307/getDescriptionWhere', { id: input });\r\n                return response.data.length === 0;\r\n            };\r\n            break;\r\n        case 'weight':\r\n            label = 'Peso de la tarea';\r\n            placeholder = 'Ingrese el peso entregado';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'deadline':\r\n            label = 'Fecha esperada';\r\n            placeholder = 'Ingrese la fecha esperada (DD/MM/AAAA)';\r\n            checked = (input) => {\r\n                let error = false;\r\n                let aux = input.split('/');\r\n                aux.map((e) => {\r\n                    if (isNaN(e))\r\n                        error = true;\r\n                })\r\n                return ((input.length === 10 && input[5] === '/') || input.length === 5) && input[2] === '/' && !error;\r\n            }\r\n            break;\r\n        case 'calification':\r\n            label = 'Calificación';\r\n            placeholder = 'Ingrese la calificación del 1 al 10';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) <= 10 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'packages':\r\n            label = 'Bultos';\r\n            placeholder = 'Ingrese la cantidad de bultos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'fabrics':\r\n            label = 'Telas';\r\n            placeholder = 'Ingrese las telas';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'responsible':\r\n            label = 'Responsables';\r\n            placeholder = 'Ingrese las personas responsables';\r\n            break;\r\n        case 'generalFeatures':\r\n            label = 'Características generales';\r\n            placeholder = 'Ingrese las características generales';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'colors':\r\n            label = 'Colores';\r\n            placeholder = 'Ingrese los colores';\r\n            break;\r\n        case 'threads':\r\n            label = 'Hilos';\r\n            placeholder = 'Ingrese la cantidad de hilos';\r\n            break;\r\n            \r\n        //VENDEDOR\r\n        case 'customerName':\r\n            label = 'Nombre del cliente';\r\n            placeholder = 'Ingrese el nombre del/la cliente';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getCustomerName');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        default:\r\n            console.error(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n\r\n    label = (auxLabel) ? auxLabel : label;\r\n    placeholder += '…';\r\n    return (\r\n        (toShow === 'workshopName') ? <NameRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n            ((toShow === 'article') ? <ArticleRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n                <Form.Group>\r\n                    <Form.Label>{label}</Form.Label>\r\n                    <InputGroup>\r\n                        {(toShow === 'money' || toShow === 'price') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                        <FormControl type=\"text\" placeholder={placeholder} value={value} onKeyDown={handleEnter} onChange={(e) => {\r\n                            let res;\r\n                            if (checked[Symbol.toStringTag] !== 'AsyncFunction') {\r\n                                res = checked(e.target.value);\r\n                                setError(!res);\r\n                                onChange(e, error);\r\n                            }\r\n                            else\r\n                                checked(e.target.value).then(result => {\r\n                                    setError(!result);\r\n                                    onChange(e, error);\r\n                                });\r\n                        }} />\r\n                        {(toShow === 'weight') ? <InputGroup.Text>kg</InputGroup.Text> : <></>}\r\n                    </InputGroup>\r\n                    {error ? <em>El valor ingresado no es válido</em> : <></>}\r\n                </Form.Group>)\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    handleEnter: PropTypes.func\r\n}\r\nexport class RawResourceRequest extends Component {\r\n    static propTypes = {\r\n        onChange: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n\r\n            \r\n            showModal: false,\r\n            suggestions: [],\r\n            inicialized: false\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if(this.inicialized)\r\n            return\r\n        Axios.get('http://localhost:3307/getmaterials').then((response) => {\r\n            let suggestions = response.data.map(material => material.id + ': ' + material.description);\r\n            this.setState({inicialized: true, suggestions});\r\n        });\r\n    }\r\n\r\n    updateList = () => {\r\n        // if(this.inicialized)\r\n        //     return\r\n        Axios.get('http://localhost:3307/getmaterials').then((response) => {\r\n            let suggestions = response.data.map(material => material.id + ': ' + material.name + ' (' + material.description + ')');\r\n            this.setState({inicialized: true, suggestions});\r\n        });\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.state;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.state.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.state.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nconst ArticleRequest = ({ placeholder, onChange, handleEnter }) => {\r\n    const [articles, setArticles] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n\r\n    const getList = () => {\r\n        if(inicialized)\r\n            return;\r\n        Axios.get('http://localhost:3307/getArticles').then((response) => {\r\n            setArticles(response.data.map(article => article.id + ': ' + article.description));\r\n        });\r\n        setInicialized(false);\r\n    }\r\n\r\n    useEffect(getList);\r\n\r\n    const myOnChange = (event, error) => {\r\n        if (event.indexOf(':') > 0)\r\n            event = event.substr(0, event.indexOf(':'));\r\n        onChange(event, error);\r\n    }\r\n\r\n    return (\r\n        <Autocomplete suggestions={articles} onChange={myOnChange} handleEnter={handleEnter}\r\n            placeholder={placeholder} updateList={getList} />\r\n    );\r\n}\r\nArticleRequest.propTypes = {\r\n    placeholder: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    handleEnter: PropTypes.func\r\n}\r\n\r\nconst NameRequest = ({ label, placeholder, onChange, handleEnter }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n    \r\n    const getList = () => {\r\n        if(inicialized)\r\n        return;\r\n        Axios.get('http://localhost:3307/getWorkshopNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n        setInicialized(false);\r\n    }\r\n    \r\n    useEffect(getList);\r\n     \r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })} handleEnter={handleEnter}\r\n                onChange={onChange} placeholder={placeholder} updateList={getList} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = ArticleRequest.propTypes;\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        updateList: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.props.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.props.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        placeholder={this.props.placeholder}\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.props.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nexport const TaskRequest = ({ setSelectedTask, tasks, title, setTitle, handleEnter }) => {\r\n    \r\n    const [shown, setShown] = useState(false);\r\n    \r\n    if (!tasks)\r\n        return null;\r\n\r\n    return (\r\n        <DropdownButton title={title} onToggle={setShown} onSelect={(e) => {\r\n            setTitle('T' + tasks[e].id + ': ' + tasks[e].article_id + ' (' + tasks[e].article_description + ') x' + tasks[e].quantity + (tasks[e].price ? ' a $' + tasks[e].price : ''));\r\n            setSelectedTask(tasks[e]);\r\n        }} >\r\n            {tasks.map((task, index) =>\r\n                <Dropdown.Item key={task.id} eventKey={index}>\r\n                    {task.id + ': ' + task.article_id + ' (' + task.article_description + ') x' + task.quantity + (task.price ? ' a $' + task.price : '')}\r\n                </Dropdown.Item>)\r\n            }\r\n        </DropdownButton>\r\n    );\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modalOpener.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\modal.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\showData.js",["126","127","128","129","130","131","132","133","134"],"import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalOpener } from './modalOpener';\r\n\r\nconst initialState = {\r\n    data: '', //El nombre de la BD de la que sacamos los datos\r\n    table: [],//La tabla de datos sin filtrar\r\n    filteredTable: [],//La tabla a mostrar\r\n    titles: [],//Los atributos de la BD\r\n    headers: [],//Los títulos que se mostrarán en la tabla\r\n    input: '',//Ingreso de Inputbox para filtrar la tabla\r\n    filters: [],//Lista que muestra el tipo de filtro\r\n    filterInputs: [] //Lista que contiene lo ingresado por el usuario en cada filtro\r\n};\r\n\r\nexport class ModalShowData extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Ver datos' handleClose={this.resetState}\r\n                className={'title'} /*logo={image}*/ title={'Ver datos'} children={<ShowData />} />\r\n        );\r\n    }\r\n}\r\n\r\nexport class ShowData extends Component {\r\n\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    setData = e => {//Consigue los datos de la base de datos, en base a e, que le especifica qué datos buscar   \r\n        console.log('hi');\r\n        Axios.get('http://localhost:3307/get' + e.charAt(0).toUpperCase() + e.slice(1)).then(response => {\r\n            const res = response.data, table = [], titles = [];\r\n            if (res)\r\n                res.map(row => table.push(Object.values(row)));\r\n            Object.getOwnPropertyNames(res[0]).map(property => {\r\n                let header;\r\n                switch (property) {\r\n                    case 'date':\r\n                        header = 'Fecha';\r\n                        break;\r\n                    case 'id':\r\n                        header = 'Código';\r\n                        break;\r\n                    case 'description':\r\n                        header = 'Descripción';\r\n                        break;\r\n                    case 'name':\r\n                        header = 'Nombre';\r\n                        break;\r\n                    case 'contact':\r\n                        header = 'Contacto';\r\n                        break;\r\n                    case 'money':\r\n                        header = (this.state.data === 'Workshop') ? 'Cuenta corriente' : 'Saldo';\r\n                        break;\r\n                    case 'article_id':\r\n                        header = 'Código de artículo';\r\n                        break;\r\n                    case 'article_description':\r\n                        header = 'Descripción de artículo';\r\n                        break;\r\n                    case 'quantity':\r\n                        header = 'Cantidad';\r\n                        break;\r\n                    case 'packages':\r\n                        header = 'Bultos';\r\n                        break;\r\n                    case 'cutDate':\r\n                        header = 'Fecha de corte';\r\n                        break;\r\n                    case 'fabrics':\r\n                        header = 'Telas';\r\n                        break;\r\n                    case 'colors':\r\n                        header = 'Colores';\r\n                        break;\r\n                    case 'responsible':\r\n                        header = 'responsible/s';\r\n                        break;\r\n                    case 'generalFeatures':\r\n                        header = 'Detalles';\r\n                        break;\r\n                    case 'state':\r\n                        header = 'Estado';\r\n                        break;\r\n                    case 'exitDate':\r\n                        header = 'Fecha de salida';\r\n                        break;\r\n                    case 'deadline':\r\n                        header = 'Fecha esperada';\r\n                        break;\r\n                    case 'weight':\r\n                        header = 'Peso';\r\n                        break;\r\n                    case 'price':\r\n                        header = 'Precio unitario';\r\n                        break;\r\n                    case 'threads':\r\n                        header = 'Hilos entregados';\r\n                        break;\r\n                    case 'calification':\r\n                        header = 'Calificación';\r\n                        break;\r\n                    case 'observations':\r\n                        header = 'Observaciones';\r\n                        break;\r\n                    case 'faulty':\r\n                        header = 'Fallados';\r\n                        break;\r\n                }\r\n                titles.push(header);\r\n            });\r\n            console.log(table);\r\n            console.log(titles);\r\n            this.setState({ titles, table, filteredTable: table, data: e });\r\n            this.setFilters(titles);\r\n        });\r\n    }\r\n\r\n    header = (name, index) => {//Devuelve un HTML tipo header que diga name\r\n        return (<th key={index}>{name}</th>);\r\n    }\r\n    \r\n    setFilters = (titles) => {//Crea los filtros en base a los títulos\r\n        let filters = [];\r\n        let filterInputs = [];\r\n        titles.map((title) => {//TODO: ¿Hecho?\r\n            switch(title){\r\n                case 'Descripción':\r\n                case 'Nombre':\r\n                case 'Contacto':\r\n                case 'Código de artículo':\r\n                case 'Descripción de artículo':\r\n                case 'Telas':\r\n                case 'Colores':\r\n                case 'responsible/s':\r\n                case 'Detalles':\r\n                case 'Código':\r\n                case 'Observaciones':\r\n                    filters.push('input');\r\n                    break;\r\n                case 'Saldo':\r\n                case 'Cantidad':\r\n                case 'Bultos':\r\n                case 'Precio unitario':\r\n                case 'Peso':\r\n                case 'Hilos entregados':\r\n                case 'Calificación':\r\n                case 'Fallados':\r\n                    filters.push('number');\r\n                    break;\r\n                case 'Fecha':\r\n                case 'Fecha de corte':\r\n                case 'Fecha de salida':\r\n                case 'Fecha esperada':\r\n                    filters.push('date');\r\n                    break;\r\n                case 'Estado':\r\n                    filters.push(['Todos', 'Asignado', 'No Asignado', 'Devuelto']);\r\n                    break;\r\n                case 'Pago':\r\n                    filters.push(['Todos', 'Pago', 'No Pago']);\r\n                    break;\r\n                default:\r\n                    filters.push('');\r\n                    break;\r\n                }\r\n            filterInputs.push('');\r\n            })\r\n        this.setState({filters, filterInputs});\r\n    }\r\n\r\n    compareTable = () => {//Le asigna a filteredTable una versión filtrada de table \r\n        //TODO: table se actualiza a filteredTable ¿Hecho?\r\n        \r\n        const {table, filterInputs, filters} = this.state;\r\n        let filteredTable = table.slice(), toErase = [];\r\n        table.map((row, i) => {\r\n            let erase = false;\r\n            row.map((cell, j) => {\r\n                let filterInput = filterInputs[j];\r\n                let operator = filterInput[0];\r\n                switch(filters[j]){\r\n                    case 'input':\r\n                        let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                        if(!cellString.toLowerCase().includes(filterInput))\r\n                            erase = true;\r\n                        break;\r\n                    case 'number':\r\n                        let number = filterInput.slice(1, filterInput.length);\r\n                        if(filterInput === ''){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        if(isNaN(number) || (operator !== ' ' && operator !== '<' && operator !== '>' && operator !== '=')){\r\n                            erase = true;\r\n                            break;\r\n                        }\r\n                        \r\n                        number = Number(number);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = number >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = number <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = number !== cell;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case 'date':\r\n                        if(!(((filterInput.length === 10 && filterInput[5] === '/') || filterInput.length === 5) && filterInput[2] === '/')){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        let dateParts = filterInput.slice(1, filterInput.length).split('/');\r\n                        let date = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        dateParts = cell.split('/');\r\n                        cell = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = date >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = date <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = date !== cell;\r\n                                break;\r\n                        }\r\n                        erase = false;\r\n                        break;\r\n                }\r\n            })\r\n            if(erase)\r\n                toErase.push(i);\r\n        })\r\n        toErase = toErase.reverse();\r\n        toErase.map((element) => filteredTable.splice(element, 1));\r\n        if(this.state.filteredTable !== filteredTable)\r\n            this.setState({filteredTable});\r\n    }\r\n\r\n    render() {\r\n        const {filteredTable, titles, table} = this.state, data = { 'articles': 'Artículos', 'workshops': 'Talleres', 'payments': 'Pagos', 'tasks': 'Tareas'};\r\n        let title = 'Elegir datos a mostrar', dropdownList = [];\r\n        for (const key in data)\r\n            dropdownList.push(key);\r\n        return (\r\n            <>\r\n                <DropdownButton title={title} onSelect={e => {\r\n                    this.setData(e);\r\n                    title = data.e;\r\n                }}>\r\n                    {dropdownList.map((e, index) => <Dropdown.Item key={index} eventKey={e}>{data[e]}</Dropdown.Item>)}\r\n                </DropdownButton>\r\n                {(titles && filteredTable) ?\r\n                    <Table striped bordered>\r\n                        <thead>\r\n                            <tr>\r\n                                {titles.map((title, i) => this.header(title, i))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                            {this.state.filters.map((filter, i) => {\r\n                                switch (filter) {\r\n                                    case 'input':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            aux[i] = e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/></td>\r\n                                    case 'number':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                                        </DropdownButton></td>\r\n                                    case 'date':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                                            <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                                        </DropdownButton></td>\r\n                                    default:\r\n                                        if(!filter[0])\r\n                                            return <td key={i}></td>;\r\n                                        return <td key={i}>\r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            aux[i] = e;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            {filter.map((element, index) => \r\n                                            <Dropdown.Item key={index} eventKey={element}>{element}</Dropdown.Item>)}\r\n                                        </DropdownButton></td>        \r\n                                }\r\n                            })}\r\n                            </tr>\r\n                            {filteredTable.map((row, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                    : null}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickSuspended.js",["135","136","137","138"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\tickToDos.js",["139","140","141","142"],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Vendor\\viewQuery.js",["143","144","145","146","147","148","149","150","151"],"<<<<<<< Updated upstream\r\nimport React, { Component } from 'react';\r\nexport class ViewQuery extends Component {\r\n    render(){\r\n        return (<h1>Hello</h1>)\r\n    }\r\n}\r\n=======\r\nimport React, {Component} from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport viewQueryLogo from './Images/viewQuery.gif';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst initialState = {\r\n    filterInputs: [undefined, undefined, undefined, undefined, undefined, undefined, undefined], /*La cantidad de filtros es estática.*/\r\n    table: [],              /*La tabla de datos sin filtrar. Actualmente, se muestra la tabla completa, pero se puede mejorar el sistema para que se realice la primera consulta una vez se haya ingresado un dato a uno de los filtros.*/\r\n    filteredTable: []      /*La tabla de datos filtrada.*/\r\n};\r\n\r\nexport class ViewQuery extends Component{\r\n\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    setData = () => {\r\n        Axios.get(/*Hacerle un localhost a la tabla de datos cuando la termine Michat ->*/'*/get').then(response => {\r\n            const table = []; \r\n            if (response.data){\r\n                table = response.data.map(row => Object.values(row));\r\n                this.setState({table, filteredTable: table});\r\n            }\r\n        });\r\n    };\r\n\r\n    filter(filterType, i) { {/*Crea la fila de los filtros y modifica el array filterInputs*/}\r\n        switch(filterType) {\r\n            case \"number\":\r\n                return <td>\r\n                    <input type='number' onChange={(e) => {\r\n                        let aux = this.state.filterInputs;\r\n                        if(aux[i] === '')\r\n                            aux[i] = ' ';\r\n                        let firstChar = aux[i][0];\r\n                        aux[i] = firstChar + e.target.value;\r\n                        this.setState({filterInputs: aux});\r\n                        this.updateTable(filterType);\r\n                    }}></input>\r\n                    <select onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.updateTable(filterType);\r\n                    }}>\r\n                        <option value='>'>Mayor</option>\r\n                        <option value='<'>Menor</option>\r\n                        <option value='='>Igual</option>\r\n                    </select>\r\n                </td>\r\n            case 'string':\r\n                return <td>\r\n                    <input type='text' onChange={(e) => {\r\n                        let aux = this.state.filterInputs;\r\n                        aux[i] = e.target.value;\r\n                        this.setState({filterInputs: aux});\r\n                        this.updateTable();\r\n                    }}></input>\r\n                </td>\r\n        }\r\n    }\r\n\r\n    updateTable = (filterType) => {                                      /*Actualiza la tabla mostrada con el input de los filtros*/\r\n        const {table, filterInputs} = this.state;\r\n        let filteredTable = table.slice().filter(row => row.every((cell, j) => {\r\n            let filterInput = filterInputs[j];\r\n            let operator = filterInput[0];\r\n            switch(filterType) {\r\n                case 'string':\r\n                    let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                    return cellString.toLowerCase().includes(filterInput)\r\n                case 'number':\r\n                    let number = filterInput.slice(1, filterInput.length);\r\n                    if(filterInput === '')\r\n                        return true;                            /*Si no hay números a los que comparar, se devolverá true*/\r\n\r\n                    number = Number(number);\r\n                    switch(operator){\r\n                        case ' ':\r\n                            return true;                        /*Si no hay operador, no se sabe como comparar, por lo que devuelve true */\r\n                        case '>':\r\n                            return number < cell;               /*Si el numero es mayor o igual a la celda, devuelve false*/\r\n                        case '<':\r\n                            return number > cell;               /*Si el numero es mayor o igual a la celda, devuelve false*/\r\n                        case '=':\r\n                            return number === cell;              /**Si el numero  es diferente a la celda, devuelve false*/\r\n                    }\r\n                    break;\r\n            }\r\n        }));\r\n        if (this.state.filteredTable !== filteredTable)    /*Si la tabla de this.state.filteredTable (que es la tabla mostrada actualmente) es diferente a filteredTable (que es la actualización de la tabla), se actualizará el estado de filteredTable.*/\r\n            this.setState({filteredTable});                /*Si las dos tablas son iguales, no hay necesidad de actualizar filteredTable.*/\r\n    }\r\n\r\n    myQueries() {\r\n        return (\r\n            <Table striped bordered>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th> {/*Título del Diseño*/}\r\n                        <th>Nombre del Cliente</th> {/*Título del Diseño*/}\r\n                        <th>ID Artículo</th> {/*Título del Diseño*/}\r\n                        <th>Descripción del Artículo</th> {/*Título del Diseño*/}\r\n                        <th>Cantidad</th> {/*Título del Diseño*/}\r\n                        <th>Colores</th> {/*Título del Diseño*/}\r\n                        <th>Fecha de Entrada</th> {/*Título del Diseño*/}\r\n                    </tr>\r\n                </thead>\r\n                <tr>\r\n                    {this.filter('number', 0)}\r\n                    {this.filter('string', 1)}\r\n                    {this.filter('number', 2)}\r\n                    {this.filter('string', 3)}\r\n                    {this.filter('number', 4)}\r\n                    {this.filter('string', 5)}\r\n                    {this.filter('string', 6)}\r\n                </tr>\r\n                {this.state.table.map(row => {  {/*La cantidad de rows es variable, dependiendo de la cantidad de registros que haya en la tabla*/}\r\n                    <tr>\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                        <td></td>   {/*Variable del GET de la BBDD*/}\r\n                    </tr>\r\n                })}\r\n            </Table>\r\n            \r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Visualizar Pedidos' handleClose={this.resetState}\r\n                cardClassName='cardVendor' containerClassName='containerVendor' buttonClassName='buttonVendor3' imageClassName='imgVendor' logo={viewQueryLogo} title={'Visualizar Pedidos'} post={this.post()} children={this.myQueries()} />\r\n        );\r\n    }\r\n    \r\n\r\n    post() {\r\n        // Este post existe para no sacar el isRequired del prop \"post\" de modalOpener en caso de que sea necesario.\r\n        return function() {};\r\n    }\r\n}\r\n\r\n\r\n{/* <Table striped bordered>\r\n<thead>\r\n    <tr>\r\n        {titles.map((title, i) => this.header(title, i))}\r\n    </tr>\r\n</thead>\r\n<tbody>\r\n    <tr>\r\n    {this.state.filters.map((filter, i) => {\r\n        switch (filter) {\r\n            case 'input':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    aux[i] = e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/></td>\r\n            case 'number':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = ' ';\r\n                    let firstChar = aux[i][0];\r\n                    aux[i] = firstChar + e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/>\r\n                \r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                </DropdownButton></td>\r\n            case 'date':\r\n                return <td key={i}><FormControl onChange={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = ' ';\r\n                    let firstChar = aux[i][0];\r\n                    aux[i] = firstChar + e.target.value;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}/>\r\n                \r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    if(aux[i] === '')\r\n                        aux[i] = e;\r\n                    else\r\n                        aux[i] = e + aux[i].substring(1);\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                </DropdownButton></td>\r\n            default:\r\n                if(!filter[0])\r\n                    return <td key={i}></td>;\r\n                return <td key={i}>\r\n                <DropdownButton onSelect={(e) => {\r\n                    let aux = this.state.filterInputs;\r\n                    aux[i] = e;\r\n                    this.setState({filterInputs: aux});\r\n                    this.compareTable();\r\n                }}>\r\n                    {filter.map((element, index) => \r\n                    <Dropdown.Item key={index} eventKey={element}>{element}</Dropdown.Item>)}\r\n                </DropdownButton></td>        \r\n        }\r\n    })}\r\n    </tr>\r\n    {filteredTable.map((row, i) => {\r\n        return (\r\n            <tr key={i}>\r\n                {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n            </tr>\r\n        );\r\n    })}\r\n</tbody>\r\n</Table> */}\r\n>>>>>>> Stashed changes\r\n","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\index.js",[],"C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\newTask.js",["152"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request } from '../textInputs';\r\n//import image from './Images/newTask.gif';\r\nimport Axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport moment from 'moment';\r\nimport { ModalController } from '../modal';\r\n\r\nconst initialState = {\r\n    task: '',\r\n    error: true,\r\n    errors: [true, true, true, true, true, true, true],\r\n    article: '',\r\n    quantity: '',\r\n    packages: '',\r\n    cutDate: '',\r\n    fabrics: '',\r\n    colors: '',\r\n    responsible: '',\r\n    generalFeatures: '',\r\n}\r\n\r\nexport class NewTask extends ModalController {\r\n    state = initialState;\r\n    form = React.createRef();\r\n\r\n    resetState = () => {\r\n        let task = this.state.task;\r\n        this.setState(initialState);\r\n        this.setState({ task });\r\n    };\r\n\r\n    updateError = (index, error) => {\r\n        let errors = [...this.state.errors];\r\n        errors[index] = error;\r\n        this.setState({ errors });\r\n\r\n        let aux = false;\r\n        errors.map((e, key) => {\r\n            aux = aux && (key === index) ? error : e;\r\n        });\r\n        this.setState({ error: aux });\r\n    };\r\n\r\n    handleEnter = (event) => {\r\n        if (event.key.toLowerCase() !== 'enter')\r\n            return;\r\n        const form = this.form.current;\r\n        const index = [...form].indexOf(event.target);\r\n        if(form.elements[index + 1])\r\n            form.elements[index + 1].focus();\r\n        event.preventDefault();\r\n    };\r\n\r\n    myForm = () => {\r\n        Axios.get('http://localhost:3307/getTaskCount').then(response => {\r\n            let res = response.data[0].count;\r\n            let limit = 9;//TODO: Cambiar a 9999\r\n            res = (res + 1 > limit) ? 1 : res + 1;//Límite cantidad de tareas\r\n            this.setState({ task: res });\r\n        });\r\n        return (\r\n            <Form ref={this.form}>\r\n                <h3>Tarea número {this.state.task}</h3>\r\n                <Request toShow=\"article\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ article: event });\r\n                    this.updateError(0, error);\r\n                }} />\r\n\r\n                <Request toShow=\"quantityArticle\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ quantity: event.target.value });\r\n                    this.updateError(1, error);\r\n                }} />\r\n\r\n                <Request toShow=\"packages\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ packages: event.target.value });\r\n                    this.updateError(2, error);\r\n                }} />\r\n\r\n                <Request toShow=\"fabrics\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ fabrics: event.target.value });\r\n                    this.updateError(3, error);\r\n                }} />\r\n\r\n                <Request toShow=\"colors\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ colors: event.target.value });\r\n                    this.updateError(4, error);\r\n                }} />\r\n\r\n                <Request toShow=\"responsible\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ responsible: event.target.value });\r\n                    this.updateError(5, error);\r\n                }} />\r\n\r\n                <Request toShow=\"generalFeatures\" handleEnter={this.handleEnter} onChange={(event, error) => {\r\n                    this.setState({ generalFeatures: event.target.value });\r\n                    this.updateError(6, error);\r\n                }} />\r\n            </Form>\r\n        );\r\n    };\r\n\r\n    post = () => {\r\n        let aux = this.state;\r\n        this.resetState();\r\n        Axios.post('http://localhost:3307/getDescriptionWhere', { id: aux.article }).then((response) => {\r\n            let description = response.data[0].description;\r\n            Axios.delete(`http://localhost:3307/deleteTask/${aux.task}`).then(() => {\r\n                Axios.post('http://localhost:3307/updateTaskCount', { task: aux.task });\r\n                Axios.post('http://localhost:3307/newTask',\r\n                    {\r\n                        id: aux.task, article: aux.article, description, quantity: aux.quantity, packages: aux.packages,\r\n                        cutDate: moment(new Date()).format(\"DD/MM/YYYY\"), fabrics: aux.fabrics, colors: aux.colors,\r\n                        responsible: aux.responsible, generalFeatures: aux.generalFeatures\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <button onClick={this.showModal}>\r\n                Armar\r\n            </button>\r\n            // <ModalOpener buttonText='Nueva tarea' children={this.myForm()} error={this.state.error} className={'title'}\r\n            //     cardClassName='cardWorkshopAdm' buttonClassName='button2WorkshopAdm' /*logo={image}*/ title={'Creación de tarea'} post={this.post} handleClose={this.resetState} />\r\n            //Crea un botón que abre a un modal en el que aparecerá lo devuelto en this.myForm\r\n        );\r\n    };\r\n}","C:\\Users\\santi\\OneDrive\\Escritorio\\Proyecto 2022\\VirtualNAU\\client\\src\\Production\\showOrders.js",["153","154","155","156","157","158","159","160","161","162","163"],"import React, { Component } from 'react';\r\nimport { ModalOpener } from '../modalOpener';\r\nimport { Request, TaskRequest } from '../textInputs';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { NewTask } from './newTask';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { ModalController, ModalPrototype } from '../modal';\r\n//import image from './Images/ShowOrders.svg';\r\n\r\nconst initialStateOrders = {\r\n    table: [],//La tabla de datos sin filtrar\r\n    filteredTable: [],//La tabla a mostrar\r\n    titles: ['Número', 'Artículo', 'Descripción', 'Cantidad', 'Colores', 'Telas'],//Los atributos de la BD\r\n    filters: ['input', 'input', 'input', 'number', 'input', 'input'],//Lista que muestra el tipo de filtro\r\n    filterInputs: ['', '', '', '', '', ''] //Lista que contiene lo ingresado por el usuario en cada filtro\r\n};\r\n\r\nexport class ShowOrders extends Component {\r\n    \r\n    state = initialStateOrders;\r\n\r\n    resetState = () => {\r\n        this.setState(initialStateOrders);\r\n    }\r\n\r\n    componentDidMount = () => {//Consigue los datos de la base de datos de las órdenes de corte\r\n        Axios.get('http://localhost:3307/getCutOrders').then(response => {\r\n            const res = response.data, table = [];\r\n            if (res)\r\n                res.forEach(row => table.push(Object.values(row)));\r\n            this.setState({ table, filteredTable: table});\r\n            console.log(table, res);\r\n        });\r\n        // let table = [[1, 2024, 'Riñonera con tacha', '30', 'Rojo, celeste y negro', 'Frizelina'],\r\n        //              [2, 2034, 'Riñonera de cinturón', '55', 'Rojo y negro', 'Gamuza']];\r\n        //this.setState({table, filteredTable: table});\r\n    }\r\n\r\n    header = (name, index) => {//Devuelve un HTML tipo header que diga name\r\n        return (<th key={index}>{name}</th>);\r\n    }\r\n\r\n    compareTable = () => {//Le asigna a filteredTable una versión filtrada de table \r\n        //TODO: table se actualiza a filteredTable ¿Hecho?\r\n        \r\n        const {table, filterInputs, filters} = this.state;\r\n        let filteredTable = table.slice(), toErase = [];\r\n        table.map((row, i) => {\r\n            let erase = false;\r\n            row.map((cell, j) => {\r\n                let filterInput = filterInputs[j];\r\n                let operator = filterInput[0];\r\n                switch(filters[j]){\r\n                    case 'input':\r\n                        let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                        if(!cellString.toLowerCase().includes(filterInput))\r\n                            erase = true;\r\n                        break;\r\n                    case 'number':\r\n                        let number = filterInput.slice(1, filterInput.length);\r\n                        if(filterInput === ''){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        if(isNaN(number) || (operator !== ' ' && operator !== '<' && operator !== '>' && operator !== '=')){\r\n                            erase = true;\r\n                            break;\r\n                        }\r\n                        number = Number(number);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = number >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = number <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = number !== cell;\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n            })\r\n            if(erase)\r\n                toErase.push(i);\r\n        })\r\n        toErase = toErase.reverse();\r\n        toErase.map((element) => filteredTable.splice(element, 1));\r\n        if(this.state.filteredTable !== filteredTable)\r\n            this.setState({filteredTable});\r\n    }\r\n\r\n    myForm = () => {\r\n        const {filteredTable, titles, table} = this.state;\r\n        return (\r\n            <>\r\n                <Table striped bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            {titles.map((title, i) => this.header(title, i))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                        {this.state.filters.map((filter, i) => {\r\n                            switch (filter) {\r\n                                case 'input':\r\n                                    return <td key={i}><FormControl onChange={(e) => {\r\n                                        let aux = this.state.filterInputs;\r\n                                        aux[i] = e.target.value;\r\n                                        this.setState({filterInputs: aux});\r\n                                        this.compareTable();\r\n                                    }}/></td>\r\n                                case 'number':\r\n                                    return <td key={i}><FormControl onChange={(e) => {\r\n                                        let aux = this.state.filterInputs;\r\n                                        if(aux[i] === '')\r\n                                            aux[i] = ' ';\r\n                                        let firstChar = aux[i][0];\r\n                                        aux[i] = firstChar + e.target.value;\r\n                                        this.setState({filterInputs: aux});\r\n                                        this.compareTable();\r\n                                    }}/>\r\n                                    \r\n                                    <DropdownButton onSelect={(e) => {\r\n                                        let aux = this.state.filterInputs;\r\n                                        if(aux[i] === '')\r\n                                            aux[i] = e;\r\n                                        else\r\n                                            aux[i] = e + aux[i].substring(1);\r\n                                        this.setState({filterInputs: aux});\r\n                                        this.compareTable();\r\n                                    }}>\r\n                                        <Dropdown.Item eventKey={'>'}>Mayor</Dropdown.Item>\r\n                                        <Dropdown.Item eventKey={'<'}>Menor</Dropdown.Item>\r\n                                        <Dropdown.Item eventKey={'='}>Igual</Dropdown.Item>\r\n                                    </DropdownButton></td>       \r\n                            }\r\n                        })}\r\n                        </tr>\r\n                        {filteredTable.map((row, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n                                    <NewTask />\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ModalOpener buttonText='Ver órdenes' children={this.myForm()} error={this.state.error} className={'title'}\r\n                /*logo={image}*/ title={'Ver órdenes de corte'} post={()=>{}} handleClose={this.resetState} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport class NewTasks extends ModalController {\r\n    myForm = () => {\r\n        \r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <>\r\n                {/* <button className={this.props.buttonClassName} onClick={this.showModal}>Hereda la función desde ModalController\r\n                    Armar\r\n                </button> */}\r\n                <NewTask />\r\n                <button onClick={() => alert('Se ha creado una tarea nueva')}>\r\n                    Armar\r\n                </button>\r\n                <ModalPrototype show={this.state.showModal} handleClose={() => {\r\n                    this.hideModal();\r\n                    if(this.props.handleClose)\r\n                        this.props.handleClose();\r\n                }} footer={this.props.footer}\r\n                children={this.myForm()} title={this.props.title} post={() => {\r\n                    if (!this.props.error) {\r\n                        this.props.post();\r\n                        this.hideModal();\r\n                    }\r\n                    else\r\n                        alert('Error');\r\n                }} />\r\n            </>\r\n        )\r\n    }\r\n}",{"ruleId":"164","severity":1,"message":"165","line":3,"column":8,"nodeType":"166","messageId":"167","endLine":3,"endColumn":13},{"ruleId":"164","severity":1,"message":"168","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":20},{"ruleId":"164","severity":1,"message":"169","line":6,"column":8,"nodeType":"166","messageId":"167","endLine":6,"endColumn":18},{"ruleId":"164","severity":1,"message":"170","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":14},{"ruleId":"171","severity":1,"message":"172","line":52,"column":17,"nodeType":"173","endLine":52,"endColumn":56},{"ruleId":"174","severity":1,"message":"175","line":53,"column":17,"nodeType":"173","endLine":53,"endColumn":21},{"ruleId":"164","severity":1,"message":"176","line":1,"column":28,"nodeType":"166","messageId":"167","endLine":1,"endColumn":37},{"ruleId":"164","severity":1,"message":"177","line":3,"column":19,"nodeType":"166","messageId":"167","endLine":3,"endColumn":30},{"ruleId":"164","severity":1,"message":"178","line":3,"column":32,"nodeType":"166","messageId":"167","endLine":3,"endColumn":50},{"ruleId":"164","severity":1,"message":"179","line":7,"column":8,"nodeType":"166","messageId":"167","endLine":7,"endColumn":13},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"164","severity":1,"message":"184","line":10,"column":8,"nodeType":"166","messageId":"167","endLine":10,"endColumn":14},{"ruleId":"164","severity":1,"message":"185","line":11,"column":8,"nodeType":"166","messageId":"167","endLine":11,"endColumn":20},{"ruleId":"186","severity":1,"message":"187","line":48,"column":29,"nodeType":"188","messageId":"189","endLine":48,"endColumn":31},{"ruleId":"186","severity":1,"message":"187","line":65,"column":42,"nodeType":"188","messageId":"189","endLine":65,"endColumn":44},{"ruleId":"164","severity":1,"message":"190","line":121,"column":56,"nodeType":"166","messageId":"167","endLine":121,"endColumn":67},{"ruleId":"186","severity":1,"message":"187","line":118,"column":42,"nodeType":"188","messageId":"189","endLine":118,"endColumn":44},{"ruleId":"191","severity":1,"message":"192","line":140,"column":8,"nodeType":"193","endLine":140,"endColumn":18,"suggestions":"194"},{"ruleId":"191","severity":1,"message":"195","line":176,"column":8,"nodeType":"193","endLine":176,"endColumn":22,"suggestions":"196"},{"ruleId":"171","severity":1,"message":"172","line":34,"column":17,"nodeType":"173","endLine":34,"endColumn":57},{"ruleId":"164","severity":1,"message":"197","line":6,"column":8,"nodeType":"166","messageId":"167","endLine":6,"endColumn":15},{"ruleId":"164","severity":1,"message":"198","line":7,"column":8,"nodeType":"166","messageId":"167","endLine":7,"endColumn":22},{"ruleId":"164","severity":1,"message":"199","line":12,"column":10,"nodeType":"166","messageId":"167","endLine":12,"endColumn":18},{"ruleId":"186","severity":1,"message":"187","line":89,"column":29,"nodeType":"188","messageId":"189","endLine":89,"endColumn":31},{"ruleId":"164","severity":1,"message":"200","line":573,"column":12,"nodeType":"166","messageId":"167","endLine":573,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":44,"column":61,"nodeType":"188","messageId":"189","endLine":44,"endColumn":63},{"ruleId":"201","severity":1,"message":"202","line":46,"column":17,"nodeType":"203","messageId":"204","endLine":119,"endColumn":18},{"ruleId":"186","severity":1,"message":"187","line":136,"column":28,"nodeType":"188","messageId":"189","endLine":136,"endColumn":30},{"ruleId":"186","severity":1,"message":"187","line":187,"column":28,"nodeType":"188","messageId":"189","endLine":187,"endColumn":30},{"ruleId":"186","severity":1,"message":"187","line":189,"column":31,"nodeType":"188","messageId":"189","endLine":189,"endColumn":33},{"ruleId":"201","severity":1,"message":"202","line":192,"column":17,"nodeType":"203","messageId":"204","endLine":250,"endColumn":18},{"ruleId":"201","severity":1,"message":"202","line":210,"column":25,"nodeType":"203","messageId":"204","endLine":223,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":234,"column":25,"nodeType":"203","messageId":"204","endLine":247,"endColumn":26},{"ruleId":"164","severity":1,"message":"205","line":262,"column":39,"nodeType":"166","messageId":"167","endLine":262,"endColumn":44},{"ruleId":"164","severity":1,"message":"206","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":17},{"ruleId":"164","severity":1,"message":"177","line":3,"column":19,"nodeType":"166","messageId":"167","endLine":3,"endColumn":30},{"ruleId":"164","severity":1,"message":"179","line":4,"column":8,"nodeType":"166","messageId":"167","endLine":4,"endColumn":13},{"ruleId":"164","severity":1,"message":"207","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":12},{"ruleId":"164","severity":1,"message":"206","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":17},{"ruleId":"164","severity":1,"message":"177","line":3,"column":19,"nodeType":"166","messageId":"167","endLine":3,"endColumn":30},{"ruleId":"164","severity":1,"message":"179","line":4,"column":8,"nodeType":"166","messageId":"167","endLine":4,"endColumn":13},{"ruleId":"164","severity":1,"message":"207","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":12},{"ruleId":"208","severity":1,"message":"209","line":25,"column":17,"nodeType":"166","messageId":"210","endLine":25,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":31,"column":29,"nodeType":"213","messageId":"214","endLine":31,"endColumn":95},{"ruleId":"201","severity":1,"message":"202","line":32,"column":9,"nodeType":"203","messageId":"204","endLine":67,"endColumn":10},{"ruleId":"186","severity":1,"message":"215","line":72,"column":77,"nodeType":"188","messageId":"216","endLine":72,"endColumn":79},{"ruleId":"201","severity":1,"message":"202","line":75,"column":13,"nodeType":"203","messageId":"204","endLine":96,"endColumn":14},{"ruleId":"201","severity":1,"message":"202","line":85,"column":21,"nodeType":"203","messageId":"204","endLine":94,"endColumn":22},{"ruleId":"186","severity":1,"message":"187","line":125,"column":43,"nodeType":"188","messageId":"189","endLine":125,"endColumn":45},{"ruleId":"211","severity":1,"message":"212","line":125,"column":49,"nodeType":"213","messageId":"214","endLine":125,"endColumn":148},{"ruleId":"211","severity":1,"message":"217","line":153,"column":1,"nodeType":"213","messageId":"218","endLine":242,"endColumn":13},{"ruleId":"186","severity":1,"message":"187","line":39,"column":29,"nodeType":"188","messageId":"189","endLine":39,"endColumn":31},{"ruleId":"164","severity":1,"message":"206","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":17},{"ruleId":"164","severity":1,"message":"177","line":3,"column":19,"nodeType":"166","messageId":"167","endLine":3,"endColumn":30},{"ruleId":"164","severity":1,"message":"184","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":14},{"ruleId":"164","severity":1,"message":"207","line":6,"column":8,"nodeType":"166","messageId":"167","endLine":6,"endColumn":12},{"ruleId":"186","severity":1,"message":"187","line":51,"column":28,"nodeType":"188","messageId":"189","endLine":51,"endColumn":30},{"ruleId":"186","severity":1,"message":"187","line":53,"column":31,"nodeType":"188","messageId":"189","endLine":53,"endColumn":33},{"ruleId":"201","severity":1,"message":"202","line":56,"column":17,"nodeType":"203","messageId":"204","endLine":88,"endColumn":18},{"ruleId":"201","severity":1,"message":"202","line":73,"column":25,"nodeType":"203","messageId":"204","endLine":86,"endColumn":26},{"ruleId":"164","severity":1,"message":"205","line":100,"column":39,"nodeType":"166","messageId":"167","endLine":100,"endColumn":44},{"ruleId":"186","severity":1,"message":"219","line":111,"column":61,"nodeType":"188","messageId":"216","endLine":111,"endColumn":63},{"ruleId":"201","severity":1,"message":"202","line":112,"column":29,"nodeType":"203","messageId":"204","endLine":144,"endColumn":30},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'WorkshopsAdm' is defined but never used.","'Production' is defined but never used.","'Vendor' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'useEffect' is defined but never used.","'TaskRequest' is defined but never used.","'RawResourceRequest' is defined but never used.","'Axios' is defined but never used.","no-native-reassign",["220"],"no-negated-in-lhs",["221"],"'Button' is defined but never used.","'ReactToPrint' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'currentYear' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'input' and 'materialsData'. Either include them or remove the dependency array.","ArrayExpression",["222"],"React Hook useEffect has missing dependencies: 'input.money' and 'name'. Either include them or remove the dependency array.",["223"],"'Popover' is defined but never used.","'OverlayTrigger' is defined but never used.","'ModalArt' is defined but never used.","'shown' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'table' is assigned a value but never used.","'Request' is defined but never used.","'Form' is defined but never used.","no-const-assign","'table' is constant.","const","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.every() expects a value to be returned at the end of arrow function.","expectedAtEnd","Block is redundant.","redundantBlock","Array.prototype.map() expects a value to be returned at the end of arrow function.","no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [input, input.id, materialsData]",{"range":"228","text":"229"},"Update the dependencies array to be: [input.money, name, selectedTask]",{"range":"230","text":"231"},[5974,5984],"[input, input.id, materialsData]",[7813,7827],"[input.money, name, selectedTask]"]