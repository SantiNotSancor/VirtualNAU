[{"D:\\Users\\PC\\VirtualNAU\\client\\src\\index.js":"1","D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js":"2","D:\\Users\\PC\\VirtualNAU\\client\\src\\Vendor\\index.js":"3","D:\\Users\\PC\\VirtualNAU\\client\\src\\Login\\index.js":"4","D:\\Users\\PC\\VirtualNAU\\client\\src\\Vendor\\addStock.js":"5","D:\\Users\\PC\\VirtualNAU\\client\\src\\Vendor\\newQuery.js":"6","D:\\Users\\PC\\VirtualNAU\\client\\src\\modalOpener.js":"7","D:\\Users\\PC\\VirtualNAU\\client\\src\\textInputs.js":"8","D:\\Users\\PC\\VirtualNAU\\client\\src\\modal.js":"9","D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js":"10","D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js":"11","D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js":"12","D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js":"13","D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js":"14","D:\\Users\\PC\\VirtualNAU\\client\\src\\showData.js":"15"},{"size":346,"mtime":1663435834939,"results":"16","hashOfConfig":"17"},{"size":1054,"mtime":1663434237255,"results":"18","hashOfConfig":"17"},{"size":788,"mtime":1663434237104,"results":"19","hashOfConfig":"17"},{"size":4726,"mtime":1661299351317,"results":"20","hashOfConfig":"17"},{"size":9159,"mtime":1663436715266,"results":"21","hashOfConfig":"17"},{"size":5679,"mtime":1663529436533,"results":"22","hashOfConfig":"17"},{"size":2303,"mtime":1663434159282,"results":"23","hashOfConfig":"17"},{"size":25426,"mtime":1663434162433,"results":"24","hashOfConfig":"17"},{"size":2362,"mtime":1663434158747,"results":"25","hashOfConfig":"17"},{"size":6908,"mtime":1661299351443,"results":"26","hashOfConfig":"17"},{"size":3921,"mtime":1663434237294,"results":"27","hashOfConfig":"17"},{"size":16378,"mtime":1661299351447,"results":"28","hashOfConfig":"17"},{"size":8808,"mtime":1663434237161,"results":"29","hashOfConfig":"17"},{"size":2099,"mtime":1661299351444,"results":"30","hashOfConfig":"17"},{"size":16800,"mtime":1663434237304,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"ce3qgk",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},"D:\\Users\\PC\\VirtualNAU\\client\\src\\index.js",["66","67"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\index.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Vendor\\index.js",["68"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Login\\index.js",["69","70","71","72","73","74","75","76","77","78"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Vendor\\addStock.js",["79","80","81"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\Vendor\\newQuery.js",["82","83","84"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\modalOpener.js",[],["85","86"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\textInputs.js",["87","88","89","90","91"],"import React, { useState, useEffect, Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport { ModalArt, ModalWork } from './WorkshopsAdm/RegistrationDrop/modals'\r\nimport './textInputs.css';\r\n\r\nexport const Request = ({ onChange, toShow, label, value, handleEnter }) => {//Pedirá un dato con un input tipo text\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    let placeholder, auxLabel = label, checked = (input) => input !== '';\r\n\r\n    switch (toShow) {\r\n        //GENERAL\r\n        case 'observation':\r\n            label = 'Observaciones';\r\n            placeholder = 'Ingrese observaciones si las tiene';\r\n            checked = (input) => true;\r\n            break;\r\n\r\n        //TALLERES\r\n        case 'workshopName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            break;\r\n        case 'article':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código único del artículo';\r\n            break;\r\n        case 'quantityArticle':\r\n            label = 'Cantidad asignada';\r\n            placeholder = 'Ingrese la cantidad de artículos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'money':\r\n            label = 'Monto';\r\n            placeholder = 'Ingrese el monto a pagar';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'price':\r\n            label = 'Precio por unidad';\r\n            placeholder = 'Ingrese el precio por unidad';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'description':\r\n            label = 'Descripción';\r\n            placeholder = 'Ingrese una breve descripción del artículo';\r\n            break;\r\n        case 'regName':\r\n            label = 'Nombre del taller';\r\n            placeholder = 'Ingrese el nombre del/la tallerista';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getWorkshopNames');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        case 'regArticle':\r\n            label = 'Número de artículo';\r\n            placeholder = 'Ingrese el código del artículo';\r\n            checked = async (input) => {\r\n                if (input === '' || isNaN(input))\r\n                    return false;\r\n                let response = await Axios.post('http://localhost:3307/getDescriptionWhere', { id: input });\r\n                return response.data.length === 0;\r\n            };\r\n            break;\r\n        case 'weight':\r\n            label = 'Peso de la tarea';\r\n            placeholder = 'Ingrese el peso entregado';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0;\r\n            break;\r\n        case 'deadline':\r\n            label = 'Fecha esperada';\r\n            placeholder = 'Ingrese la fecha esperada (DD/MM/AAAA)';\r\n            checked = (input) => {\r\n                let error = false;\r\n                let aux = input.split('/');\r\n                aux.map((e) => {\r\n                    if (isNaN(e))\r\n                        error = true;\r\n                })\r\n                return ((input.length === 10 && input[5] === '/') || input.length === 5) && input[2] === '/' && !error;\r\n            }\r\n            break;\r\n        case 'calification':\r\n            label = 'Calificación';\r\n            placeholder = 'Ingrese la calificación del 1 al 10';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) <= 10 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'packages':\r\n            label = 'Bultos';\r\n            placeholder = 'Ingrese la cantidad de bultos';\r\n            checked = (input) => !isNaN(input) && Number(input) > 0 && Number(input) === Math.round(Number(input));\r\n            break;\r\n        case 'fabrics':\r\n            label = 'Telas';\r\n            placeholder = 'Ingrese las telas';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'responsible':\r\n            label = 'Responsables';\r\n            placeholder = 'Ingrese las personas responsables';\r\n            break;\r\n        case 'generalFeatures':\r\n            label = 'Características generales';\r\n            placeholder = 'Ingrese las características generales';\r\n            checked = (input) => true;\r\n            break;\r\n        case 'colors':\r\n            label = 'Colores';\r\n            placeholder = 'Ingrese los colores';\r\n            break;\r\n        case 'threads':\r\n            label = 'Hilos';\r\n            placeholder = 'Ingrese la cantidad de hilos';\r\n            break;\r\n            \r\n        //VENDEDOR\r\n        case 'customerName':\r\n            label = 'Nombre del cliente';\r\n            placeholder = 'Ingrese el nombre del/la cliente';\r\n            checked = async (input) => {\r\n                if (input === '')\r\n                    return false\r\n                let response = await Axios.get('http://localhost:3307/getCustomerName');\r\n                response = !response.data.find(e => e.name.toLowerCase() === input.toLowerCase());\r\n                return response;\r\n            };\r\n            break;\r\n        default:\r\n            console.error(\"ERROR, HA INGRESADO EL toShow \" + toShow + \" EN EL COMPONENTE TEXTINPUT\");\r\n    }\r\n\r\n    label = (auxLabel) ? auxLabel : label;\r\n    placeholder += '…';\r\n    return (\r\n        (toShow === 'workshopName') ? <NameRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n            ((toShow === 'article') ? <ArticleRequest handleEnter={handleEnter} placeholder={placeholder} onChange={onChange} /> :\r\n                <Form.Group>\r\n                    <Form.Label>{label}</Form.Label>\r\n                    <InputGroup>\r\n                        {(toShow === 'money' || toShow === 'price') ? <InputGroup.Text>$</InputGroup.Text> : <></>}\r\n                        <FormControl type=\"text\" placeholder={placeholder} value={value} onKeyDown={handleEnter} onChange={(e) => {\r\n                            let res;\r\n                            if (checked[Symbol.toStringTag] !== 'AsyncFunction') {\r\n                                res = checked(e.target.value);\r\n                                setError(!res);\r\n                                onChange(e, error);\r\n                            }\r\n                            else\r\n                                checked(e.target.value).then(result => {\r\n                                    setError(!result);\r\n                                    onChange(e, error);\r\n                                });\r\n                        }} />\r\n                        {(toShow === 'weight') ? <InputGroup.Text>kg</InputGroup.Text> : <></>}\r\n                    </InputGroup>\r\n                    {error ? <em>El valor ingresado no es válido</em> : <></>}\r\n                </Form.Group>)\r\n    );\r\n}\r\nRequest.propTypes = {\r\n    onChange: PropTypes.func.isRequired, //Función a ejecutar cuando se modifica el input\r\n    toShow: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    handleEnter: PropTypes.func\r\n}\r\nexport class RawResourceRequest extends Component {\r\n    static propTypes = {\r\n        onChange: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n\r\n            \r\n            showModal: false,\r\n            suggestions: [],\r\n            inicialized: false\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {//TODO: MICHAT Obtener una lista con el formato id: nombre (descripción) de todas las materias primas\r\n        if(this.inicialized)\r\n            return\r\n        // Axios.get('http://localhost:3307/getArticle').then((response) => {\r\n        //     setArticle(response.data.map(article => article.id + ': ' + article.description));\r\n        // })\r\n        this.setState({suggestions: ['15: Cierre (Marca SanCor)', '4: Pasador (Amarillo)', '6: Cable (De cobre)']});//Porivisional para probar las funcionalidades\r\n        this.setState({inicialized: true});\r\n    }\r\n\r\n    updateList = () => {//TODO: MICHAT Obtener una lista con el formato id: nombre (descripción) de todas las materias primas\r\n        if(this.inicialized)\r\n            return\r\n        // Axios.get('http://localhost:3307/getArticle').then((response) => {\r\n        //     setArticle(response.data.map(article => article.id + ': ' + article.description));\r\n        // })\r\n        this.setState({suggestions: ['15: Cierre (Marca SanCor)', '4: Pasador (Amarillo)', '6: Cable (De cobre)']});//Porivisional para probar las funcionalidades\r\n        this.setState({inicialized: true});\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.state;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.state.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.state.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nconst ArticleRequest = ({ placeholder, onChange, handleEnter }) => {\r\n    const [articles, setArticles] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n\r\n    const getList = () => {\r\n        if(inicialized)\r\n            return;\r\n        Axios.get('http://localhost:3307/getArticles').then((response) => {\r\n            setArticles(response.data.map(article => article.id + ': ' + article.description));\r\n        });\r\n        setInicialized(false);\r\n    }\r\n\r\n    useEffect(getList);\r\n\r\n    const myOnChange = (event, error) => {\r\n        if (event.indexOf(':') > 0)\r\n            event = event.substr(0, event.indexOf(':'));\r\n        onChange(event, error);\r\n    }\r\n\r\n    return (\r\n        <Autocomplete suggestions={articles} onChange={myOnChange} handleEnter={handleEnter}\r\n            placeholder={placeholder} updateList={getList} />\r\n    );\r\n}\r\nArticleRequest.propTypes = {\r\n    placeholder: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    handleEnter: PropTypes.func\r\n}\r\n\r\nconst NameRequest = ({ label, placeholder, onChange, handleEnter }) => {\r\n\r\n    const [list, setList] = useState([]);\r\n    const [inicialized, setInicialized] = useState(false);\r\n    \r\n    const getList = () => {\r\n        if(inicialized)\r\n        return;\r\n        Axios.get('http://localhost:3307/getWorkshopNames').then((response) => {\r\n            setList(response.data);\r\n        });\r\n        setInicialized(false);\r\n    }\r\n    \r\n    useEffect(getList);\r\n     \r\n    return (\r\n        <Form.Group className=\"mb-3\">\r\n            <Form.Label>{label}</Form.Label>\r\n            <Autocomplete suggestions={list.map((element) => { return element.name })} handleEnter={handleEnter}\r\n                onChange={onChange} placeholder={placeholder} updateList={getList} />\r\n        </Form.Group>\r\n    );\r\n}\r\nNameRequest.propTypes = ArticleRequest.propTypes;\r\n\r\nclass Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array).isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        updateList: PropTypes.func.isRequired,\r\n        handleEnter: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // The active selection's index\r\n            activeSuggestion: 0,\r\n            // The suggestions that match the user's input\r\n            filteredSuggestions: [],\r\n            // Whether or not the suggestion list is shown\r\n            showSuggestions: false,\r\n            // What the user has entered\r\n            userInput: \"\",\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    clearText = () => {\r\n        this.setState({activeSuggestion: 0, filteredSuggestions: [], showSuggestions: false,\r\n            userInput: \"\", showModal: false})\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        // Filter our suggestions that don't contain the user's input\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    onClick = e => {\r\n        let userInput = e.currentTarget.innerText;\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput\r\n        });\r\n        this.props.onChange(userInput, this.props.suggestions.indexOf(userInput) < 0);\r\n    };\r\n\r\n    myOnKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions, showSuggestions, userInput } = this.state;\r\n        // User pressed the enter key\r\n        if (e.key.toLowerCase() === 'enter') {\r\n            if (showSuggestions){\r\n                this.setState({\r\n                    activeSuggestion: 0,\r\n                    showSuggestions: false,\r\n                    userInput: filteredSuggestions[activeSuggestion]\r\n                });\r\n                this.props.onChange(filteredSuggestions[activeSuggestion],\r\n                    this.props.suggestions.indexOf(userInput) < 0);\r\n            }\r\n            else\r\n                this.props.handleEnter(e);\r\n        }\r\n        // User pressed the up arrow\r\n        if (e.key.toLowerCase() === 'arrowup')\r\n            if (activeSuggestion !== 0)\r\n                this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        // User pressed the down arrow\r\n        if (e.key.toLowerCase() === 'arrowdown')\r\n            if (activeSuggestion !== filteredSuggestions.length - 1)\r\n                this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            myOnKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n\r\n        let suggestionsListComponent;\r\n\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul className=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            // Flag the active suggestion with a class\r\n                            if (index === activeSuggestion)\r\n                                className = \"suggestion-active\";\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick} onMouseEnter={e =>\r\n                                    this.setState({ activeSuggestion: index })}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div className=\"no-suggestions\">\r\n                        <em>No se ha encontrado ninguna opción</em>\r\n                        <Button onClick={() => {\r\n                            this.setState({\r\n                                showModal: true\r\n                            })\r\n                        }}>Ingresar</Button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!this.state.showModal)\r\n            return (\r\n                <Fragment>\r\n                    <FormControl\r\n                        placeholder={this.props.placeholder}\r\n                        type=\"text\"\r\n                        onChange={onChange}\r\n                        onKeyDown={myOnKeyDown}\r\n                        value={userInput}\r\n                    />\r\n                    {suggestionsListComponent}\r\n                </Fragment>\r\n            );\r\n        else\r\n            return (<ModalWork handleClose={() => {\r\n                this.setState({ showModal: false });\r\n                this.props.updateList();\r\n            }}\r\n                show={this.state.showModal} registration={true} />);\r\n    }\r\n}\r\n\r\nexport const TaskRequest = ({ setSelectedTask, tasks, title, setTitle, handleEnter }) => {\r\n    \r\n    const [shown, setShown] = useState(false);\r\n    \r\n    if (!tasks)\r\n        return null;\r\n\r\n    return (\r\n        <DropdownButton title={title} onToggle={setShown} onSelect={(e) => {\r\n            setTitle('T' + tasks[e].id + ': ' + tasks[e].article_id + ' (' + tasks[e].article_description + ') x' + tasks[e].quantity + (tasks[e].price ? ' a $' + tasks[e].price : ''));\r\n            setSelectedTask(tasks[e]);\r\n        }} >\r\n            {tasks.map((task, index) =>\r\n                <Dropdown.Item key={task.id} eventKey={index}>\r\n                    {task.id + ': ' + task.article_id + ' (' + task.article_description + ') x' + task.quantity + (task.price ? ' a $' + task.price : '')}\r\n                </Dropdown.Item>)\r\n            }\r\n        </DropdownButton>\r\n    );\r\n}\r\n\r\n// const ArticleRequest = ({ label, placeholder, onChange }) => {\r\n\r\n//     const [id, setId] = useState('');\r\n//     const [description, setDescription] = useState('');\r\n//     const [error, setError] = useState(false);\r\n//     const [show, setShow] = useState(false);\r\n\r\n//     const getDescription = (userInput) => {\r\n//         Axios.post('http://localhost:3307/getDescriptionWhere', { id: userInput }).then((response) => {\r\n//             setError(response.data.length === 0);\r\n//             if (response.data.length !== 0)\r\n//                 setDescription(response.data[0].description);\r\n//             else\r\n//                 setDescription('');\r\n//         });\r\n//     }\r\n\r\n//     const autoComplete = () => {\r\n//         {/* TODO: Que muestre un autocomplete (como el de talleres) que recupere el art. por su desc.\r\n//             Puede ser literalmente el mismo, que cada una de las opciones sea con el formato: \"art: desc\"\r\n//             De esta forma, al buscar la desc, ya dice el artículo. Lo ideal searía que luego lo ingrese auto\r\n//             máticamente*/}\r\n//         return;\r\n//     };\r\n\r\n//     const popover = (\r\n//         <Popover>\r\n//             <Popover.Header as=\"h3\">Descripción de artículo</Popover.Header>\r\n//             <Popover.Body>\r\n//                 {error ?\r\n//                     <>\r\n//                         <em>No existe este código de artículo</em>\r\n//                         <Button onClick={() => {\r\n//                             setId('');\r\n//                             setShow(true);\r\n//                         }}>Registrarlo</Button>\r\n//                         <p>Buscarlo</p>\r\n//                         {autoComplete()}\r\n//                     </>\r\n//                     : description}\r\n//             </Popover.Body>\r\n//         </Popover>\r\n//     );\r\n\r\n//     if (!show)\r\n//         return (\r\n//             <Form.Group className=\"mb-3\">\r\n//                 <Form.Label>{label}</Form.Label>\r\n//                 <InputGroup>\r\n//                     <OverlayTrigger show={id !== ''} placement=\"right\" overlay={popover}>\r\n//                         <FormControl type=\"text\" placeholder={placeholder} onChange={(e) => {\r\n//                             onChange(e);\r\n//                             setId(e.target.value)\r\n//                             getDescription(e.target.value);\r\n//                         }} />\r\n//                     </OverlayTrigger>\r\n//                 </InputGroup>\r\n//             </Form.Group>);\r\n//     return (<ModalArt handleClose={() => setShow(false)} show={show} registration={true} />);\r\n// }","D:\\Users\\PC\\VirtualNAU\\client\\src\\modal.js",["92","93"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ReactToPrint from \"react-to-print\";\r\nimport './modal.css'\r\n\r\nexport class ModalController extends Component {//Debe ser extendida por el elemento que va a abrir el modal\r\n\r\n    state = {\r\n        showModal: false//True si y sólo si se debe mostrar el modal\r\n    }\r\n\r\n    showModal = () => {//A llamar cuando se quiere mostrar el modal\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    hideModal = () => {//A llamar cuando se quiere esconder el modal\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n}\r\n\r\nexport class ModalPrototype extends Component {//Debe ser invocada para crear el modal. Ver props \r\n\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} dialogClassName=\"modal-dialog\">\r\n                <Modal.Header>\r\n                    <Modal.Title>{this.props.title}</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    {this.props.children}\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    {(this.props.footer && this.props.footer.show)?\r\n                    <ReactToPrint trigger={() => <Button>Imprimir</Button>}\r\n                        content={() => this.props.footer.content}/> : <></>}\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={() => {\r\n                        this.props.post();//Se cierra desde post si todo está en orden\r\n                    }}>Confirmar</Button>\r\n                    <Button variant=\"secundary\" onClick={this.props.handleClose}>Cancelar</Button>\r\n                </Modal.Footer>\r\n            </Modal >\r\n        );\r\n    }\r\n}\r\n\r\nModalPrototype.propTypes = {\r\n    post: PropTypes.func.isRequired,//Función que enviará al back-end los datos del form\r\n    title: PropTypes.string.isRequired,//String que se mostrará como título del modal\r\n    show: PropTypes.bool.isRequired,//Boolean que especifica si se debe o no mostrar el modal\r\n    handleClose: PropTypes.func.isRequired,//Función que cerrará el modal al presionar el botón\r\n    children: PropTypes.element.isRequired,//Hijo que aparecerá en el modal\r\n    footer: PropTypes.object//Tiene a show y a content (lo que se debe imprimir)\r\n}","D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\modals.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\newPayment.js",[],"D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\deliverTask.js",["94"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\assignTask.js",["95","96","97","98","99"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\WorkshopsAdm\\RegistrationDrop\\registrationDrop.js",["100"],"D:\\Users\\PC\\VirtualNAU\\client\\src\\showData.js",["101","102","103","104","105","106","107","108","109","110","111"],"import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport './WorkshopsAdm/styles.css'\r\n\r\nconst initialState = {\r\n    data: '', //El nombre de la BD de la que sacamos los datos\r\n    table: [],//La tabla de datos sin filtrar\r\n    filteredTable: [],//La tabla a mostrar\r\n    titles: [],//Los atributos de la BD\r\n    headers: [],//Los títulos que se mostrarán en la tabla\r\n    input: '',//Ingreso de Inputbox para filtrar la tabla\r\n    filters: [],//Lista que muestra el tipo de filtro\r\n    filterInputs: [] //Lista que contiene lo ingresado por el usuario en cada filtro\r\n};\r\n\r\nexport class ShowData extends Component {\r\n\r\n    state = initialState;\r\n\r\n    resetState = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    setData = e => {//Consigue los datos de la base de datos, en base a e, que le especifica qué datos buscar   \r\n        console.log('hi');\r\n        Axios.get('http://localhost:3307/get' + e.charAt(0).toUpperCase() + e.slice(1)).then(response => {\r\n            const res = response.data, table = [], titles = [];\r\n            if (res)\r\n                res.map(row => table.push(Object.values(row)));\r\n            Object.getOwnPropertyNames(res[0]).map(property => {\r\n                let header;\r\n                switch (property) {\r\n                    case 'date':\r\n                        header = 'Fecha';\r\n                        break;\r\n                    case 'id':\r\n                        header = 'Código';\r\n                        break;\r\n                    case 'description':\r\n                        header = 'Descripción';\r\n                        break;\r\n                    case 'name':\r\n                        header = 'Nombre';\r\n                        break;\r\n                    case 'contact':\r\n                        header = 'Contacto';\r\n                        break;\r\n                    case 'money':\r\n                        header = (this.state.data === 'Workshop') ? 'Cuenta corriente' : 'Saldo';\r\n                        break;\r\n                    case 'article_id':\r\n                        header = 'Código de artículo';\r\n                        break;\r\n                    case 'article_description':\r\n                        header = 'Descripción de artículo';\r\n                        break;\r\n                    case 'quantity':\r\n                        header = 'Cantidad';\r\n                        break;\r\n                    case 'packages':\r\n                        header = 'Bultos';\r\n                        break;\r\n                    case 'cutDate':\r\n                        header = 'Fecha de corte';\r\n                        break;\r\n                    case 'fabrics':\r\n                        header = 'Telas';\r\n                        break;\r\n                    case 'colors':\r\n                        header = 'Colores';\r\n                        break;\r\n                    case 'responsible':\r\n                        header = 'responsible/s';\r\n                        break;\r\n                    case 'generalFeatures':\r\n                        header = 'Detalles';\r\n                        break;\r\n                    case 'state':\r\n                        header = 'Estado';\r\n                        break;\r\n                    case 'exitDate':\r\n                        header = 'Fecha de salida';\r\n                        break;\r\n                    case 'deadline':\r\n                        header = 'Fecha esperada';\r\n                        break;\r\n                    case 'weight':\r\n                        header = 'Peso';\r\n                        break;\r\n                    case 'price':\r\n                        header = 'Precio unitario';\r\n                        break;\r\n                    case 'threads':\r\n                        header = 'Hilos entregados';\r\n                        break;\r\n                    case 'calification':\r\n                        header = 'Calificación';\r\n                        break;\r\n                    case 'observations':\r\n                        header = 'Observaciones';\r\n                        break;\r\n                    case 'faulty':\r\n                        header = 'Fallados';\r\n                        break;\r\n                }\r\n                titles.push(header);\r\n            });\r\n            if(!this.state.table || this.state.table.length === 0)\r\n                this.setState({ filteredTable: table });\r\n            console.log(table);\r\n            console.log(titles);\r\n            this.setState({ titles, table, filteredTable: table, data: e });\r\n            this.setFilters(titles);\r\n        });\r\n    }\r\n\r\n    header = (name, index) => {//Devuelve un HTML tipo header que diga name\r\n        return (<th key={index}>{name}</th>);\r\n    }\r\n    \r\n    setFilters = (titles) => {//Crea los filtros en base a los títulos\r\n        let filters = [];\r\n        let filterInputs = [];\r\n        titles.map((title) => {//TODO: \r\n            switch(title){\r\n                case 'Descripción':\r\n                case 'Nombre':\r\n                case 'Contacto':\r\n                case 'Código de artículo':\r\n                case 'Descripción de artículo':\r\n                case 'Telas':\r\n                case 'Colores':\r\n                case 'responsible/s':\r\n                case 'Detalles':\r\n                case 'Código':\r\n                case 'Observaciones':\r\n                    filters.push('input');\r\n                    break;\r\n                case 'Saldo':\r\n                case 'Cantidad':\r\n                case 'Bultos':\r\n                case 'Precio unitario':\r\n                case 'Peso':\r\n                case 'Hilos entregados':\r\n                case 'Calificación':\r\n                case 'Fallados':\r\n                    filters.push('number');\r\n                    break;\r\n                case 'Fecha':\r\n                case 'Fecha de corte':\r\n                case 'Fecha de salida':\r\n                case 'Fecha esperada':\r\n                    filters.push('date');\r\n                    break;\r\n                case 'Estado':\r\n                    filters.push(['Todos', 'Asignado', 'No Asignado', 'Devuelto']);\r\n                    break;\r\n                case 'Pago':\r\n                    filters.push(['Todos', 'Pago', 'No Pago']);\r\n                    break;\r\n                default:\r\n                    filters.push('');\r\n                    break;\r\n                }\r\n            filterInputs.push('');\r\n            })\r\n        this.setState({filters, filterInputs});\r\n    }\r\n\r\n    compareTable = () => {//Le asigna a filteredTable una versión filtrada de table \r\n        //TODO: table se actualiza a filteredTable\r\n        \r\nconst {table, filterInputs, filters} = this.state;\r\n        let filteredTable = table.slice(), toErase = [];\r\n        table.map((row, i) => {\r\n            let erase = false;\r\n            row.map((cell, j) => {\r\n                let filterInput = filterInputs[j];\r\n                let operator = filterInput[0];\r\n                switch(filters[j]){\r\n                    case 'input':\r\n                        let cellString = typeof(cell) !== 'string'? cell.toString() : cell;\r\n                        if(!cellString.toLowerCase().includes(filterInput))\r\n                            erase = true;\r\n                        break;\r\n                    case 'number':\r\n                        let number = filterInput.slice(1, filterInput.length);\r\n                        if(filterInput === ''){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        if(isNaN(number) || (operator !== ' ' && operator !== '<' && operator !== '>' && operator !== '=')){\r\n                            erase = true;\r\n                            break;\r\n                        }\r\n                        \r\n                        number = Number(number);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = number >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = number <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = number !== cell;\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case 'date':\r\n                        if(!(((filterInput.length === 10 && filterInput[5] === '/') || filterInput.length === 5) && filterInput[2] === '/')){\r\n                            erase = false;\r\n                            break;\r\n                        }\r\n                        let dateParts = filterInput.slice(1, filterInput.length).split('/');\r\n                        let date = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        dateParts = cell.split('/');\r\n                        cell = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n                        switch(operator){\r\n                            case ' ':\r\n                                erase = false;\r\n                                break;\r\n                            case '>':\r\n                                erase = date >= cell;\r\n                                break;\r\n                            case '<':\r\n                                erase = date <= cell;\r\n                                break;\r\n                            case '=':\r\n                                erase = date !== cell;\r\n                                break;\r\n                        }\r\n                        erase = false;\r\n                        break;\r\n                }\r\n            })\r\n            if(erase)\r\n                toErase.push(i);\r\n        })\r\n        toErase = toErase.reverse();\r\n        toErase.map((element) => filteredTable.splice(element, 1));\r\n        if(this.state.filteredTable !== filteredTable)\r\n            this.setState({filteredTable});\r\n    }\r\n\r\n    render() {\r\n        const {filteredTable, titles, table} = this.state, data = { 'articles': 'Artículos', 'workshops': 'Talleres', 'payments': 'Pagos', 'tasks': 'Tareas'};\r\n        let title = 'Elegir datos a mostrar', dropdownList = [];\r\n        for (const key in data)\r\n            dropdownList.push(key);\r\n        return (\r\n            <>\r\n\r\n                <div className='selectWorkshopAdm'>\r\n                    <select title={title} onSelect={e => {\r\n                        this.setData(e);\r\n                        title = data.e;\r\n                    }}>\r\n                        <option>Elegir datos a mostrar</option>\r\n                        {dropdownList.map((e, index) => <option key={index} eventKey={e}>{data[e]}</option>)}\r\n                    </select>\r\n                </div>\r\n                {(titles && filteredTable) ?\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                {titles.map((title, i) => this.header(title, i))}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                            {this.state.filters.map((filter, i) => {\r\n                                switch (filter) {\r\n                                    case 'input':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            aux[i] = e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/></td>\r\n                                    case 'number':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <option eventKey={'>'}>Mayor</option>\r\n                                            <option eventKey={'<'}>Menor</option>\r\n                                            <option eventKey={'='}>Igual</option>\r\n                                        </DropdownButton></td>\r\n                                    case 'date':\r\n                                        return <td key={i}><FormControl onChange={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = ' ';\r\n                                            let firstChar = aux[i][0];\r\n                                            aux[i] = firstChar + e.target.value;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}/>\r\n                                        \r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            if(aux[i] === '')\r\n                                                aux[i] = e;\r\n                                            else\r\n                                                aux[i] = e + aux[i].substring(1);\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            <option eventKey={'>'}>Mayor</option>\r\n                                            <option eventKey={'<'}>Menor</option>\r\n                                            <option eventKey={'='}>Igual</option>\r\n                                        </DropdownButton></td>\r\n                                    default:\r\n                                        if(!filter[0])\r\n                                            return <td key={i}></td>;\r\n                                        return <td key={i}>\r\n                                        <DropdownButton onSelect={(e) => {\r\n                                            let aux = this.state.filterInputs;\r\n                                            aux[i] = e;\r\n                                            this.setState({filterInputs: aux});\r\n                                            this.compareTable();\r\n                                        }}>\r\n                                            {filter.map((element, index) => \r\n                                            <option key={index} eventKey={element}>{element}</option>)}\r\n                                        </DropdownButton></td>        \r\n                                }\r\n                            })}\r\n                            </tr>\r\n                            {filteredTable.map((row, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        {row.map((cell, j) => <td key={j}>{cell}</td>)}\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                    : null}\r\n            </>\r\n        );\r\n    }\r\n}",{"ruleId":"112","severity":1,"message":"113","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":13},{"ruleId":"112","severity":1,"message":"116","line":5,"column":8,"nodeType":"114","messageId":"115","endLine":5,"endColumn":20},{"ruleId":"112","severity":1,"message":"117","line":1,"column":28,"nodeType":"114","messageId":"115","endLine":1,"endColumn":37},{"ruleId":"112","severity":1,"message":"118","line":6,"column":22,"nodeType":"114","messageId":"115","endLine":6,"endColumn":28},{"ruleId":"112","severity":1,"message":"119","line":7,"column":5,"nodeType":"114","messageId":"115","endLine":7,"endColumn":11},{"ruleId":"112","severity":1,"message":"120","line":8,"column":5,"nodeType":"114","messageId":"115","endLine":8,"endColumn":10},{"ruleId":"112","severity":1,"message":"121","line":9,"column":5,"nodeType":"114","messageId":"115","endLine":9,"endColumn":9},{"ruleId":"112","severity":1,"message":"122","line":11,"column":8,"nodeType":"114","messageId":"115","endLine":11,"endColumn":14},{"ruleId":"123","severity":1,"message":"124","line":45,"column":17,"nodeType":"125","endLine":45,"endColumn":51},{"ruleId":"126","severity":1,"message":"127","line":46,"column":17,"nodeType":"125","endLine":46,"endColumn":21},{"ruleId":"112","severity":1,"message":"128","line":115,"column":12,"nodeType":"114","messageId":"115","endLine":115,"endColumn":16},{"ruleId":"112","severity":1,"message":"129","line":119,"column":12,"nodeType":"114","messageId":"115","endLine":119,"endColumn":17},{"ruleId":"112","severity":1,"message":"130","line":123,"column":12,"nodeType":"114","messageId":"115","endLine":123,"endColumn":17},{"ruleId":"112","severity":1,"message":"131","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":111,"column":42,"nodeType":"134","messageId":"135","endLine":111,"endColumn":44},{"ruleId":"136","severity":1,"message":"137","line":133,"column":8,"nodeType":"138","endLine":133,"endColumn":18,"suggestions":"139"},{"ruleId":"112","severity":1,"message":"140","line":3,"column":19,"nodeType":"114","messageId":"115","endLine":3,"endColumn":30},{"ruleId":"112","severity":1,"message":"141","line":3,"column":32,"nodeType":"114","messageId":"115","endLine":3,"endColumn":50},{"ruleId":"112","severity":1,"message":"131","line":7,"column":8,"nodeType":"114","messageId":"115","endLine":7,"endColumn":13},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"112","severity":1,"message":"146","line":6,"column":8,"nodeType":"114","messageId":"115","endLine":6,"endColumn":15},{"ruleId":"112","severity":1,"message":"147","line":7,"column":8,"nodeType":"114","messageId":"115","endLine":7,"endColumn":22},{"ruleId":"112","severity":1,"message":"148","line":12,"column":10,"nodeType":"114","messageId":"115","endLine":12,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":89,"column":29,"nodeType":"134","messageId":"135","endLine":89,"endColumn":31},{"ruleId":"112","severity":1,"message":"149","line":575,"column":12,"nodeType":"114","messageId":"115","endLine":575,"endColumn":17},{"ruleId":"112","severity":1,"message":"150","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":13},{"ruleId":"112","severity":1,"message":"151","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":14},{"ruleId":"136","severity":1,"message":"152","line":176,"column":8,"nodeType":"138","endLine":176,"endColumn":22,"suggestions":"153"},{"ruleId":"112","severity":1,"message":"151","line":10,"column":8,"nodeType":"114","messageId":"115","endLine":10,"endColumn":14},{"ruleId":"112","severity":1,"message":"154","line":11,"column":8,"nodeType":"114","messageId":"115","endLine":11,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":48,"column":29,"nodeType":"134","messageId":"135","endLine":48,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":65,"column":42,"nodeType":"134","messageId":"135","endLine":65,"endColumn":44},{"ruleId":"112","severity":1,"message":"155","line":121,"column":56,"nodeType":"114","messageId":"115","endLine":121,"endColumn":67},{"ruleId":"123","severity":1,"message":"124","line":34,"column":17,"nodeType":"125","endLine":34,"endColumn":57},{"ruleId":"112","severity":1,"message":"156","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":16},{"ruleId":"112","severity":1,"message":"157","line":5,"column":8,"nodeType":"114","messageId":"115","endLine":5,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":34,"column":61,"nodeType":"134","messageId":"135","endLine":34,"endColumn":63},{"ruleId":"158","severity":1,"message":"159","line":36,"column":17,"nodeType":"160","messageId":"161","endLine":109,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":128,"column":28,"nodeType":"134","messageId":"135","endLine":128,"endColumn":30},{"ruleId":"132","severity":1,"message":"133","line":179,"column":28,"nodeType":"134","messageId":"135","endLine":179,"endColumn":30},{"ruleId":"132","severity":1,"message":"133","line":181,"column":31,"nodeType":"134","messageId":"135","endLine":181,"endColumn":33},{"ruleId":"158","severity":1,"message":"159","line":184,"column":17,"nodeType":"160","messageId":"161","endLine":242,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":202,"column":25,"nodeType":"160","messageId":"161","endLine":215,"endColumn":26},{"ruleId":"158","severity":1,"message":"159","line":226,"column":25,"nodeType":"160","messageId":"161","endLine":239,"endColumn":26},{"ruleId":"112","severity":1,"message":"162","line":254,"column":39,"nodeType":"114","messageId":"115","endLine":254,"endColumn":44},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'WorkshopsAdm' is defined but never used.","'useEffect' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Vendor' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'Home' is defined but never used.","'About' is defined but never used.","'Users' is defined but never used.","'Axios' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'input' and 'materialsData'. Either include them or remove the dependency array.","ArrayExpression",["163"],"'TaskRequest' is defined but never used.","'RawResourceRequest' is defined but never used.","no-native-reassign",["164"],"no-negated-in-lhs",["165"],"'Popover' is defined but never used.","'OverlayTrigger' is defined but never used.","'ModalArt' is defined but never used.","'shown' is assigned a value but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'input.money' and 'name'. Either include them or remove the dependency array.",["166"],"'ReactToPrint' is defined but never used.","'currentYear' is assigned a value but never used.","'Dropdown' is defined but never used.","'Table' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'table' is assigned a value but never used.",{"desc":"167","fix":"168"},"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Update the dependencies array to be: [input, input.id, materialsData]",{"range":"171","text":"172"},"Update the dependencies array to be: [input.money, name, selectedTask]",{"range":"173","text":"174"},[5749,5759],"[input, input.id, materialsData]",[7813,7827],"[input.money, name, selectedTask]"]